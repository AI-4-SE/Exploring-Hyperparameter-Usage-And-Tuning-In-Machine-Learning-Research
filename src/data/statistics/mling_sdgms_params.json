{
    "nn_model/mlp/cldc_classifier.py": {
        "sklearn": {},
        "torch": {
            "CrossEntropyLoss_29": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "pred_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_bert/run_classification.py": {
        "sklearn": {
            "precision_recall_fscore_support_258": {
                "variable": {
                    "value": "(_, recall, _, support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(sorted_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_252": {
                "y_true": {
                    "value": "batch_test_lb.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "batch_pred.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "normalize": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_282": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{p[0]: p[1] for p in m.named_parameters()}",
                            "DictComp"
                        ],
                        [
                            "[p[1] for p in ps.items()]",
                            "ListComp"
                        ],
                        [
                            "list(filter(lambda p: p.requires_grad, ps))",
                            "Call"
                        ],
                        [
                            "[p[1] for p in ps.items() if 'word_embeddings' not in p[0] and 'position_embeddings' not in p[0] and ('token_type_embeddings' not in p[0])]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in ps.items() if 'classifier' in p[0]]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_331": {
                "variable": {
                    "value": "pre_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_30": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_190": {
                "variable": {
                    "value": "batch_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_249": {
                "variable": {
                    "value": "batch_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_303": {
                "variable": {
                    "value": "batch_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "data.self_train_idxs[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.self_train_idxs[label], sorted_batch_x[i].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_cldc.py": {
        "sklearn": {
            "precision_recall_fscore_support_168": {
                "variable": {
                    "value": "(_, recall, _, support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(sorted_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TSNE_281": {
                "variable": {
                    "value": "tsne",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "classification_report_296": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "confusion_matrix_303": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_score_163": {
                "y_true": {
                    "value": "batch_test_lb.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "batch_pred.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "normalize": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_185": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p[1] for p in m.named_parameters() if 'cldc_classifier' in p[0]]",
                            "ListComp"
                        ],
                        [
                            "list(filter(lambda p: p.requires_grad, m.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.cldc_init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_312": {
                "obj": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.state_dict()",
                            "Call"
                        ],
                        [
                            "{k: v.cpu() for (k, v) in model_dict.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}.pth'.format(params.log_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_xlsemicldc.py": {
        "sklearn": {},
        "torch": {
            "Adam_252": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p[1] for p in m.named_parameters() if 'xlingva' not in p[0]]",
                            "ListComp"
                        ],
                        [
                            "{p[0]: p[1] for p in m.named_parameters() if 'discriminator' not in p[0] and p[1].requires_grad}",
                            "DictComp"
                        ],
                        [
                            "{p[0]: p[1] for p in ps.items() if 'embedding' not in p[0] and 'xlingva.encoder' not in p[0] and ('xlingva.inferer' not in p[0])}",
                            "DictComp"
                        ],
                        [
                            "[p[1] for p in ps.items()]",
                            "ListComp"
                        ],
                        [
                            "{p[0]: p[1] for p in ps.items() if 'embedding' not in p[0]}",
                            "DictComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.semicldc_init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_266": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p[1] for p in m.named_parameters() if 'xlingva' not in p[0]]",
                            "ListComp"
                        ],
                        [
                            "{p[0]: p[1] for p in m.named_parameters() if 'discriminator' not in p[0] and p[1].requires_grad}",
                            "DictComp"
                        ],
                        [
                            "{p[0]: p[1] for p in ps.items() if 'embedding' not in p[0] and 'xlingva.encoder' not in p[0] and ('xlingva.inferer' not in p[0])}",
                            "DictComp"
                        ],
                        [
                            "[p[1] for p in ps.items()]",
                            "ListComp"
                        ],
                        [
                            "{p[0]: p[1] for p in ps.items() if 'embedding' not in p[0]}",
                            "DictComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.semicldc_init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_270": {
                "variable": {
                    "value": "dis_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p[1] for p in m.named_parameters() if 'discriminator' in p[0]]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.semicldc_init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_273": {
                "variable": {
                    "value": "dis_enc_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_enc_ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p[1] for p in m.named_parameters() if 'encoder' in p[0]]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.semicldc_init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_bert/create_pretraining_data.py": {
        "tensorflow": {
            "Feature_178": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_183": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_149": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_174": {
                "msg": {
                    "value": "Wrote %d total instances",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "total_written",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total_written + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_445": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_455": {
                "msg": {
                    "value": "*** Reading from input files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_466": {
                "msg": {
                    "value": "*** Writing to output files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_457": {
                "msg": {
                    "value": "  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_files",
                            "Name"
                        ],
                        [
                            "input_files",
                            "Name"
                        ]
                    ]
                }
            },
            "info_468": {
                "msg": {
                    "value": "  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_files",
                            "Name"
                        ],
                        [
                            "output_files",
                            "Name"
                        ]
                    ]
                }
            },
            "TFRecordWriter_109": {
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_files",
                            "Name"
                        ],
                        [
                            "output_files",
                            "Name"
                        ]
                    ]
                }
            },
            "info_157": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_158": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in instance.tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Int64List_178": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_183": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_200": {
                "name": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_files",
                            "Name"
                        ],
                        [
                            "input_files",
                            "Name"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_453": {
                "filename": {
                    "value": "input_pattern",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_149": {
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_168": {
                "msg": {
                    "value": "'%s: %s' % (feature_name, ' '.join([str(x) for x in values]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_bert/modeling.py": {
        "tensorflow": {
            "list_variables_330": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_358": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_409": {
                "variable": {
                    "value": "embedding_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_414": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, 1.0 - dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.gather(embedding_table, flat_input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_541": {
                "variable": {
                    "value": "to_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_549": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_666": {
                "variable": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "from_tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(from_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "query_act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_674": {
                "variable": {
                    "value": "key_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "key_act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_682": {
                "variable": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "value_act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_701": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(from_tensor_2d, num_attention_heads * size_per_head, activation=query_act, name='query', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(query_layer, batch_size, num_attention_heads, from_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=key_act, name='key', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(key_layer, batch_size, num_attention_heads, to_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_702": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_720": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_727": {
                "variable": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, to_seq_length, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_732": {
                "variable": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_735": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "dropout(attention_probs, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_738": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_926": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_942": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_377": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_407": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_416": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_417": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_419": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_476": {
                "variable": {
                    "value": "token_type_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_482": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_483": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_484": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_485": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_less_equal_490": {
                "variable": {
                    "value": "assert_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_631": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length, num_attention_heads, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_634": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_707": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_742": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_747": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_956": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_166": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_492": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_505": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_516": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_542": {
                "tensor": {
                    "value": "to_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_93": {
                "name": {
                    "value": "json_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_227": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_228": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_275": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_491": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_827": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_867": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "intermediate_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "3072",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "intermediate_act_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gelu",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_875": {
                "variable": {
                    "value": "layer_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "intermediate_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(attention_output, intermediate_size, activation=intermediate_act_fn, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_982": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_712": {
                "x": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_830": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_853": {
                "variable": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_858": {
                "variable": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_866": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_874": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_832": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_857": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_276": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "Name"
                        ],
                        [
                            "expected_rank",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_bert/optimization.py": {
        "tensorflow": {
            "get_or_create_global_step_27": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_32": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_70": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_71": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_74": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_83": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "is_warmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "tf.contrib.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_157": {
                "*inputs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_132": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_134": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_135": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_137": {
                "x": {
                    "value": "next_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train_bert/run_pretraining.py": {
        "tensorflow": {
            "DEFINE_string_84": {
                "name": {
                    "value": "tpu_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_90": {
                "name": {
                    "value": "tpu_zone",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_96": {
                "name": {
                    "value": "gcp_project",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_102": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_318": {
                "variable": {
                    "value": "flat_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_319": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_321": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_394": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([max_seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'masked_lm_positions': tf.FixedLenFeature([max_predictions_per_seq], tf.int64), 'masked_lm_ids': tf.FixedLenFeature([max_predictions_per_seq], tf.int64), 'masked_lm_weights': tf.FixedLenFeature([max_predictions_per_seq], tf.float32), 'next_sentence_labels': tf.FixedLenFeature([1], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "RunConfig_431": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_452": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=FLAGS.num_train_steps, num_warmup_steps=FLAGS.num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_151": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_260": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_265": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_266": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_271": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "bert_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_weights * per_example_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_292": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, bert_config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_296": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_300": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_301": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_303": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_305": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "set_verbosity_408": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_415": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_421": {
                "msg": {
                    "value": "*** Input Files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_427": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_117": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_168": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_181": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_lm_loss",
                            "Name"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(bert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "cls/seq_relationship",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordDataset_372": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_files",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "to_int32_401": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_423": {
                "msg": {
                    "value": "'  %s' % input_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_460": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_461": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_470": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_471": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_119": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_173": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_228": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_lm_loss",
                            "Name"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(metric_fn, [masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids, masked_lm_weights, next_sentence_example_loss, next_sentence_log_probs, next_sentence_labels])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_278": {
                "input_tensor": {
                    "value": "log_probs * one_hot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_280": {
                "input_tensor": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_304": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_317": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_338": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_340": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_342": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_344": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_346": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_348": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_350": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_and_batch_382": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sequence_shape[0]",
                            "Subscript"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "num_cpu_threads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Glob_419": {
                "filename": {
                    "value": "input_pattern",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUConfig_436": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GFile_483": {
                "name": {
                    "value": "output_eval_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_484": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_166": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "masked_lm_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, masked_lm_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "masked_lm_example_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_199": {
                "variable": {
                    "value": "masked_lm_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "masked_lm_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_203": {
                "variable": {
                    "value": "masked_lm_mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "masked_lm_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "next_sentence_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, next_sentence_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_208": {
                "variable": {
                    "value": "next_sentence_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_sentence_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "next_sentence_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_211": {
                "variable": {
                    "value": "next_sentence_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "next_sentence_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "next_sentence_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_sentence_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_213": {
                "variable": {
                    "value": "next_sentence_mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_sentence_example_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_356": {
                "value": {
                    "value": "input_files",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "parallel_interleave_366": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mode == tf.estimator.ModeKeys.TRAIN",
                            "Compare"
                        ]
                    ]
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(num_cpu_threads, len(input_files))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_486": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_161": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_bert/tokenization.py": {
        "tensorflow": {
            "GFile_126": {
                "name": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "args.py": {
        "torch": {
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data_model/classification_base_data_reader.py": {
        "torch": {
            "load_105": {
                "variable": {
                    "value": "idx_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "params.ss_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_model/cldc_data_reader.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "texts",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.cldc_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_model/data_reader.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "data_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "id_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_path + '.id'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_76": {
                "obj": {
                    "value": "data_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(id_file)",
                            "Call"
                        ],
                        [
                            "self.read_data(params, input_path)",
                            "Call"
                        ],
                        [
                            "{'text_idxs': text_idxs, 'text_lens': text_lens}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "input_path + '.id'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data_model/mlsa_data_reader.py": {
        "torch": {
            "load_27": {
                "variable": {
                    "value": "texts",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.mlsa_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_model/sw_data_reader.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_31": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_68": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "params.load_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/aux_semicldc_model.py": {
        "torch": {
            "LeakyReLU_113": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.xtohid_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.x_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.z1tohid_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_119": {
                "variable": {
                    "value": "self.hbn_z1x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.xtohid_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.x_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.z1tohid_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.ytohid_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_128": {
                "variable": {
                    "value": "self.hbn_z1xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.ytohid_z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.z2tohid_z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_136": {
                "variable": {
                    "value": "self.hbn_z2y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.ytohid_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.z1tohid_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.z2tohid_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_146": {
                "variable": {
                    "value": "self.hbn_z2z1y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.z2z1y_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.ytohid_z2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_156": {
                "variable": {
                    "value": "self.hbn_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params.aux_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_216": {
                "input": {
                    "value": "torch.sqrt(torch.sum((z1 - z2) ** 2, dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_217": {
                "input": {
                    "value": "F.cosine_similarity(z1, z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_327": {
                "input": {
                    "value": "torch.sqrt(torch.sum((dup_z1 - z2) ** 2, dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_328": {
                "input": {
                    "value": "F.cosine_similarity(dup_z1, z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_214": {
                "input": {
                    "value": "torch.sum(logvar1 - logvar2 - 1 + ((mu2 - mu1).pow(2) + logvar2.exp()) / logvar1.exp(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_324": {
                "input": {
                    "value": "torch.sum(dup_logvar1 - logvar2 - 1 + ((mu2 - dup_mu1).pow(2) + logvar2.exp()) / dup_logvar1.exp(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_338": {
                "input": {
                    "value": "torch.mul(pred_p, torch.log(pred_p + 1e-32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_338": {
                "input": {
                    "value": "pred_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_p.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(pred_p + 1e-32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_216": {
                "input": {
                    "value": "torch.sum((z1 - z2) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_217": {
                "x1": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.z1yx_z2.reparameterize(mu2, logvar2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_327": {
                "input": {
                    "value": "torch.sum((dup_z1 - z2) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_328": {
                "x1": {
                    "value": "dup_z1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enumerate_label(z1, batch_uohlb)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.z1yx_z2.reparameterize(mu2, logvar2)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_338": {
                "input": {
                    "value": "pred_p + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_215": {
                "input": {
                    "value": "logvar1 - logvar2 - 1 + ((mu2 - mu1).pow(2) + logvar2.exp()) / logvar1.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_216": {
                "input": {
                    "value": "(z1 - z2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_324": {
                "input": {
                    "value": "dup_logvar1 - logvar2 - 1 + ((mu2 - dup_mu1).pow(2) + logvar2.exp()) / dup_logvar1.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_327": {
                "input": {
                    "value": "(dup_z1 - z2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/bva.py": {
        "torch": {
            "save_126": {
                "obj": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model': self.state_dict(), 'optimizer': optimizer.state_dict(), 'vocab_x': data_x.vocab, 'vocab_y': data_y.vocab}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(params.emb_out_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_70": {
                "input": {
                    "value": "-0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp(), dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/cldc_model.py": {
        "torch": {}
    },
    "nn_model/decoder.py": {
        "torch": {
            "Embedding_22": {
                "variable": {
                    "value": "self.embeddings_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data_x.vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "data_x.vocab.PAD_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.embeddings_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data_y.vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "data_y.vocab.PAD_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.bias_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(data_x.vocab.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(data_y.vocab.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nll_x + nll_y",
                            "BinOp"
                        ],
                        [
                            "torch.mean(nll)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_89": {
                "variable": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(all_score, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(nll_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "data_x.vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_34": {
                "*size": {
                    "value": "data_y.vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_77": {
                "input": {
                    "value": "all_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddings(all_idxs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nn_model/embedding_layer.py": {
        "torch": {
            "Embedding_27": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "vocab.PAD_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.emb_do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "params.emb_do",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "embeddings.weight.data[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pre_emb[vocab.idx2word[i]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/encoder.py": {
        "torch": {
            "LSTM_29": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "params.enc_do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_51": {
                "variable": {
                    "value": "packed_input_word_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_word_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "batch_seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_53": {
                "variable": {
                    "value": "(out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_36": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "params.enc_do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_58": {
                "variable": {
                    "value": "packed_input_word_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_word_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "batch_seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_60": {
                "variable": {
                    "value": "(out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[hn[0:4:2], hn[1:4:2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/inferer.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.hbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_50": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_52": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nn_model/mlp/base_mlp.py": {
        "torch": {
            "Sequential_56": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "config[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "do_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(config[i].split('_')[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/mlp/xlingdiscriminator.py": {
        "torch": {
            "BCEWithLogitsLoss_23": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_34": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mlp(hid)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_34": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mlp(hid)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nn_model/semicldc_model.py": {
        "torch": {
            "Linear_135": {
                "variable": {
                    "value": "self.yohtoy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_141": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.yohtoy_toz2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_143": {
                "variable": {
                    "value": "self.hbn_z1y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.yohtoy_toz1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_145": {
                "variable": {
                    "value": "self.hbn_z2y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_169": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.yohtoy_toz2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_171": {
                "variable": {
                    "value": "self.hbn_z1y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_396": {
                "variable": {
                    "value": "U_dict[U_z1kld]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(U_dict['U_z1kld'] * U_pred_p).view(-1, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_680": {
                "variable": {
                    "value": "U_dict[UL_mean_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(U_pred_p * UL_loss).view(-1, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_687": {
                "variable": {
                    "value": "U_dict[U_rec]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(U_pred_p * UL_rec).view(-1, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_688": {
                "variable": {
                    "value": "U_dict[U_kld]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(U_pred_p * UL_kld).view(-1, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_689": {
                "variable": {
                    "value": "U_dict[U_yprior]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(U_pred_p * UL_yprior).view(-1, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_691": {
                "variable": {
                    "value": "U_dict[U_kld_fb]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(U_pred_p * U_dict['U_kld_fb']).view(-1, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_746": {
                "variable": {
                    "value": "z1y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z1, batch_ohlb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_752": {
                "variable": {
                    "value": "z1y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z1, batch_lb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_767": {
                "variable": {
                    "value": "z1y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z1, batch_ohlb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_795": {
                "variable": {
                    "value": "z2y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z2, batch_ohlb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_800": {
                "variable": {
                    "value": "z2y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z2, batch_lb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_114": {
                "variable": {
                    "value": "yprior_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_116": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_516": {
                "input": {
                    "value": "torch.sqrt(torch.sum((z1 - z2) ** 2, dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_517": {
                "input": {
                    "value": "F.cosine_similarity(z1, z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_639": {
                "input": {
                    "value": "torch.sqrt(torch.sum((dup_z1 - z2) ** 2, dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_640": {
                "input": {
                    "value": "F.cosine_similarity(dup_z1, z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_121": {
                "variable": {
                    "value": "yprior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(train_prop + 1e-32, dtype=torch.float, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_513": {
                "input": {
                    "value": "torch.sum(logvar1 - logvar2 - 1 + ((mu2 - mu1).pow(2) + logvar2.exp()) / logvar1.exp(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_545": {
                "input": {
                    "value": "logvar_prior - logvar_post - 1 + ((mu_post - mu_prior).pow(2) + logvar_post.exp()) / logvar_prior.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_558": {
                "input": {
                    "value": "logvar_prior - logvar_post - 1 + ((mu_post - mu_prior).pow(2) + logvar_post.exp()) / logvar_prior.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_563": {
                "input": {
                    "value": "1 + logvar_post - mu_post.pow(2) - logvar_post.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_636": {
                "input": {
                    "value": "torch.sum(dup_logvar1 - logvar2 - 1 + ((mu2 - dup_mu1).pow(2) + logvar2.exp()) / dup_logvar1.exp(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_650": {
                "input": {
                    "value": "torch.mul(pred_p, torch.log(pred_p + 1e-32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_334": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_440": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_650": {
                "input": {
                    "value": "pred_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_p.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(pred_p + 1e-32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "train_prop + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_516": {
                "input": {
                    "value": "torch.sum((z1 - z2) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_517": {
                "x1": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.xlingva.inferer.reparameterize(mu1, logvar1)",
                            "Call"
                        ],
                        [
                            "self.xlingva.inferer.reparameterize(mu1, logvar1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.z1y_z2.reparameterize(mu2, logvar2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_639": {
                "input": {
                    "value": "torch.sum((dup_z1 - z2) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_640": {
                "x1": {
                    "value": "dup_z1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enumerate_label(z1, batch_uohlb)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.z1y_z2.reparameterize(mu2, logvar2)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_650": {
                "input": {
                    "value": "pred_p + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_514": {
                "input": {
                    "value": "logvar1 - logvar2 - 1 + ((mu2 - mu1).pow(2) + logvar2.exp()) / logvar1.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_516": {
                "input": {
                    "value": "(z1 - z2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_636": {
                "input": {
                    "value": "dup_logvar1 - logvar2 - 1 + ((mu2 - dup_mu1).pow(2) + logvar2.exp()) / dup_logvar1.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_639": {
                "input": {
                    "value": "(dup_z1 - z2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_697": {
                "input": {
                    "value": "U_pred_p_rv + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/xling_embedding_layer.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/xlingdecoder.py": {
        "torch": {
            "CrossEntropyLoss_32": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ParameterList_43": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.z2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.zx2decin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.hid2vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(XlingDecoder, self).cal_nll(z, x, self.embeddings.get_lang_emb(lang), self.all_idxs[lang_idx], self.max_sent_lens[lang_idx], self.biases[lang_idx])",
                            "Call"
                        ],
                        [
                            "self.criterion(scores, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(nll_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "dec_init_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dec_init_hid.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "dec_init_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "dec_in_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec_in_embs, z.unsqueeze(1).repeat(1, dec_in_embs.shape[1], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "dec_init_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dec_init_hid.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "variable": {
                    "value": "dec_init_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "dec_in_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec_in_embs, z.unsqueeze(1).repeat(1, dec_in_embs.shape[1], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "data": {
                    "value": "torch.rand(vocab.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "params.z_dim + params.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_68": {
                "*args": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(XlingDecoder, self).cal_nll(z, x, self.embeddings.get_lang_emb(lang), self.all_idxs[lang_idx], self.max_sent_lens[lang_idx], self.biases[lang_idx])",
                            "Call"
                        ],
                        [
                            "self.criterion(scores, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(nll_loss, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "(dec_init_in, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_159": {
                "input": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(XlingDecoder, self).cal_nll(z, x, self.embeddings.get_lang_emb(lang), self.all_idxs[lang_idx], self.max_sent_lens[lang_idx], self.biases[lang_idx])",
                            "Call"
                        ],
                        [
                            "self.criterion(scores, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(nll_loss, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_49": {
                "*size": {
                    "value": "vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "params.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "params.z_dim + params.emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_80": {
                "*args": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(XlingDecoder, self).cal_nll(z, x, self.embeddings.get_lang_emb(lang), self.all_idxs[lang_idx], self.max_sent_lens[lang_idx], self.biases[lang_idx])",
                            "Call"
                        ],
                        [
                            "self.criterion(scores, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(nll_loss, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "(dec_init_in, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_161": {
                "input": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(XlingDecoder, self).cal_nll(z, x, self.embeddings.get_lang_emb(lang), self.all_idxs[lang_idx], self.max_sent_lens[lang_idx], self.biases[lang_idx])",
                            "Call"
                        ],
                        [
                            "self.criterion(scores, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(nll_loss, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nn_model/xlingdiscriminator.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.in_emb, self.hid_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_31": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "self.in_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.hid_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_38": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mlp(hid)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_38": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mlp(hid)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nn_model/xlingva.py": {
        "torch": {
            "mean_162": {
                "variable": {
                    "value": "kld",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp(), dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_204": {
                "obj": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model': {k: v.cpu() for (k, v) in self.state_dict().items()}}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(params.log_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_129": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_162": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nn_model/xlsemicldc_model.py": {
        "torch": {}
    },
    "train_bert/bert_cldc_data_reader.py": {
        "torch": {
            "load_30": {
                "variable": {
                    "value": "texts",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.train_cldc_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "texts",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.test_cldc_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_bert/convert_bert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train_parallel.py": {
        "torch": {
            "Adam_32": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, m.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params.init_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_142": {
                "input": {
                    "value": "kld - alpha * params.beta_C",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_semicldc.py": {
        "torch": {
            "Adam_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{p[0]: p[1] for p in m.named_parameters() if 'xlingva' not in p[0]}",
                            "DictComp"
                        ],
                        [
                            "{p[0]: p[1] for p in m.named_parameters() if p[1].requires_grad}",
                            "DictComp"
                        ],
                        [
                            "{p[0]: p[1] for p in ps.items() if 'xlingva.embedding' not in p[0] and 'xlingva.encoder' not in p[0] and ('xlingva.inferer' not in p[0])}",
                            "DictComp"
                        ],
                        [
                            "[p[1] for p in ps.items()]",
                            "ListComp"
                        ],
                        [
                            "{p[0]: p[1] for p in ps.items() if 'embedding' not in p[0]}",
                            "DictComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.semicldc_init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_212": {
                "variable": {
                    "value": "sorted_batch_yoh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "(v - init_param_dict[k]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_xling.py": {
        "torch": {
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p[1] for p in m.named_parameters() if 'discriminator' not in p[0]]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "dis_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p[1] for p in m.named_parameters() if 'discriminator' in p[0]]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_59": {
                "variable": {
                    "value": "dis_enc_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_enc_ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p[1] for p in m.named_parameters() if 'encoder' in p[0] or 'embedding' in p[0]]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/distributions.py": {
        "torch": {
            "softmax_48": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "-0.5 * math.log(2 * math.pi) - x ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "log_pdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-0.5 * math.log(2 * math.pi) - log_var / 2 - (x - mu) ** 2 / (2 * torch.exp(log_var))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "p * torch.log(prior + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_35": {
                "input": {
                    "value": "log_var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "prior + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/logpdfs.py": {
        "torch": {
            "sum_47": {
                "variable": {
                    "value": "fb_kld",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fb_kld * kl_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "fb_kld",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fb_kld * kl_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "logvar_p - logvar_q - 1 + ((mu_q - mu_p).pow(2) + logvar_q.exp()) / logvar_p.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_17": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/preprocess.py": {
        "torch": {
            "save_193": {
                "obj": {
                    "value": "{'train': train_texts, 'dev': dev_texts, 'test': test_texts}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'cldc.{}.pth'.format(lang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "text_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'mldoc.{}.pth'.format(lang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "{'train': train_texts, 'dev': dev_texts, 'test': test_texts, 'ub': ub_texts}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'mlsa.{}.{}.pth'.format(lang, domain)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "cat_37": {
                "variable": {
                    "value": "generated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch(batch_size, i) for i in range(y_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label_size",
                            "Name"
                        ]
                    ]
                }
            },
            "max_59": {
                "variable": {
                    "value": "(max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, y_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_60": {
                "input": {
                    "value": "sum_op(torch.exp(tensor - max), dim=dim, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_60": {
                "input": {
                    "value": "tensor - max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "visualize.py": {
        "torch": {
            "mean_196": {
                "variable": {
                    "value": "xq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dev_xs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_196": {
                "variable": {
                    "value": "xq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "idx_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}.pth'.format(''.join(y_names))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}