{
    "cases/credit_scoring/credit_scoring_problem.py": {},
    "cases/credit_scoring/credit_scoring_problem_multiobj.py": {},
    "cases/industrial/multivariate_forecasting.py": {},
    "cases/industrial/processing.py": {},
    "cases/industrial/univariate_forecasting_simple.py": {},
    "cases/multi_modal_genre_prediction.py": {},
    "cases/multi_target_levels_forecasting.py": {},
    "cases/river_levels_prediction/river_level_case_composer.py": {},
    "cases/river_levels_prediction/river_level_case_manual.py": {},
    "cases/spam_detection.py": {},
    "cases/time_series_gapfilling_case.py": {},
    "examples/advanced/automl/h2o_example.py": {},
    "examples/advanced/automl/pipeline_from_automl.py": {},
    "examples/advanced/automl/tpot_example.py": {},
    "examples/advanced/automl/tpot_vs_fedot.py": {
        "RandomForestClassifier_25": {
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "BernoulliNB_24": {
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "examples/advanced/decompose/classification_refinement_example.py": {},
    "examples/advanced/decompose/refinement_forecast_example.py": {},
    "examples/advanced/decompose/regression_refinement_example.py": {},
    "examples/advanced/gpu_example.py": {},
    "examples/advanced/multi_modal_pipeline.py": {},
    "examples/advanced/multitask_classification_regression.py": {},
    "examples/advanced/time_series_forecasting/composing_pipelines.py": {},
    "examples/advanced/time_series_forecasting/custom_model_tuning.py": {
        "Ridge_32": {
            "variable": {
                "value": "reg",
                "possible_values": []
            },
            "alpha": {
                "value": "alpha",
                "possible_values": [
                    "params.get('alpha')"
                ]
            }
        }
    },
    "examples/advanced/time_series_forecasting/exogenous.py": {},
    "examples/advanced/time_series_forecasting/multi_ts_arctic_forecasting.py": {},
    "examples/advanced/time_series_forecasting/nemo.py": {},
    "examples/advanced/time_series_forecasting/nemo_multiple.py": {},
    "examples/advanced/time_series_forecasting/sparse_lagged_tuning.py": {},
    "examples/project_import_export.py": {},
    "examples/simple/classification/classification_with_tuning.py": {},
    "examples/simple/classification/image_classification_problem.py": {},
    "examples/simple/classification/multiclass_prediction.py": {},
    "examples/simple/classification/resample_example.py": {},
    "examples/simple/pipeline_tune.py": {},
    "examples/simple/regression/regression_with_tuning.py": {},
    "examples/simple/time_series_forecasting/clstm.py": {},
    "examples/simple/time_series_forecasting/tuning_pipelines.py": {},
    "fedot/api/api_utils/api_composer.py": {
        "ApiComposer_40": {}
    },
    "fedot/api/api_utils/metrics.py": {
        "ApiMetrics_12": {}
    },
    "fedot/core/composer/metrics.py": {
        "Metric_33": {},
        "QualityMetric_50": {},
        "RMSE_146": {},
        "MSE_155": {},
        "MSLE_164": {},
        "MAPE_173": {},
        "SMAPE_182": {},
        "F1_190": {},
        "MAE_206": {},
        "R2_214": {},
        "ROCAUC_222": {},
        "Precision_250": {},
        "Logloss_259": {},
        "Accuracy_267": {},
        "Silhouette_277": {},
        "StructuralComplexity_286": {},
        "NodeNum_293": {},
        "ComputationTime_300": {}
    },
    "fedot/core/data/data_split.py": {},
    "fedot/core/operations/evaluation/clustering.py": {
        "SkLearnClusteringStrategy_12": {}
    },
    "fedot/core/operations/evaluation/evaluation_interfaces.py": {
        "EvaluationStrategy_39": {},
        "SkLearnEvaluationStrategy_117": {}
    },
    "fedot/core/operations/evaluation/operation_implementations/data_operations/categorical_encoders.py": {
        "OneHotEncodingImplementation_13": {},
        "LabelEncodingImplementation_115": {},
        "OneHotEncoder_23": {
            "variable": {
                "value": "self.encoder",
                "possible_values": []
            }
        },
        "OneHotEncoder_25": {
            "variable": {
                "value": "self.encoder",
                "possible_values": []
            }
        },
        "LabelEncoder_174": {
            "variable": {
                "value": "le",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/data_operations/decompose.py": {
        "DecomposerImplementation_11": {},
        "DecomposerRegImplementation_85": {},
        "DecomposerClassImplementation_126": {},
        "OneHotEncoder_212": {
            "variable": {
                "value": "binary_enc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/data_operations/sklearn_filters.py": {
        "FilterImplementation_19": {},
        "RegRANSACImplementation_66": {},
        "LinearRegRANSACImplementation_97": {},
        "NonLinearRegRANSACImplementation_116": {},
        "IsolationForestRegImplementation_134": {},
        "IsolationForestClassImplementation_196": {},
        "DecisionTreeRegressor_124": {
            "variable": {
                "value": "self.inner_model",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "RANSACRegressor_109": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "base_estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RANSACRegressor_111": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "base_estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RANSACRegressor_127": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "base_estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RANSACRegressor_129": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "base_estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "IsolationForest_146": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "IsolationForest_148": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            }
        },
        "StandardScaler_105": {
            "with_mean": {
                "value": "False",
                "possible_values": []
            }
        },
        "LinearRegression_105": {
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/data_operations/sklearn_imbalanced_class.py": {
        "ResampleImplementation_19": {}
    },
    "fedot/core/operations/evaluation/operation_implementations/data_operations/sklearn_selectors.py": {
        "FeatureSelectionImplementation_13": {},
        "LinearRegFSImplementation_114": {},
        "NonLinearRegFSImplementation_136": {},
        "LinearClassFSImplementation_158": {},
        "NonLinearClassFSImplementation_180": {},
        "LinearRegression_123": {
            "variable": {
                "value": "self.inner_model",
                "possible_values": []
            },
            "normalize": {
                "value": "True",
                "possible_values": []
            }
        },
        "DecisionTreeRegressor_145": {
            "variable": {
                "value": "self.inner_model",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "LogisticRegression_167": {
            "variable": {
                "value": "self.inner_model",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "DecisionTreeClassifier_189": {
            "variable": {
                "value": "self.inner_model",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "RFE_127": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RFE_132": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RFE_149": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RFE_154": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RFE_171": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RFE_176": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RFE_193": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "RFE_198": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/data_operations/sklearn_transformations.py": {
        "ComponentAnalysisImplementation_17": {},
        "PCAImplementation_101": {},
        "KernelPCAImplementation_118": {},
        "FastICAImplementation_134": {},
        "PolyFeaturesImplementation_149": {},
        "ScalingImplementation_215": {},
        "NormalizationImplementation_236": {},
        "ImputationImplementation_257": {},
        "PCA_111": {
            "variable": {
                "value": "self.pca",
                "possible_values": []
            },
            "svd_solver": {
                "value": "full",
                "possible_values": []
            },
            "n_components": {
                "value": "mle",
                "possible_values": []
            }
        },
        "PCA_113": {
            "variable": {
                "value": "self.pca",
                "possible_values": []
            }
        },
        "KernelPCA_128": {
            "variable": {
                "value": "self.pca",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "KernelPCA_130": {
            "variable": {
                "value": "self.pca",
                "possible_values": []
            }
        },
        "FastICA_143": {
            "variable": {
                "value": "self.pca",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "FastICA_145": {
            "variable": {
                "value": "self.pca",
                "possible_values": []
            }
        },
        "PolynomialFeatures_162": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "include_bias": {
                "value": "False",
                "possible_values": []
            }
        },
        "PolynomialFeatures_167": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "include_bias": {
                "value": "False",
                "possible_values": []
            }
        },
        "StandardScaler_227": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "StandardScaler_229": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            }
        },
        "MinMaxScaler_248": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "MinMaxScaler_250": {
            "variable": {
                "value": "self.operation",
                "possible_values": []
            }
        },
        "SimpleImputer_274": {
            "variable": {
                "value": "self.imputer_cat",
                "possible_values": []
            }
        },
        "SimpleImputer_275": {
            "variable": {
                "value": "self.imputer_num",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "SimpleImputer_277": {
            "variable": {
                "value": "self.imputer_cat",
                "possible_values": []
            }
        },
        "SimpleImputer_278": {
            "variable": {
                "value": "self.imputer_num",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/data_operations/ts_transformations.py": {
        "LaggedImplementation_17": {},
        "SparseLaggedTransformationImplementation_264": {},
        "LaggedTransformationImplementation_285": {},
        "TsSmoothingImplementation_301": {},
        "ExogDataTransformationImplementation_358": {},
        "GaussianFilterImplementation_415": {},
        "NumericalDerivativeFilterImplementation_458": {},
        "CutImplementation_581": {},
        "TruncatedSVD_748": {
            "variable": {
                "value": "svd",
                "possible_values": []
            },
            "n_components": {
                "value": "n_components",
                "possible_values": [
                    "int(features_columns.shape[1] * n_components_perc)",
                    "int(features_columns.shape[1] * n_components_perc)",
                    "features_columns.shape[0] - 1"
                ]
            },
            "n_iter": {
                "value": "5",
                "possible_values": []
            },
            "random_state": {
                "value": "42",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/models/discriminant_analysis.py": {
        "DiscriminantAnalysisImplementation_11": {},
        "LDAImplementation_60": {},
        "QDAImplementation_117": {},
        "LinearDiscriminantAnalysis_65": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "LinearDiscriminantAnalysis_67": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            }
        },
        "QuadraticDiscriminantAnalysis_122": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "QuadraticDiscriminantAnalysis_124": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/models/keras.py": {
        "FedotCNNImplementation_155": {},
        "OneHotEncoder_97": {
            "variable": {
                "value": "le",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/models/knn.py": {
        "KNeighborsImplementation_10": {},
        "FedotKnnClassImplementation_71": {},
        "FedotKnnRegImplementation_108": {},
        "KNeighborsClassifier_75": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "KNeighborsClassifier_78": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            }
        },
        "KNeighborsRegressor_112": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "KNeighborsRegressor_115": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/models/svc.py": {
        "FedotSVCImplementation_11": {},
        "OneVsRestClassifier_21": {
            "variable": {
                "value": "self.model",
                "possible_values": []
            },
            "estimator": {
                "value": "self.inner_model",
                "possible_values": []
            }
        },
        "SVC_15": {
            "variable": {
                "value": "self.inner_model",
                "possible_values": []
            },
            "kernel": {
                "value": "linear",
                "possible_values": []
            },
            "probability": {
                "value": "True",
                "possible_values": []
            },
            "class_weight": {
                "value": "balanced",
                "possible_values": []
            }
        },
        "SVC_19": {
            "variable": {
                "value": "self.inner_model",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/operation_implementations/models/ts_implementations/clstm.py": {
        "TorchMock_19": {},
        "CLSTMImplementation_34": {},
        "LSTMNetwork_237": {},
        "StandardScaler_62": {
            "variable": {
                "value": "self.scaler",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "fedot/core/operations/evaluation/text.py": {
        "SkLearnTextVectorizeStrategy_24": {},
        "FedotTextPreprocessingStrategy_80": {},
        "GensimTextVectorizeStrategy_128": {}
    },
    "fedot/core/pipelines/tuning/tuner_interface.py": {
        "HyperoptTuner_24": {}
    },
    "fedot/core/utils.py": {},
    "fedot/core/validation/split.py": {
        "OneFoldInputDataSplit_11": {},
        "TsInputDataSplit_25": {
            "base_class_0": {
                "value": "sklearn.model_selection.TimeSeriesSplit",
                "possible_values": []
            }
        },
        "KFold_89": {
            "variable": {
                "value": "kf",
                "possible_values": []
            },
            "n_splits": {
                "value": "folds",
                "possible_values": []
            }
        }
    },
    "fedot/explainability/surrogate_explainer.py": {
        "SurrogateExplainer_19": {}
    },
    "fedot/preprocessing/categorical.py": {
        "BinaryCategoricalPreprocessor_11": {},
        "LabelEncoder_103": {
            "variable": {
                "value": "encoder",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "fedot/preprocessing/preprocessing.py": {
        "DataPreprocessor_35": {},
        "LabelEncoder_408": {
            "variable": {
                "value": "target_encoder",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "fedot/sensitivity/operations_hp_sensitivity/one_operation_sensitivity.py": {
        "OneOperationHPAnalyze_25": {}
    },
    "fedot/utilities/define_metric_by_task.py": {
        "MetricByTask_10": {},
        "TunerMetricByTask_29": {}
    },
    "fedot/utilities/synth_dataset_generator.py": {},
    "test/integration/quality/test_synthetic_tasks.py": {},
    "test/integration/real_applications/test_examples.py": {},
    "test/integration/real_applications/test_real_cases.py": {},
    "test/unit/api/test_main_api.py": {
        "LabelEncoder_347": {
            "variable": {
                "value": "df_el[target_column]",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "test/unit/composer/test_composer.py": {},
    "test/unit/composer/test_quality_metrics.py": {},
    "test/unit/data/test_data.py": {},
    "test/unit/explainability/test_pipeline_explanation.py": {},
    "test/unit/models/test_atomized_model.py": {},
    "test/unit/models/test_model.py": {
        "MinMaxScaler_97": {
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "test/unit/models/test_split_train_test.py": {},
    "test/unit/models/test_strategy.py": {},
    "test/unit/pipelines/test_node.py": {
        "LogisticRegression_49": {
            "variable": {
                "value": "test_skl_model",
                "possible_values": []
            },
            "C": {
                "value": "10.0",
                "possible_values": []
            },
            "random_state": {
                "value": "1",
                "possible_values": []
            },
            "solver": {
                "value": "liblinear",
                "possible_values": []
            },
            "max_iter": {
                "value": "10000",
                "possible_values": []
            },
            "verbose": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "test/unit/pipelines/test_node_cache.py": {},
    "test/unit/pipelines/test_pipeline.py": {},
    "test/unit/pipelines/test_pipeline_ts_wrappers.py": {},
    "test/unit/pipelines/test_pipeline_tuning.py": {},
    "test/unit/tasks/test_classification.py": {},
    "test/unit/tasks/test_forecasting.py": {},
    "test/unit/tasks/test_gapfilling.py": {},
    "test/unit/tasks/test_regression.py": {},
    "test/unit/utilities/test_pipeline_import_export.py": {},
    "test/unit/validation/test_table_cv.py": {},
    "test/unit/validation/test_time_series_cv.py": {}
}