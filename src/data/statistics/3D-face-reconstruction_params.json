{
    "lib/graph.py": {
        "sklearn": {}
    },
    "base_model.py": {
        "tensorflow": {
            "concat_194": {
                "variable": {
                    "value": "self.image_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[image_emb, image_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "self.image_emb_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[image_emb_test, image_feat_test]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_261": {
                "variable": {
                    "value": "self.op_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_264": {
                "variable": {
                    "value": "self.op_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_266": {
                "variable": {
                    "value": "var_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_267": {
                "variable": {
                    "value": "trainable_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_271": {
                "variable": {
                    "value": "self.op_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_save",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trainable_vars + bn_vars + global_vars",
                            "BinOp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_280": {
                "variable": {
                    "value": "shapePC",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bfm.shapePC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_282": {
                "variable": {
                    "value": "expPC",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bfm.expressionPC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_283": {
                "variable": {
                    "value": "colorMU",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bfm.colorMU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_284": {
                "variable": {
                    "value": "colorPC",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bfm.colorPC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_295": {
                "variable": {
                    "value": "normal_rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_norm(vertice)",
                            "Call"
                        ],
                        [
                            "results['normals'][idx]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.rotation_matrix_tf(angles)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_299": {
                "variable": {
                    "value": "pca_texture",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "pca_texture",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ij,aj->ai', colorPC, color_coef) + colorMU",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(pca_texture, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "pca_texture / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(pca_texture, [self.batch_size, self.num_vert, 3])",
                            "Call"
                        ],
                        [
                            "utils.img_denormalize(results['pca_texts'][idx])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "pca_texture",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pca_texture",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ij,aj->ai', colorPC, color_coef) + colorMU",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(pca_texture, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "pca_texture / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(pca_texture, [self.batch_size, self.num_vert, 3])",
                            "Call"
                        ],
                        [
                            "utils.img_denormalize(results['pca_texts'][idx])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.num_vert, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tan_343": {
                "variable": {
                    "value": "facial",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fov_y / 360.0 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_344": {
                "variable": {
                    "value": "facial",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "facial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tan(fov_y / 360.0 * math.pi)",
                            "Call"
                        ],
                        [
                            "tf.reshape(facial, [-1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_349": {
                "variable": {
                    "value": "eros_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images[..., :3], eros_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_350": {
                "variable": {
                    "value": "lm_project",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "proj_vert",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shift_vert[..., :3] * [[[1, -1, -1]]]",
                            "BinOp"
                        ],
                        [
                            "proj_vert[..., :2] / facial / proj_vert[..., 2:3]",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.lm_3d_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_353": {
                "variable": {
                    "value": "proj_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[proj_color[..., :3] * visiable, visiable]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_357": {
                "variable": {
                    "value": "refine_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pca_texture, proj_color]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_499": {
                "variable": {
                    "value": "hat_gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(hat_gradient), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_500": {
                "variable": {
                    "value": "hat_gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(hat_gradient - 1.0) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_570": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.summ_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_845": {
                "variable": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.ckpt_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_859": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_867": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SparseTensor_883": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.column_stack((L.row, L.col))",
                            "Call"
                        ],
                        [
                            "np.column_stack((L.row, L.col))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "L.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "L.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_886": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_887": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x0, [M, Fin * N])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[M, Fin * N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_888": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x0, [M, Fin * N])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_901": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[K, M, Fin, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_902": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[3, 1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_903": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * M, Fin * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_906": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._weight_variable([Fin * K, Fout], regularization=False)",
                            "Call"
                        ],
                        [
                            "self._weight_variable([int(Min), Mout], regularization=True)",
                            "Call"
                        ],
                        [
                            "self._weight_variable([kernel, kernel, f_in, f_out])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_924": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shortcut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_960": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.column_stack((L.row, L.col))",
                            "Call"
                        ],
                        [
                            "np.column_stack((L.row, L.col))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "L.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "L.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_963": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_964": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[M, Fin * N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_966": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[Mp, Fin, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_967": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_999": {
                "variable": {
                    "value": "point_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bfm.point_buf - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(point_id, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1000": {
                "variable": {
                    "value": "v1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vertice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(vert_offset, [self.batch_size, self.num_vert, 3]) + self.vert_mean",
                            "BinOp"
                        ],
                        [
                            "vertice - tf.reduce_mean(self.vert_mean, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "results['vertices'][idx]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.round(proj_vert * half_size + half_size), np.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "face_id[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1001": {
                "variable": {
                    "value": "v2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vertice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(vert_offset, [self.batch_size, self.num_vert, 3]) + self.vert_mean",
                            "BinOp"
                        ],
                        [
                            "vertice - tf.reduce_mean(self.vert_mean, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "results['vertices'][idx]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.round(proj_vert * half_size + half_size), np.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "face_id[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1002": {
                "variable": {
                    "value": "v3",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vertice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(vert_offset, [self.batch_size, self.num_vert, 3]) + self.vert_mean",
                            "BinOp"
                        ],
                        [
                            "vertice - tf.reduce_mean(self.vert_mean, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "results['vertices'][idx]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.round(proj_vert * half_size + half_size), np.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "face_id[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_1006": {
                "variable": {
                    "value": "face_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v1 - v2",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v2 - v3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_1008": {
                "variable": {
                    "value": "face_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[face_norm, tf.zeros([self.batch_size, 1, 3], dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1009": {
                "variable": {
                    "value": "v_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "face_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cross(e1, e2)",
                            "Call"
                        ],
                        [
                            "tf.concat([face_norm, tf.zeros([self.batch_size, 1, 3], dtype=tf.float32)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "point_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bfm.point_buf - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(point_id, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1011": {
                "variable": {
                    "value": "v_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(v_norms, [self.batch_size, self.num_vert, 8, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1019": {
                "variable": {
                    "value": "vertice",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(proj_vert * half_size + half_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1020": {
                "variable": {
                    "value": "flatten_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[:, :, :3] * render_mask + input_image[:, :, :3] * (1 - render_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.img_size * self.img_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_1021": {
                "variable": {
                    "value": "x_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "vertice[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.img_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_1022": {
                "variable": {
                    "value": "y_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "vertice[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.img_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_1032": {
                "variable": {
                    "value": "init_lit",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.8, 0, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1033": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(gamma, [-1, 3, 9])",
                            "Call"
                        ],
                        [
                            "gamma + tf.reshape(init_lit, [1, 1, 9])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1044": {
                "variable": {
                    "value": "Y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(a0 * c0, [1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1045": {
                "variable": {
                    "value": "Y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-a1 * c1 * norm[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1046": {
                "variable": {
                    "value": "Y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a1 * c1 * norm[:, :, 2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1047": {
                "variable": {
                    "value": "Y3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-a1 * c1 * norm[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1048": {
                "variable": {
                    "value": "Y4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a2 * c2 * norm[:, :, 0] * norm[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1049": {
                "variable": {
                    "value": "Y5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-a2 * c2 * norm[:, :, 1] * norm[:, :, 2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1050": {
                "variable": {
                    "value": "Y6",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a2 * c2 * 0.5 / tf.sqrt(3.0) * (3 * tf.square(norm[:, :, 2]) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1051": {
                "variable": {
                    "value": "Y7",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-a2 * c2 * norm[:, :, 0] * norm[:, :, 2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_1052": {
                "variable": {
                    "value": "Y8",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a2 * c2 * 0.5 * (tf.square(norm[:, :, 0]) - tf.square(norm[:, :, 1]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "Y_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.num_vert, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_1053": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1055": {
                "variable": {
                    "value": "lit_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(Y, tf.expand_dims(gamma[:, 0, :], 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1057": {
                "variable": {
                    "value": "lit_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(Y, tf.expand_dims(gamma[:, 1, :], 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1058": {
                "variable": {
                    "value": "lit_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(Y, tf.expand_dims(gamma[:, 2, :], 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1060": {
                "variable": {
                    "value": "face_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[lit_r * face_texture[:, :, 0], lit_g * face_texture[:, :, 1], lit_b * face_texture[:, :, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "self.ph_rgbas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.img_size, self.img_size, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_rgbas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.ph_2dlms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, len(self.lm_3d_idx), 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_2dlm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.ph_ren_lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "render_lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.ph_ref_lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "refine_lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GraphDef_156": {
                "variable": {
                    "value": "face_rec_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_164": {
                "variable": {
                    "value": "image_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.graph.get_tensor_by_name(net_name + '/resnet_v1_50/pool5:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image_emb, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GraphDef_172": {
                "variable": {
                    "value": "face_net_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_188": {
                "variable": {
                    "value": "image_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_img_feat('facenet', self.train_images)",
                            "Call"
                        ],
                        [
                            "self.graph.get_tensor_by_name(net_name + '/InceptionResnetV1/Logits/AvgPool_1a_8x8/AvgPool:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image_feat, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_306": {
                "variable": {
                    "value": "camera_position",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_307": {
                "variable": {
                    "value": "camera_lookat",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_308": {
                "variable": {
                    "value": "camera_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_309": {
                "variable": {
                    "value": "light_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.constant([0, 0, 0], dtype=tf.float32), [1, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_311": {
                "variable": {
                    "value": "light_intensities",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.constant([0, 0, 0], dtype=tf.float32), [1, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_314": {
                "variable": {
                    "value": "ambient_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.constant([1, 1, 1], dtype=tf.float32), [1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_368": {
                "name": {
                    "value": "pca_render_text",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pca_render_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_369": {
                "name": {
                    "value": "gcn_render_text",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gcn_render_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_370": {
                "name": {
                    "value": "pca_render_color",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pca_render_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_371": {
                "name": {
                    "value": "gcn_render_color",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gcn_render_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_514": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_521": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, self.decay_steps, decay_rate, staircase=True)",
                            "Call"
                        ],
                        [
                            "self.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "trainable_variables_533": {
                "variable": {
                    "value": "all_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_549": {
                "variable": {
                    "value": "update_bn_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_865": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_891": {
                "variable": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_907": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, M, Fout]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "elu_943": {
                "features": {
                    "value": "inputs + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_950": {
                "features": {
                    "value": "inputs + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_1065": {
                "t": {
                    "value": "face_color / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_155": {
                "name": {
                    "value": "os.path.join(self.root_dir, 'data/FaceReconModel.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_162": {
                "graph_def": {
                    "value": "face_rec_graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "net_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input_imgs:0': bgr_inputs}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GFile_171": {
                "name": {
                    "value": "os.path.join(self.root_dir, 'data/FaceNetModel.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_182": {
                "graph_def": {
                    "value": "face_net_graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "net_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input:0': facenet_input, 'phase_train:0': False}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "einsum_286": {
                "equation": {
                    "value": "ij,aj->ai",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "expPC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(self.bfm.expressionPC, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "exp_coef",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "tensor": {
                    "value": "vert_offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ij,aj->ai', shapePC, shape_coef) + tf.einsum('ij,aj->ai', expPC, exp_coef)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.num_vert, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_289": {
                "input_tensor": {
                    "value": "self.vert_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_294": {
                "a": {
                    "value": "vertice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(vert_offset, [self.batch_size, self.num_vert, 3]) + self.vert_mean",
                            "BinOp"
                        ],
                        [
                            "vertice - tf.reduce_mean(self.vert_mean, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "results['vertices'][idx]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.round(proj_vert * half_size + half_size), np.int32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.rotation_matrix_tf(angles)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_294": {
                "tensor": {
                    "value": "translation",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_297": {
                "equation": {
                    "value": "ij,aj->ai",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "colorPC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(self.bfm.colorPC, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "color_coef",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "render",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_318": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_352": {
                "x": {
                    "value": "normal_rot[..., 2:3] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_360": {
                "name_or_scope": {
                    "value": "render",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_394": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "absolute_difference_410": {
                "variable": {
                    "value": "project_loss_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "gcn_color * proj_color[..., 3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "proj_color[..., :3] * proj_color[..., 3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_415": {
                "variable": {
                    "value": "project_loss_pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "gcn_color * (1 - proj_color[..., 3:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "pca_color * (1 - proj_color[..., 3:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_422": {
                "variable": {
                    "value": "refine_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "gcn_texture",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mesh_generator(image_emb, refine_input, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "utils.img_denormalize(results['gcn_texts'][idx])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "pca_texture",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ij,aj->ai', colorPC, color_coef) + colorMU",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(pca_texture, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "pca_texture / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(pca_texture, [self.batch_size, self.num_vert, 3])",
                            "Call"
                        ],
                        [
                            "utils.img_denormalize(results['pca_texts'][idx])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_428": {
                "variable": {
                    "value": "gcn_skin_texture",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gcn_texture",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mesh_generator(image_emb, refine_input, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "utils.img_denormalize(results['gcn_texts'][idx])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.bfm.skin_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_432": {
                "variable": {
                    "value": "var_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_436": {
                "variable": {
                    "value": "sym_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(sym_diff) + 1e-16, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_476": {
                "name": {
                    "value": "loss/data_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "data_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ph_ref_lambda * refine_loss + self.ph_ren_lambda * (project_loss + 0.2 * perception_loss + 0.5 * sym_loss + 0.01 * var_loss)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_477": {
                "name": {
                    "value": "loss/pca_render_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pca_render_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.losses.absolute_difference(predictions=pca_render[..., :3] * gcn_render_mask, labels=input_image[..., :3] * gcn_render_mask, reduction=tf.losses.Reduction.SUM) / tf.reduce_sum(gcn_render_mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_478": {
                "name": {
                    "value": "loss/gcn_render_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gcn_render_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.losses.absolute_difference(predictions=gcn_render[..., :3] * gcn_render_mask, labels=input_image[..., :3] * gcn_render_mask, reduction=tf.losses.Reduction.SUM) / tf.reduce_sum(gcn_render_mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_479": {
                "name": {
                    "value": "loss/project_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "project_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "project_loss_image + 0.3 * project_loss_pca",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_480": {
                "name": {
                    "value": "loss/refine_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "refine_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.losses.absolute_difference(predictions=gcn_texture, labels=pca_texture, reduction=tf.losses.Reduction.MEAN)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_481": {
                "name": {
                    "value": "loss/perception_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "perception_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - tf.reduce_mean(utils.cosine(input_feat, gcn_feat))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_482": {
                "name": {
                    "value": "loss/var_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "var_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(var_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_483": {
                "name": {
                    "value": "loss/sym_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "sym_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.sqrt(tf.reduce_sum(tf.square(sym_diff) + 1e-16, axis=-1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_484": {
                "name": {
                    "value": "loss/regularization",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "regularization",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regularization * tf.add_n(self.regularizers)",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_498": {
                "ys": {
                    "value": "hat_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.image_disc(hat_image, t, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "hat_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "epsilon * real_image + (1 - epsilon) * fake_image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_499": {
                "input_tensor": {
                    "value": "tf.square(hat_gradient)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_502": {
                "input_tensor": {
                    "value": "fake_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.image_disc(fake_image, t, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_512": {
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_516": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "decay_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.98",
                            "MethodArgument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_551": {
                "variable": {
                    "value": "gen_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, self.decay_steps, decay_rate, staircase=True)",
                            "Call"
                        ],
                        [
                            "self.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "control",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dilation2d_834": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.dilation_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "he_normal_856": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_892": {
                "values": {
                    "value": "[x, x_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_917": {
                "name_or_scope": {
                    "value": "filter1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_919": {
                "name_or_scope": {
                    "value": "bias_relu1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_922": {
                "name_or_scope": {
                    "value": "filter2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_977": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._weight_variable([Fin * K, Fout], regularization=False)",
                            "Call"
                        ],
                        [
                            "self._weight_variable([int(Min), Mout], regularization=True)",
                            "Call"
                        ],
                        [
                            "self._weight_variable([kernel, kernel, f_in, f_out])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_978": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_982": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_1011": {
                "tensor": {
                    "value": "v_norms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(face_norm, point_id, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.num_vert, 8, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1013": {
                "input": {
                    "value": "tf.linalg.norm(v_norm, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_1019": {
                "x": {
                    "value": "proj_vert * half_size + half_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1034": {
                "tensor": {
                    "value": "init_lit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.8, 0, 0, 0, 0, 0, 0, 0, 0], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_1037": {
                "x": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_1038": {
                "x": {
                    "value": "8.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_1039": {
                "x": {
                    "value": "4 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_1040": {
                "x": {
                    "value": "4 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_1041": {
                "x": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_1044": {
                "tensor": {
                    "value": "a0 * c0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1055": {
                "a": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(gamma[:, 0, :], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1057": {
                "a": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(gamma[:, 1, :], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1058": {
                "a": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(gamma[:, 2, :], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_140": {
                "value": {
                    "value": "x['faces']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'refer_faces_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "tensor": {
                    "value": "tf.constant([0, 0, 0], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "tensor": {
                    "value": "tf.constant([0, 0, 0], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_314": {
                "tensor": {
                    "value": "tf.constant([1, 1, 1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_395": {
                "name": {
                    "value": "data_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "moments_430": {
                "variable": {
                    "value": "(_, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "gcn_skin_texture[..., i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_472": {
                "name": {
                    "value": "regularization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_473": {
                "inputs": {
                    "value": "self.regularizers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_499": {
                "x": {
                    "value": "hat_gradient",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(hat_score, hat_image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(hat_gradient), axis=[1, 2, 3]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(hat_gradient - 1.0) * scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_500": {
                "x": {
                    "value": "hat_gradient - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_543": {
                "control_inputs": {
                    "value": "check_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_550": {
                "control_inputs": {
                    "value": "[op_g_grad] + update_bn_ops",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_556": {
                "variable": {
                    "value": "dis_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learning_rate, global_step, self.decay_steps, decay_rate, staircase=True)",
                            "Call"
                        ],
                        [
                            "self.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "control",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Summary_631": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='validation/loss', simple_value=results['all_loss'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "erosion2d_836": {
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(inputs, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "outputs * [[[[2.0, 2.0, 2.0, 1.0]]]] - [[[[1.0, 1.0, 1.0, 0.0]]]]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dilation2d(inputs, self.dilation_kernel, [1, 1, 1, 1], [1, 1, 1, 1], 'SAME') - 1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.erosion2d(outputs, self.erosion_kernel, [1, 1, 1, 1], [1, 1, 1, 1], 'SAME') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.erosion_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_861": {
                "t": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape, tf.float32, initializer=initial)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', shape, tf.float32, initializer=initial)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_869": {
                "t": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape, tf.float32, initializer=initial)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', shape, tf.float32, initializer=initial)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_912": {
                "name_or_scope": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_926": {
                "name_or_scope": {
                    "value": "bias_relu2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_988": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._weight_variable([Fin * K, Fout], regularization=False)",
                            "Call"
                        ],
                        [
                            "self._weight_variable([int(Min), Mout], regularization=True)",
                            "Call"
                        ],
                        [
                            "self._weight_variable([kernel, kernel, f_in, f_out])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_992": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x0, 0)",
                            "Call"
                        ],
                        [
                            "concat(x, x1)",
                            "Call"
                        ],
                        [
                            "concat(x, x2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [K, M, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[3, 1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N * M, Fin * K])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(inputs, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, L, Fout, K)",
                            "Call"
                        ],
                        [
                            "tf.add(x, shortcut)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [M, Fin * N])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(L, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [Mp, Fin, N])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(inputs, W, strides=[1, stride, stride, 1], padding=padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, decay=0.9, zero_debias_moving_mean=True, is_training=is_training, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1008": {
                "shape": {
                    "value": "[self.batch_size, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_1013": {
                "tensor": {
                    "value": "v_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(v_norms, [self.batch_size, self.num_vert, 8, 3]), axis=2)",
                            "Call"
                        ],
                        [
                            "v_norm / tf.expand_dims(tf.linalg.norm(v_norm, axis=2), 2)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1055": {
                "input": {
                    "value": "gamma[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1057": {
                "input": {
                    "value": "gamma[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1058": {
                "input": {
                    "value": "gamma[:, 2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_127": {
                "func": {
                    "value": "self.load_image_bin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[start_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_309": {
                "value": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_311": {
                "value": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_314": {
                "value": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_397": {
                "x": {
                    "value": "gcn_render[..., 3:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "absolute_difference_400": {
                "predictions": {
                    "value": "pca_render[..., :3] * gcn_render_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "input_image[..., :3] * gcn_render_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_402": {
                "input_tensor": {
                    "value": "gcn_render_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.round(gcn_render[..., 3:]) * skin_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "absolute_difference_405": {
                "predictions": {
                    "value": "gcn_render[..., :3] * gcn_render_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "input_image[..., :3] * gcn_render_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_407": {
                "input_tensor": {
                    "value": "gcn_render_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.round(gcn_render[..., 3:]) * skin_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_425": {
                "input_tensor": {
                    "value": "utils.cosine(input_feat, gcn_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_434": {
                "params": {
                    "value": "gcn_texture",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mesh_generator(image_emb, refine_input, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "utils.img_denormalize(results['gcn_texts'][idx])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.bfm.right_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_436": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(sym_diff) + 1e-16, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_503": {
                "input_tensor": {
                    "value": "real_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.image_disc(real_image, t, reuse=reuse)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_555": {
                "control_inputs": {
                    "value": "[op_d_grad] + update_bn_ops",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_1050": {
                "x": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_1052": {
                "x": {
                    "value": "norm[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_436": {
                "input_tensor": {
                    "value": "tf.square(sym_diff) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_1050": {
                "x": {
                    "value": "norm[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_norm_530": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "check_numerics_531": {
                "tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "message": {
                    "value": "error occur",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_436": {
                "x": {
                    "value": "sym_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(gcn_texture, self.bfm.left_index, axis=1) - tf.gather(gcn_texture, self.bfm.right_index, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/mesh_renderer.py": {
        "tensorflow": {
            "reshape_84": {
                "variable": {
                    "value": "normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(normals, [batch_size, -1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(alphas, [batch_size, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "diffuse_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diffuse_colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(diffuse_colors, [batch_size, -1, 3])",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 6:9]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, image_height * image_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "pixel_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(pixel_positions, [batch_size, -1, 3])",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 3:6]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "per_light_pixel_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pixel_positions] * light_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_101": {
                "variable": {
                    "value": "directions_to_lights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(light_positions, axis=2) - per_light_pixel_positions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_106": {
                "variable": {
                    "value": "normals_dot_lights",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.reduce_sum(tf.expand_dims(normals, axis=1) * directions_to_lights, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "diffuse_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diffuse_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(diffuse_colors, axis=1) * tf.expand_dims(normals_dot_lights, axis=3) * tf.expand_dims(light_intensities, axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(diffuse_output, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_113": {
                "variable": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, image_height * image_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, ambient_reshaped * diffuse_colors)",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, diffuse_output)",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, specular_output)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diffuse_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(diffuse_colors, axis=1) * tf.expand_dims(normals_dot_lights, axis=3) * tf.expand_dims(light_intensities, axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(diffuse_output, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "rgb_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, image_height * image_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, ambient_reshaped * diffuse_colors)",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, diffuse_output)",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, specular_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, image_height, image_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "alpha_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(alphas, [batch_size, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, image_height, image_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "valid_rgb_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3 * [alpha_images > 0.5]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_158": {
                "variable": {
                    "value": "rgb_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_rgb_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(3 * [alpha_images > 0.5], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "rgb_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(output_colors, [batch_size, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.where(valid_rgb_values, rgb_images, tf.zeros_like(rgb_images, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(rgb_images, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_187": {
                "variable": {
                    "value": "corrected_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_188": {
                "variable": {
                    "value": "image_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(corrected_image, [batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_190": {
                "variable": {
                    "value": "scaled_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "corrected_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pow(image, gamma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(image_max, [batch_size, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_364": {
                "variable": {
                    "value": "clip_space_transforms",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "perspective_transforms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "camera_utils.perspective(image_width / image_height, fov_y, near_clip, far_clip)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "camera_matrices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "camera_utils.look_at(camera_position, camera_lookat, camera_up)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_374": {
                "variable": {
                    "value": "pixel_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pixel_attributes[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_386": {
                "variable": {
                    "value": "pixel_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_any(diffuse_colors >= 0, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "specular_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "specular_colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(specular_colors, [batch_size, -1, 3])",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 9:12]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_93": {
                "variable": {
                    "value": "ambient_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ambient_color",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_94": {
                "variable": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, image_height * image_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, ambient_reshaped * diffuse_colors)",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, diffuse_output)",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, specular_output)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ambient_reshaped * diffuse_colors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "camera_position",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "camera_position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(camera_position, [batch_size, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(camera_position, axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_118": {
                "variable": {
                    "value": "mirror_reflection_direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * tf.expand_dims(normals_dot_lights, axis=3) * tf.expand_dims(normals, axis=1) - directions_to_lights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_122": {
                "variable": {
                    "value": "direction_to_camera",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "camera_position - pixel_positions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "variable": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(direction_to_camera, axis=1) * mirror_reflection_direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_130": {
                "variable": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.nn.l2_normalize(reflection_direction_dot_camera_direction, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_135": {
                "variable": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "normals_dot_lights != 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(direction_to_camera, axis=1) * mirror_reflection_direction, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.l2_normalize(reflection_direction_dot_camera_direction, axis=2), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(normals_dot_lights != 0.0, reflection_direction_dot_camera_direction, tf.zeros_like(reflection_direction_dot_camera_direction, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(reflection_direction_dot_camera_direction, [batch_size, light_count, image_height, image_width])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(reflection_direction_dot_camera_direction, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(direction_to_camera, axis=1) * mirror_reflection_direction, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.l2_normalize(reflection_direction_dot_camera_direction, axis=2), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(normals_dot_lights != 0.0, reflection_direction_dot_camera_direction, tf.zeros_like(reflection_direction_dot_camera_direction, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(reflection_direction_dot_camera_direction, [batch_size, light_count, image_height, image_width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, light_count, image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_144": {
                "variable": {
                    "value": "shininess_coefficients",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shininess_coefficients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(shininess_coefficients, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant(shininess_coefficients, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 12]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(shininess_coefficients, [-1, 1, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "specularity",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.pow(reflection_direction_dot_camera_direction, shininess_coefficients)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, light_count, pixel_count, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "variable": {
                    "value": "specular_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "specular_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(specular_colors, axis=1) * specularity * tf.expand_dims(light_intensities, axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(specular_output, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_153": {
                "variable": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, image_height * image_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, ambient_reshaped * diffuse_colors)",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, diffuse_output)",
                            "Call"
                        ],
                        [
                            "tf.add(output_colors, specular_output)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "specular_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(specular_colors, axis=1) * specularity * tf.expand_dims(light_intensities, axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(specular_output, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_160": {
                "tensor": {
                    "value": "tf.concat([rgb_images, alpha_images], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_192": {
                "t": {
                    "value": "scaled_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(corrected_image, tf.reshape(image_max, [batch_size, 1, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tile_292": {
                "variable": {
                    "value": "camera_position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(camera_position, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_297": {
                "variable": {
                    "value": "camera_lookat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(camera_lookat, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_302": {
                "variable": {
                    "value": "camera_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(camera_up, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_306": {
                "variable": {
                    "value": "fov_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_size * [fov_y]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_313": {
                "variable": {
                    "value": "near_clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_size * [near_clip]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_320": {
                "variable": {
                    "value": "far_clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_size * [far_clip]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_356": {
                "variable": {
                    "value": "vertex_attributes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[normals, vertices, diffuse_colors]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "tf.expand_dims(normals, axis=1) * directions_to_lights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_110": {
                "input": {
                    "value": "light_intensities",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_159": {
                "input": {
                    "value": "rgb_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(output_colors, [batch_size, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.where(valid_rgb_values, rgb_images, tf.zeros_like(rgb_images, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_160": {
                "values": {
                    "value": "[rgb_images, alpha_images]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "tensor": {
                    "value": "corrected_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pow(image, gamma)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "tensor": {
                    "value": "image_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.reshape(corrected_image, [batch_size, -1]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_308": {
                "variable": {
                    "value": "fov_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(fov_y, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_315": {
                "variable": {
                    "value": "near_clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(near_clip, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_322": {
                "variable": {
                    "value": "far_clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(far_clip, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_335": {
                "variable": {
                    "value": "shininess_coefficients",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "shininess_coefficients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(shininess_coefficients, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant(shininess_coefficients, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 12]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(shininess_coefficients, [-1, 1, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_347": {
                "variable": {
                    "value": "vertex_attributes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[normals, vertices, diffuse_colors, specular_colors]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_350": {
                "variable": {
                    "value": "vertex_attributes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[normals, vertices, diffuse_colors, specular_colors, tf.expand_dims(shininess_coefficients, axis=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_384": {
                "variable": {
                    "value": "shininess_coefficients",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "shininess_coefficients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(shininess_coefficients, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant(shininess_coefficients, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 12]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(shininess_coefficients, [-1, 1, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_any_386": {
                "input_tensor": {
                    "value": "diffuse_colors >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "input": {
                    "value": "light_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "input": {
                    "value": "normals_dot_lights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.reduce_sum(tf.expand_dims(normals, axis=1) * directions_to_lights, axis=3), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_131": {
                "x": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(direction_to_camera, axis=1) * mirror_reflection_direction, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.l2_normalize(reflection_direction_dot_camera_direction, axis=2), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(normals_dot_lights != 0.0, reflection_direction_dot_camera_direction, tf.zeros_like(reflection_direction_dot_camera_direction, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(reflection_direction_dot_camera_direction, [batch_size, light_count, image_height, image_width])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_137": {
                "input": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(direction_to_camera, axis=1) * mirror_reflection_direction, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.l2_normalize(reflection_direction_dot_camera_direction, axis=2), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(normals_dot_lights != 0.0, reflection_direction_dot_camera_direction, tf.zeros_like(reflection_direction_dot_camera_direction, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(reflection_direction_dot_camera_direction, [batch_size, light_count, image_height, image_width])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_146": {
                "x": {
                    "value": "reflection_direction_dot_camera_direction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(direction_to_camera, axis=1) * mirror_reflection_direction, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.l2_normalize(reflection_direction_dot_camera_direction, axis=2), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.where(normals_dot_lights != 0.0, reflection_direction_dot_camera_direction, tf.zeros_like(reflection_direction_dot_camera_direction, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(reflection_direction_dot_camera_direction, [batch_size, light_count, image_height, image_width])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shininess_coefficients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(shininess_coefficients, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant(shininess_coefficients, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 12]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(shininess_coefficients, [-1, 1, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_150": {
                "input": {
                    "value": "light_intensities",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_292": {
                "input": {
                    "value": "camera_position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(camera_position, [batch_size, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(camera_position, axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_297": {
                "input": {
                    "value": "camera_lookat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(camera_lookat, axis=0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_302": {
                "input": {
                    "value": "camera_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(camera_up, axis=0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(normals, [batch_size, -1, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "direction_to_camera",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(camera_position - pixel_positions, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "input": {
                    "value": "specular_colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(specular_colors, [batch_size, -1, 3])",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 9:12]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_308": {
                "input": {
                    "value": "fov_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(batch_size * [fov_y], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fov_y, 0), [batch_size])",
                            "Call"
                        ],
                        [
                            "40.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_315": {
                "input": {
                    "value": "near_clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(batch_size * [near_clip], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(near_clip, 0), [batch_size])",
                            "Call"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_322": {
                "input": {
                    "value": "far_clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(batch_size * [far_clip], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(far_clip, 0), [batch_size])",
                            "Call"
                        ],
                        [
                            "30.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_120": {
                "input": {
                    "value": "normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(normals, [batch_size, -1, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_352": {
                "input": {
                    "value": "shininess_coefficients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(shininess_coefficients, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.constant(shininess_coefficients, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "pixel_attributes[:, :, :, 12]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(shininess_coefficients, [-1, 1, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "input": {
                    "value": "normals_dot_lights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.reduce_sum(tf.expand_dims(normals, axis=1) * directions_to_lights, axis=3), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "ConfigProto_81": {
                "variable": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Graph_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_84": {
                "config": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_normal.py": {
        "tensorflow": {
            "tanh_26": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.chebyshev5(concat, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.pool_size[-1], F[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.pool_size[-1] * F[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.pool_size[-1], F[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_170": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_173": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "mesh_generator",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_24": {
                "variable": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[decode_color, refine_color]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "mesh_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "mesh_refiner",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "image_disc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_180": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[i + 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "pca_color",
                            "Name"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], F[0], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1] * F[-1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x, int(self.z_dim))",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.downsamp_trans[i])",
                            "Call"
                        ],
                        [
                            "self.fc(x, self.pool_size[-1] * F[-1])",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[i + 1], F[i], 6)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.batch_size, self.pool_size[-1], F[-1]])",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x, self.upsamp_trans[-i - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, layer_enc[-i - 2]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.chebyshev5(x, self.laplacians[-i - 2], F[-i - 1], 6)",
                            "Call"
                        ],
                        [
                            "self.brelu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "mesh_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_49": {
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "graph_conv0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_152": {
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "'upconv{}'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_119": {
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "'graph_conv{}'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "'graph_conv{}'.format(i + 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, layer_enc[-i - 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_42": {
                "name": {
                    "value": "unpooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "bias_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_124": {
                "name": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_126": {
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_128": {
                "name": {
                    "value": "bias_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "unpooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_147": {
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "name": {
                    "value": "bias_relu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model_resnet.py": {
        "tensorflow": {
            "tanh_26": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.chebyshev5(concat, self.laplacians[0], 3, 6)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(outputs)",
                            "Call"
                        ],
                        [
                            "self.cheb_res_block(layer5, self.laplacians[-5], 3, self.c_k)",
                            "Call"
                        ],
                        [
                            "self.cheb_res_block(layer4, self.laplacians[0], 3, self.c_k)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "layer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(image_emb, self.pool_size[-1] * F[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer1, [self.batch_size, self.pool_size[-1], F[0]])",
                            "Call"
                        ],
                        [
                            "self.cheb_res_block(pca_color, self.laplacians[0], F[0], self.c_k)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.pool_size[-1], F[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_105": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_111": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "mesh_generator",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_24": {
                "variable": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[decode_color, refine_color]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "mesh_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "mesh_refiner",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "image_disc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_115": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 1, 1, is_training=t, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 32, 3, 1, is_training=t, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 64, 3, 1, is_training=t, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 128, 3, 1, is_training=t, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 256, 3, 1, is_training=t, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 512, 3, 1, is_training=t, name='conv6_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, 1, 7, 1, 'VALID', False, False, t, 'outputs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "mesh_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "resblock1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "resblock2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "resblock3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "resblock4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "resblock1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "resblock2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "resblock3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "resblock4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "resblock5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "unpooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "unpooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_53": {
                "name": {
                    "value": "unpooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "unpooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "unpooling",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "shape_336": {
                "variable": {
                    "value": "ori_image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(im_f, cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, (img_size, img_size))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_BGRA2RGBA)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "cropper.crop_image(image)",
                            "Call"
                        ],
                        [
                            "image / [[[127.5, 127.5, 127.5, 255.0]]] - [[[1.0, 1.0, 1.0, 0.0]]]",
                            "BinOp"
                        ],
                        [
                            "cropper.crop_image(image)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)",
                            "Call"
                        ],
                        [
                            "image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "load_image(f, img_size, alpha, landmark, cropper, gray)",
                            "Call"
                        ],
                        [
                            "load_mv_image(d, img_size, alpha, landmark)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, ori_image_shape, seed=seed)",
                            "Call"
                        ],
                        [
                            "inputs.copy()",
                            "Call"
                        ],
                        [
                            "self.extend_img(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_337": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(im_f, cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, (img_size, img_size))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_BGRA2RGBA)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "cropper.crop_image(image)",
                            "Call"
                        ],
                        [
                            "image / [[[127.5, 127.5, 127.5, 255.0]]] - [[[1.0, 1.0, 1.0, 0.0]]]",
                            "BinOp"
                        ],
                        [
                            "cropper.crop_image(image)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)",
                            "Call"
                        ],
                        [
                            "image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "load_image(f, img_size, alpha, landmark, cropper, gray)",
                            "Call"
                        ],
                        [
                            "load_mv_image(d, img_size, alpha, landmark)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, ori_image_shape, seed=seed)",
                            "Call"
                        ],
                        [
                            "inputs.copy()",
                            "Call"
                        ],
                        [
                            "self.extend_img(image)",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 31 - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_339": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(im_f, cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, (img_size, img_size))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_BGRA2RGBA)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "cropper.crop_image(image)",
                            "Call"
                        ],
                        [
                            "image / [[[127.5, 127.5, 127.5, 255.0]]] - [[[1.0, 1.0, 1.0, 0.0]]]",
                            "BinOp"
                        ],
                        [
                            "cropper.crop_image(image)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)",
                            "Call"
                        ],
                        [
                            "image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "load_image(f, img_size, alpha, landmark, cropper, gray)",
                            "Call"
                        ],
                        [
                            "load_mv_image(d, img_size, alpha, landmark)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, ori_image_shape, seed=seed)",
                            "Call"
                        ],
                        [
                            "inputs.copy()",
                            "Call"
                        ],
                        [
                            "self.extend_img(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "ori_image_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 31 - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_362": {
                "variable": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(x * x, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_363": {
                "variable": {
                    "value": "y_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(y * y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_364": {
                "variable": {
                    "value": "inner_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_365": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inner_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x * y, 1)",
                            "Call"
                        ],
                        [
                            "np.sum(x * y, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_len * y_len + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "cosine_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_415": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_416": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "convert_to_tensor_419": {
                "variable": {
                    "value": "rotation_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[ones, zeros, zeros], [zeros, tf.cos(angle_x), -tf.sin(angle_x)], [zeros, tf.sin(angle_x), tf.cos(angle_x)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_424": {
                "variable": {
                    "value": "rotation_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[tf.cos(angle_y), zeros, tf.sin(angle_y)], [zeros, ones, zeros], [-tf.sin(angle_y), zeros, tf.cos(angle_y)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_429": {
                "variable": {
                    "value": "rotation_Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[tf.cos(angle_z), -tf.sin(angle_z), zeros], [tf.sin(angle_z), tf.cos(angle_z), zeros], [zeros, zeros, ones]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_436": {
                "variable": {
                    "value": "rotation_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rotation_X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[ones, zeros, zeros], [zeros, np.cos(angle_x), -np.sin(angle_x)], [zeros, np.sin(angle_x), np.cos(angle_x)]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(rotation_X, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[ones, zeros, zeros], [zeros, tf.cos(angle_x), -tf.sin(angle_x)], [zeros, tf.sin(angle_x), tf.cos(angle_x)]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(rotation_X, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_437": {
                "variable": {
                    "value": "rotation_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rotation_Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[np.cos(angle_y), zeros, np.sin(angle_y)], [zeros, ones, zeros], [-np.sin(angle_y), zeros, np.cos(angle_y)]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(rotation_Y, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[tf.cos(angle_y), zeros, tf.sin(angle_y)], [zeros, ones, zeros], [-tf.sin(angle_y), zeros, tf.cos(angle_y)]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(rotation_Y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_438": {
                "variable": {
                    "value": "rotation_Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rotation_Z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[np.cos(angle_z), -np.sin(angle_z), zeros], [np.sin(angle_z), np.cos(angle_z), zeros], [zeros, zeros, ones]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(rotation_Z, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[tf.cos(angle_z), -tf.sin(angle_z), zeros], [tf.sin(angle_z), tf.cos(angle_z), zeros], [zeros, zeros, ones]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(rotation_Z, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_439": {
                "a": {
                    "value": "rotation_Z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[np.cos(angle_z), -np.sin(angle_z), zeros], [np.sin(angle_z), np.cos(angle_z), zeros], [zeros, zeros, ones]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(rotation_Z, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[tf.cos(angle_z), -tf.sin(angle_z), zeros], [tf.sin(angle_z), tf.cos(angle_z), zeros], [zeros, zeros, ones]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(rotation_Z, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[np.cos(angle_y), zeros, np.sin(angle_y)], [zeros, ones, zeros], [-np.sin(angle_y), zeros, np.cos(angle_y)]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(rotation_Y, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[tf.cos(angle_y), zeros, tf.sin(angle_y)], [zeros, ones, zeros], [-tf.sin(angle_y), zeros, tf.cos(angle_y)]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(rotation_Y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_441": {
                "variable": {
                    "value": "rotation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rotation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.matmul(np.matmul(rotation_Z, rotation_Y), rotation_X)",
                            "Call"
                        ],
                        [
                            "np.transpose(rotation, axis=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.matmul(rotation_Z, rotation_Y), rotation_X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(rotation, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_746": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(indices, name='indices')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(indices, name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_747": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.transpose(params, tf.concat(perm, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "params",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_807": {
                "variable": {
                    "value": "indices_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(indices, name='indices')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(indices, name='indices')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_808": {
                "variable": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.transpose(params, tf.concat(perm, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_811": {
                "variable": {
                    "value": "accum_dim_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "indices_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_813": {
                "variable": {
                    "value": "casted_params_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(params)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "indices_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_824": {
                "variable": {
                    "value": "flat_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices",
                            "Name"
                        ],
                        [
                            "batch_indices + tf.reshape(dim_indices, dim_shape)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_prod_826": {
                "variable": {
                    "value": "flat_inner_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "params_shape[:batch_dims + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_829": {
                "variable": {
                    "value": "flat_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.transpose(params, tf.concat(perm, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([[flat_inner_shape], outer_shape], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_830": {
                "variable": {
                    "value": "flat_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(params, tf.concat([[flat_inner_shape], outer_shape], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_indices, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_831": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(flat_params, flat_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([indices_shape, outer_shape], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_711": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(indices, name='indices')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(indices, name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_712": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.transpose(params, tf.concat(perm, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "params",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_792": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.transpose(params, tf.concat(perm, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "tf.concat(perm, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_817": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "indices_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_818": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "indices_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_821": {
                "variable": {
                    "value": "dim_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[1] * (dim - 1) + [dim_value] + [1] * (indices_ndims - dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_362": {
                "input_tensor": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "input_tensor": {
                    "value": "y * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_710": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'bfm_face'",
                            "MethodArgument"
                        ],
                        [
                            "'x'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_772": {
                "variable": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "axis < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "axis + tf.rank(params)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(axis < 0, axis + tf.rank(params), axis)",
                            "Call"
                        ],
                        [
                            "axis + tf.rank(params)",
                            "BinOp"
                        ],
                        [
                            "axis + params.shape.ndims",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_805": {
                "a": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.div(inner_product, x_len * y_len + 1e-08, name='cosine_dist')",
                            "Call"
                        ],
                        [
                            "inner_product / (x_len * y_len + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "np.hstack((vc.row.reshape(-1, 1), vc.col.reshape(-1, 1)))",
                            "Call"
                        ],
                        [
                            "result[result[:, 0] < result[:, 1]]",
                            "Subscript"
                        ],
                        [
                            "_batch_gather(params, indices, batch_dims=batch_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flat_result, tf.concat([indices_shape, outer_shape], axis=0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "tf.concat(perm, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_822": {
                "tensor": {
                    "value": "dim_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(start, dim_value, step)",
                            "Call"
                        ],
                        [
                            "dim_indices * accum_dim_value",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "dim_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([1] * (dim - 1) + [dim_value] + [1] * (indices_ndims - dim), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_829": {
                "values": {
                    "value": "[[flat_inner_shape], outer_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_831": {
                "values": {
                    "value": "[indices_shape, outer_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_792": {
                "values": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[list(range(batch_dims)), [axis], tf.range(batch_dims, axis, 1), tf.range(axis + 1, tf.rank(params), 1)]",
                            "List"
                        ],
                        [
                            "[list(range(batch_dims)), tf.range(indices_ndims, params_start, 1), list(range(batch_dims, indices_ndims)), tf.range(params_start, tf.rank(result), 1)]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_803": {},
            "cos_421": {
                "x": {
                    "value": "angle_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_422": {
                "x": {
                    "value": "angle_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_422": {
                "x": {
                    "value": "angle_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_425": {
                "x": {
                    "value": "angle_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_425": {
                "x": {
                    "value": "angle_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_427": {
                "x": {
                    "value": "angle_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_430": {
                "x": {
                    "value": "angle_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_431": {
                "x": {
                    "value": "angle_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_431": {
                "x": {
                    "value": "angle_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_790": {
                "input": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.transpose(params, tf.concat(perm, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_803": {
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.div(inner_product, x_len * y_len + 1e-08, name='cosine_dist')",
                            "Call"
                        ],
                        [
                            "inner_product / (x_len * y_len + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "np.hstack((vc.row.reshape(-1, 1), vc.col.reshape(-1, 1)))",
                            "Call"
                        ],
                        [
                            "result[result[:, 0] < result[:, 1]]",
                            "Subscript"
                        ],
                        [
                            "_batch_gather(params, indices, batch_dims=batch_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flat_result, tf.concat([indices_shape, outer_shape], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_805": {
                "values": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[list(range(batch_dims)), [axis], tf.range(batch_dims, axis, 1), tf.range(axis + 1, tf.rank(params), 1)]",
                            "List"
                        ],
                        [
                            "[list(range(batch_dims)), tf.range(indices_ndims, params_start, 1), list(range(batch_dims, indices_ndims)), tf.range(params_start, tf.rank(result), 1)]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_421": {
                "x": {
                    "value": "angle_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_427": {
                "x": {
                    "value": "angle_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_430": {
                "x": {
                    "value": "angle_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ],
                        [
                            "angles[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_772": {
                "input": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.transpose(params, tf.concat(perm, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_775": {
                "input": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(params, name='params')",
                            "Call"
                        ],
                        [
                            "tf.transpose(params, tf.concat(perm, axis=0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "face_segment.py": {
        "torch": {
            "is_available_11": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_13": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ResNet(Bottleneck, [3, 4, 6, 3], **kwargs)",
                            "Call"
                        ],
                        [
                            "resnet50(num_classes=19)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.img_denormalize(inputs).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image.transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image).float()",
                            "Call"
                        ],
                        [
                            "image.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_35": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(image)",
                            "Call"
                        ],
                        [
                            "torch.argmax(result, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_140": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_146": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_18": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data/torch_FaceSegment_300.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_20": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data/torch_FaceSegment_300.pkl",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/evoLVe_model.py": {
        "torch": {
            "norm_19": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_20": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(inputs, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_29": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_45": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, (3, 3), 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_70": {
                "num_parameters": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_92": {
                "num_parameters": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_153": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_156": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "512 * 14 * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_160": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/light_cnn.py": {
        "torch": {
            "split_34": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "mfm(1, 48, 5, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8 * 8 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_194": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_80": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_82": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_84": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_176": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_176": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_180": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_180": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_184": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_184": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_190": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_190": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}