{
    "reid/evaluation_metrics/ranking.py": {
        "sklearn": {
            "average_precision_score_112": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matches[i, valid]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-distmat[i][indices[i]][valid]",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.train, root=train_path, transform=train_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "GraphSampler(dataset.train, train_path, test_transformer, model, matcher, args.batch_size, args.num_instance, args.test_gal_batch, args.test_prob_batch, save_path, args.gs_verbose)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "query_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.query, root=osp.join(dataset.images_dir, dataset.query_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_fea_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.gallery, root=osp.join(dataset.images_dir, dataset.gallery_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_fea_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "query_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.query, root=osp.join(dataset.images_dir, dataset.query_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.gallery, root=osp.join(dataset.images_dir, dataset.gallery_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.base.parameters(), 'lr': 0.1 * args.lr}, {'params': new_params, 'lr': args.lr}, {'params': matcher.parameters(), 'lr': args.lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_172": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resmap.create(args.arch, ibn_type=ibn_type, final_layer=args.final_layer, neck=args.neck).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "matching/qaconv_match.py": {
        "torch": {
            "normalize_41": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gal_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_47": {
                "variable": {
                    "value": "prob_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(prob_fea)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prob_score, gal_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "matching/test_matching.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "query_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.query, root=osp.join(dataset.images_dir, dataset.query_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.gallery, root=osp.join(dataset.images_dir, dataset.gallery_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resmap.create(args.arch, final_layer=args.final_layer, neck=args.neck).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature[f].unsqueeze(0) for (f, _, _, _) in dataset.query]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "prob_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hei",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.height // feamap_factor[args.final_layer]",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "wid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.width // feamap_factor[args.final_layer]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "index_in_gal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hei",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.height // feamap_factor[args.final_layer]",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "wid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.width // feamap_factor[args.final_layer]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "gal_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hei",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.height // feamap_factor[args.final_layer]",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "wid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.width // feamap_factor[args.final_layer]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "index_in_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_prob - start_prob",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hei",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.height // feamap_factor[args.final_layer]",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "wid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.width // feamap_factor[args.final_layer]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_97": {
                "variable": {
                    "value": "qaconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "QAConvMatch(feature, criterion).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/transmatcher/main.py": {
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.train, root=train_path, transform=train_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "GraphSampler(dataset.train, train_path, test_transformer, model, matcher, args.batch_size, args.num_instance, args.test_gal_batch, args.test_prob_batch, save_path, args.gs_verbose)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "query_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.query, root=osp.join(dataset.images_dir, dataset.query_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_fea_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.gallery, root=osp.join(dataset.images_dir, dataset.gallery_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_fea_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "query_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.query, root=osp.join(dataset.images_dir, dataset.query_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.gallery, root=osp.join(dataset.images_dir, dataset.gallery_path), transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.base.parameters(), 'lr': 0.1 * args.lr}, {'params': new_params, 'lr': args.lr}, {'params': matcher.parameters(), 'lr': args.lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_164": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "restranmap.create(args.arch, ibn_type=ibn_type, final_layer=args.final_layer, neck=args.neck, nhead=args.nhead, num_encoder_layers=args.num_trans_layers - 1, dim_feedforward=args.dim_feedforward).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_173": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(param_groups, lr=args.lr, momentum=0.9, weight_decay=0.0005, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "projects/transmatcher/restranmap.py": {
        "torch": {
            "rand_208": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[64, 3, 384, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_204": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_106": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "XingangPan/IBN-Net",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'resnet%d_ibn_%s' % (depth, ibn_type)",
                            "BinOp"
                        ]
                    ]
                },
                "pretrained": {
                    "value": "pretrained",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.neck_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fea_dims_small[final_layer]",
                            "Subscript"
                        ],
                        [
                            "fea_dims[final_layer]",
                            "Subscript"
                        ],
                        [
                            "neck",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_119": {
                "variable": {
                    "value": "encoder_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fea_dims_small[final_layer]",
                            "Subscript"
                        ],
                        [
                            "fea_dims[final_layer]",
                            "Subscript"
                        ],
                        [
                            "neck",
                            "Name"
                        ]
                    ]
                },
                "nhead": {
                    "value": "nhead",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim_feedforward": {
                    "value": "dim_feedforward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "projects/transmatcher/transmatcher.py": {
        "torch": {
            "rand_169": {
                "variable": {
                    "value": "gallery",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 24, 8, 512 * 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_170": {
                "variable": {
                    "value": "probe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(16, 24, 8, 512 * 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "score_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.score_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "score_embed.view(1, 1, seq_len, seq_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_46": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_feedforward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_49": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(score.max(dim=1)[0], score.max(dim=2)[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(decoder_layer) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_148": {
                "variable": {
                    "value": "decoder_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_72": {
                "equation": {
                    "value": "q t d, k s d -> q k s t",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(tgt)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "reid/evaluators.py": {
        "torch": {
            "zeros_64": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prob_fea.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_gals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gal_fea.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "prob_fea.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "prob_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prob_fea[f].unsqueeze(0) for (f, _, _, _) in query]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(query)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_gal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(gallery)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "dist_rerank",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_gal + num_prob",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_gal + num_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_215": {
                "variable": {
                    "value": "gal_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gal_fea[f].unsqueeze(0) for (f, _, _, _) in gallery]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/loss/class_memory_loss.py": {
        "torch": {
            "zeros_like_69": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, self.num_classes, device=feature.device)",
                            "Call"
                        ],
                        [
                            "self.matcher(self.class_memory.detach().clone())",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_69": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "target1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_70": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, self.num_classes, device=feature.device)",
                            "Call"
                        ],
                        [
                            "self.matcher(self.class_memory.detach().clone())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "onehot_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(score).scatter(1, target1, 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_72": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.where(onehot_labels.byte(), 1.0 - prob, prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_77": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, self.num_classes, device=feature.device)",
                            "Call"
                        ],
                        [
                            "self.matcher(self.class_memory.detach().clone())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_72": {
                "condition": {
                    "value": "onehot_labels.byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 - prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "score.sigmoid()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/loss/pairwise_matching_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_44": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.matcher(feature)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "pair_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_48": {
                "input": {
                    "value": "score * pair_labels + (1 - pair_labels + torch.eye(score.size(0), device=score.device)) * 1000000000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "score * (1 - pair_labels) - pair_labels * 1000000000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_49": {
                "n": {
                    "value": "score.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reid/loss/triplet_loss.py": {
        "torch": {
            "MarginRankingLoss_26": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_48": {
                "input": {
                    "value": "score * pair_labels + (1 - pair_labels + torch.eye(score.size(0), device=score.device)) * 1000000000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "score * (1 - pair_labels) - pair_labels * 1000000000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_53": {
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_49": {
                "n": {
                    "value": "score.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/qaconv.py": {
        "torch": {
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.height * self.width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.logit_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_58": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "g c h w, p c y x -> g p y x h w",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(score.max(dim=2)[0], score.max(dim=3)[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/resmap.py": {
        "torch": {
            "normalize_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "self.neck_conv(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_53": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "XingangPan/IBN-Net",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'resnet%d_ibn_%s' % (depth, ibn_type)",
                            "BinOp"
                        ]
                    ]
                },
                "pretrained": {
                    "value": "pretrained",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.neck_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fea_dims_small[final_layer]",
                            "Subscript"
                        ],
                        [
                            "fea_dims[final_layer]",
                            "Subscript"
                        ],
                        [
                            "neck",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/tlift.py": {
        "torch": {
            "tensor_39": {
                "variable": {
                    "value": "out_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.zeros_like(in_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "frame_id - np.transpose(frame_id)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_score.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(-1 * torch.pow(dt, 2).to(dtype=out_score.dtype) / math.pow(sigma, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_79": {
                "input": {
                    "value": "-1 * torch.pow(dt, 2).to(dtype=out_score.dtype) / math.pow(sigma, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_79": {
                "input": {
                    "value": "dt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gal_time_diff[g_cam][:, mask_in_gal]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/trainers.py": {
        "torch": {
            "GradScaler_19": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__54": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__55": {
                "parameters": {
                    "value": "self.criterion.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/__init__.py": {
        "torch": {
            "is_tensor_7": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_18": {
                "obj": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/data/graph_sampler.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset, self.img_path, transform=self.transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[fname].unsqueeze(0) for (fname, _, _, _) in dataset]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_92": {
                "variable": {
                    "value": "(_, topk_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "topk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_size // self.num_instance - 1",
                            "BinOp"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_90": {
                "n": {
                    "value": "self.num_pids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dist.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/data/sampler.py": {
        "torch": {
            "randperm_25": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/serialization.py": {
        "torch": {
            "save_14": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_19": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}