{
    "Stage1_VAE/dataset.py": {
        "torch": {}
    },
    "Stage1_VAE/main.py": {
        "torch": {
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['initial_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config['L2_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LambdaLR_181": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(parameters, lr=config['initial_learning_rate'], weight_decay=config['L2_norm'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(parameters, lr=optimizer_resume.param_groups[0]['lr'], weight_decay=optimizer_resume.param_groups[0]['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "poly_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "optimizer_resume.param_groups[0]['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optimizer_resume.param_groups[0]['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_174": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AttentionVNet(config=config)",
                            "Call"
                        ],
                        [
                            "NvNet(config=config)",
                            "Call"
                        ],
                        [
                            "load_old_model(model, optimizer, saved_model_path=config['saved_model_file'])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_223": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': i, 'state_dict': state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_states_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'epoch_{0}_val_loss_{1:.4f}_WTdice_{2:.4f}_AVGDice:{3:.4f}.pth'.format(i, val_loss, WT_dice, AVG_dice))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_227": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AttentionVNet(config=config)",
                            "Call"
                        ],
                        [
                            "NvNet(config=config)",
                            "Call"
                        ],
                        [
                            "load_old_model(model, optimizer, saved_model_path=config['saved_model_file'])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Stage1_VAE/metrics.py": {
        "torch": {
            "sum_27": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_56": {
                "variable": {
                    "value": "focal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focal_ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(alpha * torch.pow(1 - y_pred, gamma) * torch.log(torch.clamp(y_pred, eps, 1.0)) * y_true + (1 - alpha) * torch.pow(y_pred, gamma) * torch.log(torch.clamp(1 - y_pred, eps, 1.0)) * (1 - y_true))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "MSELoss_83": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_22": {
                "variable": {
                    "value": "y_pred[:, 0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "y_pred[:, 1, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred[:, 1:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_24": {
                "variable": {
                    "value": "y_true[:, 0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_25": {
                "variable": {
                    "value": "y_true[:, 1, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true[:, 1:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_27": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_32": {
                "input": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * intersection / union",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_28": {
                "input": {
                    "value": "torch.mul(y_pred, y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "torch.mul(y_true, y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_70": {
                "input": {
                    "value": "torch.mul(std, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_28": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_29": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_70": {
                "input": {
                    "value": "torch.mul(std, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_54": {
                "input": {
                    "value": "torch.clamp(y_pred, eps, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "torch.clamp(1 - y_pred, eps, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_70": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_54": {
                "input": {
                    "value": "1 - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma",
                            "Attribute"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_54": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_55": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma",
                            "Attribute"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_55": {
                "input": {
                    "value": "1 - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Stage1_VAE/nvnet.py": {
        "torch": {
            "Conv3d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_78": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "self.actv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(out, scale_factor=self.scale_factor, mode=self.mode, align_corners=self.align_corners)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "self.actv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "self.actv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.num_flat_features(out))",
                            "Call"
                        ],
                        [
                            "VDraw(out_vd)",
                            "Call"
                        ],
                        [
                            "self.dense2(out)",
                            "Call"
                        ],
                        [
                            "self.actv2(out)",
                            "Call"
                        ],
                        [
                            "out.view((-1, 128, self.dense_features[0], self.dense_features[1], self.dense_features[2]))",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.up0(x)",
                            "Call"
                        ],
                        [
                            "self.block(out)",
                            "Call"
                        ],
                        [
                            "self.vd_resample(x)",
                            "Call"
                        ],
                        [
                            "self.vd_block2(out)",
                            "Call"
                        ],
                        [
                            "self.vd_block1(out)",
                            "Call"
                        ],
                        [
                            "self.vd_block0(out)",
                            "Call"
                        ],
                        [
                            "self.vd_end(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_113": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_114": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_139": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_166": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * dense_features[0] * dense_features[1] * dense_features[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * dense_features[0] * dense_features[1] * dense_features[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_197": {
                "loc": {
                    "value": "x[:, :128]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "x[:, 128:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_227": {
                "variable": {
                    "value": "self.vd_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout3d_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_40": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_41": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.actv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.actv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_102": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_103": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.actv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.actv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_156": {
                "variable": {
                    "value": "self.gn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_158": {
                "variable": {
                    "value": "self.actv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "variable": {
                    "value": "self.actv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_end, out_vae)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Stage1_VAE/predict_tta.py": {
        "torch": {
            "load_97": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['saved_model_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "valildation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BratsDataset(phase='test', config=config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_95": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_model_from_states(config)",
                            "Call"
                        ],
                        [
                            "NvNet(config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Stage1_VAE/train.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "acc[dice_wt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "acc[dice_tc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "acc[dice_et]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Stage1_VAE/utils.py": {
        "torch": {
            "load_115": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saved_model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "torch.mul(y_pred, y_truth)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_106": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[:, :3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "y_pred > threshold",
                            "Compare"
                        ],
                        [
                            "y_pred.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "outputs[:, 0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "y_pred > threshold",
                            "Compare"
                        ],
                        [
                            "y_pred.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[:, :3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "targets[:, 0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "y_truth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_107": {
                "input": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[:, :3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "targets[:, 0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "y_truth",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "Stage1_VAE/validation.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "valildation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt['validation_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Stage2_AttVAE/attVnet_add.py": {
        "torch": {
            "Conv3d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_53": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.W_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(F_g, F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(F_l, F_int, kernel_size=scale_factor, stride=scale_factor, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(F_int, 1, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_110": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.psi(relu)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_127": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_132": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "self.actv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(out, scale_factor=self.scale_factor, mode=self.mode, align_corners=self.align_corners)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.norm2(out)",
                            "Call"
                        ],
                        [
                            "self.actv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.gn1(x)",
                            "Call"
                        ],
                        [
                            "self.actv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.num_flat_features(out))",
                            "Call"
                        ],
                        [
                            "VDraw(out_vd)",
                            "Call"
                        ],
                        [
                            "self.dense2(out)",
                            "Call"
                        ],
                        [
                            "self.actv2(out)",
                            "Call"
                        ],
                        [
                            "out.view((-1, 128, self.dense_features[0], self.dense_features[1], self.dense_features[2]))",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.up0(x)",
                            "Call"
                        ],
                        [
                            "self.block(out)",
                            "Call"
                        ],
                        [
                            "self.vd_resample(x)",
                            "Call"
                        ],
                        [
                            "self.vd_block2(out)",
                            "Call"
                        ],
                        [
                            "self.vd_block1(out)",
                            "Call"
                        ],
                        [
                            "self.vd_block0(out)",
                            "Call"
                        ],
                        [
                            "self.vd_end(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_159": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_160": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_185": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_209": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * dense_features[0] * dense_features[1] * dense_features[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * dense_features[0] * dense_features[1] * dense_features[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_240": {
                "loc": {
                    "value": "x[:, :128]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "x[:, 128:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_270": {
                "variable": {
                    "value": "self.vd_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout3d_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_41": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_42": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.actv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.actv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_148": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_149": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "outChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "outChans",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.actv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.actv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_202": {
                "variable": {
                    "value": "self.gn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "inChans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "inChans",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_204": {
                "variable": {
                    "value": "self.actv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "variable": {
                    "value": "self.actv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_end, out_vae)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_81": {
                "in_channels": {
                    "value": "F_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_g",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_82": {
                "num_features": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_86": {
                "in_channels": {
                    "value": "F_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_l",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_87": {
                "num_features": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_91": {
                "in_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_92": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Stage2_AttVAE/dataset.py": {
        "torch": {}
    },
    "Stage2_AttVAE/dataset_multi.py": {
        "torch": {}
    },
    "Stage2_AttVAE/evaluation.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "evaluation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Stage2_AttVAE/main.py": {
        "torch": {
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['initial_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config['L2_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LambdaLR_163": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(parameters, lr=config['initial_learning_rate'], weight_decay=config['L2_norm'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(parameters, lr=optimizer_resume.param_groups[0]['lr'], weight_decay=optimizer_resume.param_groups[0]['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "poly_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "optimizer_resume.param_groups[0]['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optimizer_resume.param_groups[0]['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_157": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AttentionVNet(config=config)",
                            "Call"
                        ],
                        [
                            "load_old_model(model, optimizer, saved_model_path=config['saved_model_file'])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_215": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': i, 'state_dict': state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_states_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'epoch_{0}_val_loss_{1:.4f}_TC_{2:.4f}_ET_{3:.4f}_AVG_{4:.4f}.pth'.format(i, val_loss, TC_dice, ET_dice, AVG_dice))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_219": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AttentionVNet(config=config)",
                            "Call"
                        ],
                        [
                            "load_old_model(model, optimizer, saved_model_path=config['saved_model_file'])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Stage2_AttVAE/main_multi.py": {
        "torch": {
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['initial_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config['L2_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LambdaLR_171": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(parameters, lr=config['initial_learning_rate'], weight_decay=config['L2_norm'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(parameters, lr=optimizer_resume.param_groups[0]['lr'], weight_decay=optimizer_resume.param_groups[0]['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "poly_lr_scheduler_multi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "optimizer_resume.param_groups[0]['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optimizer_resume.param_groups[0]['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AttentionVNet(config=config)",
                            "Call"
                        ],
                        [
                            "load_old_model(model, optimizer, saved_model_path=config['saved_model_file'])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_224": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': i, 'state_dict': state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_states_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'epoch_{0}_val_loss_{1:.4f}_TC_{2:.4f}_ET_{3:.4f}_AVG_{4:.4f}.pth'.format(i, val_loss, TC_dice, ET_dice, AVG_dice))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_228": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AttentionVNet(config=config)",
                            "Call"
                        ],
                        [
                            "load_old_model(model, optimizer, saved_model_path=config['saved_model_file'])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Stage2_AttVAE/metrics.py": {
        "torch": {
            "mean_27": {
                "variable": {
                    "value": "focal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focal_ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(alpha * torch.pow(1 - y_pred, gamma) * torch.log(torch.clamp(y_pred, eps, 1.0)) * y_true + (1 - alpha) * torch.pow(y_pred, gamma) * torch.log(torch.clamp(1 - y_pred, eps, 1.0)) * (1 - y_true))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_48": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * intersection / union",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_82": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_43": {
                "variable": {
                    "value": "y_pred[:, 0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "y_pred[:, 1, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred[:, 1:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "y_true[:, 0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "y_true[:, 1, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true[:, 1:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_48": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_49": {
                "input": {
                    "value": "torch.mul(y_pred, y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "torch.mul(y_true, y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "torch.mul(std, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_49": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_50": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_69": {
                "input": {
                    "value": "torch.mul(std, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_25": {
                "input": {
                    "value": "torch.clamp(y_pred, eps, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_26": {
                "input": {
                    "value": "torch.clamp(1 - y_pred, eps, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_69": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_25": {
                "input": {
                    "value": "1 - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma",
                            "Attribute"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_25": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_26": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma",
                            "Attribute"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_26": {
                "input": {
                    "value": "1 - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Stage2_AttVAE/predict_tta.py": {
        "torch": {
            "load_103": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['saved_model_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "valildation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PatchDataset(phase='test', config=config, preprocessor=preprocessor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_model_from_states(config)",
                            "Call"
                        ],
                        [
                            "AttentionVNet(config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Stage2_AttVAE/train.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "acc[dice_wt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "acc[dice_tc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "acc[dice_et]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Stage2_AttVAE/utils.py": {
        "torch": {
            "load_122": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saved_model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "torch.mul(y_pred, y_truth)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_105": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[:, :3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "y_pred > threshold",
                            "Compare"
                        ],
                        [
                            "y_pred.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "outputs[:, 0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "y_pred > threshold",
                            "Compare"
                        ],
                        [
                            "y_pred.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().numpy()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[:, :3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "targets[:, 0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "y_truth.detach().numpy()",
                            "Call"
                        ],
                        [
                            "y_truth",
                            "Method Argument"
                        ],
                        [
                            "y_truth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_106": {
                "input": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[:, :3, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "targets[:, 0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "y_truth.detach().numpy()",
                            "Call"
                        ],
                        [
                            "y_truth",
                            "Method Argument"
                        ],
                        [
                            "y_truth",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "Stage2_AttVAE/validation.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "valildation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt['validation_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}