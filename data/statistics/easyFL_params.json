{
    "algorithm/centralize.py": {
        "torch": {
            "save_83": {
                "obj": {
                    "value": "{'model': self.server.model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('fedtask', self.meta['task'], 'record', model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "algorithm/cnfgnn.py": {
        "torch": {
            "cat_108": {
                "variable": {
                    "value": "updated_graph_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "updated_graph_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_53": {
                "*tensors": {
                    "value": "*tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "len(self.test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.model_gru_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.model_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t for t in tensordataset.tensors]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[t for t in self.tensors]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "align_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "len(client.train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "client.train_data[0][0].shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.model_gru_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.model_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "len(client.valid_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "client.valid_data[0][0].shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.model_gru_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.model_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "algorithm/fedbase.py": {
        "torch": {}
    },
    "algorithm/feddyn.py": {
        "torch": {
            "dot_38": {
                "input": {
                    "value": "pgl.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pm.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "torch.pow(pm - ps, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_39": {
                "input": {
                    "value": "pm - ps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "algorithm/fedprox.py": {
        "torch": {
            "sum_30": {
                "input": {
                    "value": "torch.pow(pm - ps, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_30": {
                "input": {
                    "value": "pm - ps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "algorithm/moon.py": {
        "torch": {
            "CosineSimilarity_57": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits, neg_sim.reshape(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_49": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "*size": {
                    "value": "z.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/cifar100_classification/core.py": {
        "torch": {}
    },
    "benchmark/cifar100_classification/model/cnn.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_10": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_16": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_17": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/cifar100_classification/model/resnet18.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.residual_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.residual_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_93": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * BasicBlock.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * BottleNeck.expansion, stride=stride, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/cifar10_classification/model/cnn.py": {
        "torch": {
            "Sequential_7": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_10": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_13": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_14": {
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "1600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/cifar10_classification/model/mlp.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.layer_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 * 32 * 32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_8": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/cifar10_classification/model/resnet18-gn.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "resnet18.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_15": {
                "variable": {
                    "value": "resnet18.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_17": {
                "variable": {
                    "value": "resnet18.layer1[0].bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_18": {
                "variable": {
                    "value": "resnet18.layer1[0].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_19": {
                "variable": {
                    "value": "resnet18.layer1[1].bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_20": {
                "variable": {
                    "value": "resnet18.layer1[1].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_22": {
                "variable": {
                    "value": "resnet18.layer2[0].bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_23": {
                "variable": {
                    "value": "resnet18.layer2[0].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_24": {
                "variable": {
                    "value": "resnet18.layer2[0].downsample[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_25": {
                "variable": {
                    "value": "resnet18.layer2[1].bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_26": {
                "variable": {
                    "value": "resnet18.layer2[1].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_28": {
                "variable": {
                    "value": "resnet18.layer3[0].bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_29": {
                "variable": {
                    "value": "resnet18.layer3[0].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_30": {
                "variable": {
                    "value": "resnet18.layer3[0].downsample[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_31": {
                "variable": {
                    "value": "resnet18.layer3[1].bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_32": {
                "variable": {
                    "value": "resnet18.layer3[1].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_34": {
                "variable": {
                    "value": "resnet18.layer4[0].bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_35": {
                "variable": {
                    "value": "resnet18.layer4[0].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_36": {
                "variable": {
                    "value": "resnet18.layer4[0].downsample[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_37": {
                "variable": {
                    "value": "resnet18.layer4[1].bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_38": {
                "variable": {
                    "value": "resnet18.layer4[1].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/cifar10_classification/model/resnet18.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.residual_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.residual_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_93": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * BasicBlock.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * BottleNeck.expansion, stride=stride, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/distributedQP/core.py": {
        "torch": {
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_76": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tdata)",
                            "Call"
                        ],
                        [
                            "model(tdata)",
                            "Call"
                        ],
                        [
                            "model(tdata)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_83": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tdata)",
                            "Call"
                        ],
                        [
                            "model(tdata)",
                            "Call"
                        ],
                        [
                            "model(tdata)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_90": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tdata)",
                            "Call"
                        ],
                        [
                            "model(tdata)",
                            "Call"
                        ],
                        [
                            "model(tdata)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/distributedQP/model/vec.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim_in).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_12": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(output, output.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_8": {
                "*size": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_8": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_12": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e - self.x.repeat((len(e), 1))",
                            "BinOp"
                        ],
                        [
                            "torch.diag(torch.mm(output, output.T))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/emnist_classification/model/cnn.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3136",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "62",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/emnist_classification/model/mlp.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "62",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_embedding(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.shape[1] * x.shape[-2] * x.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/fashion_classification/model/lr.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "784",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/metr-la_traffic_forecasting/core.py": {
        "torch": {
            "Tensor_179": {
                "variable": {
                    "value": "adj_mx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MSELoss_269": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_301": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_211": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_scaler.transform(raw_data[name]['y'][..., FEATURE_START:FEATURE_END])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "ndarray": {
                    "value": "x_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attr_scaler.transform(raw_data[name]['x'][..., ATTR_START:ATTR_END])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_213": {
                "ndarray": {
                    "value": "y_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attr_scaler.transform(raw_data[name]['y'][..., ATTR_START:ATTR_END])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/metr-la_traffic_forecasting/model/GRU+GN.py": {
        "torch": {
            "GRU_18": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_21": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_40": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_40": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_40": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "h_encode",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_encode, graph_encodings.permute(2, 1, 0, 3).flatten(1, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_68": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_68": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_74": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_74": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "h_encode",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_encode, graph_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.node_out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_node_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_input_size",
                            "variable"
                        ],
                        [
                            "last_node_input_size + updated_node_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "node_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "node_output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src, dest, edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, received_msg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[agg_node, agg_edge, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "last_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "last_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[updated_x, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[updated_edge_attr, edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[updated_u, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, u[batch]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, u[batch]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "last_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_input[t:t + 1], y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "last_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_input[t:t + 1], y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "last_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_154": {
                "in_features": {
                    "value": "last_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_156": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_57": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_90": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/metr-la_traffic_forecasting/model/GRU.py": {
        "torch": {
            "GRU_12": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_13": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_30": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_30": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_30": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "last_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "last_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_input[t:t + 1], y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_43": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/mnist_classification/model/cnn.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3136",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/mnist_classification/model/mlp+bn.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_12": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, x.shape[1] * x.shape[-2] * x.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, x.shape[1] * x.shape[-2] * x.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/mnist_classification/model/mlp.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_embedding(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.shape[1] * x.shape[-2] * x.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_embedding(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.shape[1] * x.shape[-2] * x.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/shakespeare_classification/model/stackedlstm.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_22": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/synthetic_regression/model/lr.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_9": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/toolkits.py": {
        "torch": {
            "CrossEntropyLoss_540": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_584": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_870": {
                "variable": {
                    "value": "self.X1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_871": {
                "variable": {
                    "value": "self.X2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_872": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_645": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_646": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_802": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "utils/fflow.py": {
        "torch": {
            "manual_seed_75": {
                "seed": {
                    "value": "12 + seed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "123 + seed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_118": {
                "type": {
                    "value": "'cuda:{}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "option['pretrain']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/fmodule.py": {
        "torch": {
            "tensor_224": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_373": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_381": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_391": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[mi.data.view(-1) for mi in m.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_285": {
                "variable": {
                    "value": "md_sum[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mds[0][layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_298": {
                "variable": {
                    "value": "md_avg[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mds[0][layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_370": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.__class__().to(m.get_device())",
                            "Call"
                        ],
                        [
                            "model_class().to(mt.device)",
                            "Call"
                        ],
                        [
                            "ms[0].__class__().to(ms[0].get_device())",
                            "Call"
                        ],
                        [
                            "ms[0].__class__().to(ms[0].get_device())",
                            "Call"
                        ],
                        [
                            "m1.__class__().to(m1.get_device())",
                            "Call"
                        ],
                        [
                            "m1.__class__().to(m1.get_device())",
                            "Call"
                        ],
                        [
                            "m.__class__().to(m.get_device())",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(m.get_device())",
                            "Call"
                        ],
                        [
                            "res + s",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(0.0).to(m1.get_device())",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(m1.get_device())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.tensor(0.0).to(md[list(md)[0]].device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor().type_as(md[list(md)[0]]).to(md[list(md)[0]].device)",
                            "Call"
                        ],
                        [
                            "torch.cat((res, md[layer].view(-1)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(md1[list(md1)[0]].device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(md1[list(md1)[0]].device)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "func(self, model, *tuple(new_args), **new_kargs)",
                            "Call"
                        ],
                        [
                            "res.to(origin_device) if hasattr(res, 'get_device') or hasattr(res, 'device') else res",
                            "IfExp"
                        ],
                        [
                            "tuple(new_res)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1.0 / p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res, md[layer].view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_232": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.__class__().to(m.get_device())",
                            "Call"
                        ],
                        [
                            "model_class().to(mt.device)",
                            "Call"
                        ],
                        [
                            "ms[0].__class__().to(ms[0].get_device())",
                            "Call"
                        ],
                        [
                            "ms[0].__class__().to(ms[0].get_device())",
                            "Call"
                        ],
                        [
                            "m1.__class__().to(m1.get_device())",
                            "Call"
                        ],
                        [
                            "m1.__class__().to(m1.get_device())",
                            "Call"
                        ],
                        [
                            "m.__class__().to(m.get_device())",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(m.get_device())",
                            "Call"
                        ],
                        [
                            "res + s",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(0.0).to(m1.get_device())",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(m1.get_device())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.tensor(0.0).to(md[list(md)[0]].device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor().type_as(md[list(md)[0]]).to(md[list(md)[0]].device)",
                            "Call"
                        ],
                        [
                            "torch.cat((res, md[layer].view(-1)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(md1[list(md1)[0]].device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(md1[list(md1)[0]].device)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "func(self, model, *tuple(new_args), **new_kargs)",
                            "Call"
                        ],
                        [
                            "res.to(origin_device) if hasattr(res, 'get_device') or hasattr(res, 'device') else res",
                            "IfExp"
                        ],
                        [
                            "tuple(new_res)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1.0 / power",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_369": {
                "input": {
                    "value": "torch.pow(md[layer], p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_396": {
                "input": {
                    "value": "torch.pow(md1[layer], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_397": {
                "input": {
                    "value": "torch.pow(md2[layer], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_460": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_369": {
                "input": {
                    "value": "md[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p in enumerate(res.parameters())",
                            "Call"
                        ],
                        [
                            "[1.0 / len(ms) for _ in range(len(ms))]",
                            "ListComp"
                        ],
                        [
                            "self.parameters()",
                            "Call"
                        ],
                        [
                            "self.parameters()",
                            "Call"
                        ],
                        [
                            "self.parameters()",
                            "Call"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_396": {
                "input": {
                    "value": "md1[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_397": {
                "input": {
                    "value": "md2[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_398": {
                "input": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).to(m1.device)",
                            "Call"
                        ],
                        [
                            "l2 + torch.sum(torch.pow(md2[layer], 2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(0.0).to(md1[list(md1)[0]].device)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "torch.pow(n._parameters[l], power)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_259": {
                "input": {
                    "value": "torch.pow(n1._parameters[l], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_260": {
                "input": {
                    "value": "torch.pow(n2._parameters[l], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_261": {
                "input": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).to(m1.device)",
                            "Call"
                        ],
                        [
                            "l1 + torch.sum(torch.pow(md1[layer], 2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(0.0).to(md1[list(md1)[0]].device)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_231": {
                "input": {
                    "value": "n._parameters[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "power",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "power",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_259": {
                "input": {
                    "value": "n1._parameters[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_260": {
                "input": {
                    "value": "n2._parameters[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}