{
    "cadrl_ros/scripts/network.py": {
        "tensorflow": {
            "Graph_24": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, Config.NN_INPUT_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_46": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.final_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fullyconnected1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_49": {
                "variable": {
                    "value": "self.logits_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_p",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "self.logits_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.dense(inputs=self.fc1, units=1, use_bias=True, activation=None, name='logits_v')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_106": {
                "variable": {
                    "value": "self.final_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "self.avg_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "Config.NN_INPUT_AVG_VECTOR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_87": {
                "variable": {
                    "value": "self.std_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "Config.NN_INPUT_STD_VECTOR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "self.other_agent_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.other_agent_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, max_length, Config.OTHER_AGENT_FULL_OBSERVATION_LENGTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_100": {
                "variable": {
                    "value": "(self.rnn_outputs, self.rnn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "tf.contrib.rnn.LSTMCell(num_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.other_agent_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.num_other_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_102": {
                "variable": {
                    "value": "self.layer1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.host_agent_vec, self.rnn_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "layer1_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_103": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.layer1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=0.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "layer1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_29": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_37": {
                "variable": {
                    "value": "vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_38": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{var.name: var for var in vars}",
                    "type": "DictComp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_53": {
                "inputs": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_v",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_26": {
                "device_name": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "logits": {
                    "value": "self.logits_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_100": {
                "units": {
                    "value": "num_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_31": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_34": {
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cadrl_ros/scripts/util.py": {
        "tensorflow": {}
    },
    "experiments/exam.py": {
        "tensorflow": {
            "set_verbosity_117": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exam_test.py": {
        "tensorflow": {
            "set_verbosity_112": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exam_test1.py": {
        "tensorflow": {
            "set_verbosity_137": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/example.py": {
        "tensorflow": {
            "set_verbosity_76": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maca/env_utils.py": {
        "tensorflow": {
            "set_verbosity_10": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maca/policies/GA3C_CADRL/network.py": {
        "tensorflow": {
            "Graph_46": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_50": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False, gpu_options=tf.GPUOptions(allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "import_meta_graph_57": {
                "variable": {
                    "value": "new_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "filename + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_devices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_48": {
                "device_name": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_52": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_55": {
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maca/policies/PPOCADRLPolicy.py": {
        "tensorflow": {
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "ppo2_model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maca/policies/DRLLongPolicy.py": {
        "torch": {
            "load_50": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "policy_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpt_dir + checkpt_name",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_50": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maca/policies/DRL_Long/circle_test.py": {
        "torch": {
            "Adam_103": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_104": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "policy_path + '/stage2.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "maca/policies/DRL_Long/model/net.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(action_space)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "variable": {
                    "value": "self.act_fea_cv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_22": {
                "variable": {
                    "value": "self.act_fea_cv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.act_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.act_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + 2 + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.actor1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.actor2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_29": {
                "variable": {
                    "value": "self.crt_fea_cv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_30": {
                "variable": {
                    "value": "self.crt_fea_cv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.crt_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.crt_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + 2 + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.act_fea_cv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.act_fea_cv2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.act_fc1(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, goal, speed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.act_fc2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "mean1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.actor1(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "variable": {
                    "value": "mean2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.actor2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean1, mean2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_54": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_55": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((mean1, mean2), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mu(act)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "std",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ],
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ],
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ],
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_61": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.crt_fea_cv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.crt_fea_cv2(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.crt_fc1(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, goal, speed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.crt_fc2(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_75": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.act_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "obs_space",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.act_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(action_space)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.value_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "obs_space",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.value_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.value_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_106": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.act_fc1(x)",
                            "Call"
                        ],
                        [
                            "F.tanh(act)",
                            "Call"
                        ],
                        [
                            "self.act_fc2(act)",
                            "Call"
                        ],
                        [
                            "F.tanh(act)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_108": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.act_fc1(x)",
                            "Call"
                        ],
                        [
                            "F.tanh(act)",
                            "Call"
                        ],
                        [
                            "self.act_fc2(act)",
                            "Call"
                        ],
                        [
                            "F.tanh(act)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_111": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_112": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((mean1, mean2), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mu(act)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "std",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ],
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ],
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ],
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_116": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.crt_fea_cv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.crt_fea_cv2(v))",
                            "Call"
                        ],
                        [
                            "v.view(v.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.crt_fc1(v))",
                            "Call"
                        ],
                        [
                            "torch.cat((v, goal, speed), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.crt_fc2(v))",
                            "Call"
                        ],
                        [
                            "self.critic(v)",
                            "Call"
                        ],
                        [
                            "self.value_fc1(x)",
                            "Call"
                        ],
                        [
                            "F.tanh(v)",
                            "Call"
                        ],
                        [
                            "self.value_fc2(v)",
                            "Call"
                        ],
                        [
                            "F.tanh(v)",
                            "Call"
                        ],
                        [
                            "self.value_fc3(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_118": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.crt_fea_cv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.crt_fea_cv2(v))",
                            "Call"
                        ],
                        [
                            "v.view(v.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.crt_fc1(v))",
                            "Call"
                        ],
                        [
                            "torch.cat((v, goal, speed), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.crt_fc2(v))",
                            "Call"
                        ],
                        [
                            "self.critic(v)",
                            "Call"
                        ],
                        [
                            "self.value_fc1(x)",
                            "Call"
                        ],
                        [
                            "F.tanh(v)",
                            "Call"
                        ],
                        [
                            "self.value_fc2(v)",
                            "Call"
                        ],
                        [
                            "F.tanh(v)",
                            "Call"
                        ],
                        [
                            "self.value_fc3(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_128": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ],
                        [
                            "self.logstd.expand_as(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_141": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "action_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "action_space",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "maca/policies/DRL_Long/model/ppo.py": {
        "torch": {
            "BatchSampler_159": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(list(range(advs.shape[0])))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchSampler_222": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(list(range(advs.shape[0])))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_175": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_logprob - sampled_logprobs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_183": {
                "variable": {
                    "value": "value_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "sampled_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(targets[index])).float().cuda()",
                            "Call"
                        ],
                        [
                            "sampled_targets.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(targets[index])).float().cuda()",
                            "Call"
                        ],
                        [
                            "sampled_targets.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_238": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_logprob - sampled_logprobs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_246": {
                "variable": {
                    "value": "value_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "sampled_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(targets[index])).float().cuda()",
                            "Call"
                        ],
                        [
                            "sampled_targets.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(targets[index])).float().cuda()",
                            "Call"
                        ],
                        [
                            "sampled_targets.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_159": {
                "indices": {
                    "value": "list(range(advs.shape[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_222": {
                "indices": {
                    "value": "list(range(advs.shape[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_179": {
                "input": {
                    "value": "ratio",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(new_logprob - sampled_logprobs)",
                            "Call"
                        ],
                        [
                            "torch.exp(new_logprob - sampled_logprobs)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - clip_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + clip_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_180": {
                "input": {
                    "value": "surrogate1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ratio * sampled_advs",
                            "BinOp"
                        ],
                        [
                            "ratio * sampled_advs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_242": {
                "input": {
                    "value": "ratio",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(new_logprob - sampled_logprobs)",
                            "Call"
                        ],
                        [
                            "torch.exp(new_logprob - sampled_logprobs)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - clip_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + clip_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_243": {
                "input": {
                    "value": "surrogate1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ratio * sampled_advs",
                            "BinOp"
                        ],
                        [
                            "ratio * sampled_advs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "s_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(s_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s_list)).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.asarray(s_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s_list)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_70": {
                "ndarray": {
                    "value": "goal_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(goal_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(goal_list)).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.asarray(goal_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(goal_list)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "speed_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(speed_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(speed_list)).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.asarray(speed_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(speed_list)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "s_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(s_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s_list)).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.asarray(s_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s_list)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "goal_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(goal_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(goal_list)).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.asarray(goal_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(goal_list)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "ndarray": {
                    "value": "speed_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(speed_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(speed_list)).float().cuda()",
                            "Call"
                        ],
                        [
                            "np.asarray(speed_list)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(speed_list)).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "obss[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "goals[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "speeds[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "ndarray": {
                    "value": "actions[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "logprobs[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "ndarray": {
                    "value": "targets[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "advs[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "ndarray": {
                    "value": "obss[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "ndarray": {
                    "value": "goals[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "ndarray": {
                    "value": "speeds[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "actions[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_230": {
                "ndarray": {
                    "value": "logprobs[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_231": {
                "ndarray": {
                    "value": "targets[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "ndarray": {
                    "value": "advs[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "maca/policies/DRL_Long/model/utils.py": {
        "torch": {}
    },
    "maca/policies/DRL_Long/ppo_stage1.py": {
        "torch": {
            "Adam_179": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_180": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_190": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "policy_path + '/stage1_2.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_124": {
                "obj": {
                    "value": "policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "policy_path + '/Stage1_{}'.format(global_update)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maca/policies/DRL_Long/ppo_stage2.py": {
        "torch": {
            "Adam_188": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_189": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_199": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "policy_path + '/stage2.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_132": {
                "obj": {
                    "value": "policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "policy_path + '/stage2_{}.pth'.format(global_update)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}