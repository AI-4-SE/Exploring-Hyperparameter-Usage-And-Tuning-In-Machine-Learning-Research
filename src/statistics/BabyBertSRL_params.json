{
    "data_tools/make_srl_training_data_from_model.py": {
        "tensorflow": {
            "list_physical_devices_60": {
                "variable": {
                    "value": "gpu_devices",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "possible_values": []
                }
            },
            "set_memory_growth_61": {
                "device": {
                    "value": "gpu_devices[0]",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "bert_recipes/decode.py": {
        "torch": {
            "softmax_64": {
                "variable": {
                    "value": "class_probabilities",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_logits",
                    "possible_values": [
                        [
                            "logits.view(-1, len(id2srl_tag))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "transition_matrix",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(id2srl_tag), len(id2srl_tag)]",
                    "possible_values": []
                }
            }
        }
    },
    "bert_recipes/eval.py": {
        "torch": {
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "bert_recipes/joint_training_example_script.py": {
        "torch": {
            "exp_181": {
                "input": {
                    "value": "loss_mlm",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "output_mlm['loss']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "bert_recipes/model.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.head_mlm",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_model.config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_tags_mlm",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.head_srl",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_model.config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_tags_srl",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_31": {
                "variable": {
                    "value": "self.xe",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_token_id",
                    "possible_values": []
                }
            }
        }
    },
    "childes_srl/utils.py": {
        "torch": {
            "log_softmax_98": {
                "variable": {
                    "value": "log_probs_flat",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_106": {
                "variable": {
                    "value": "probs_flat",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_flat",
                    "possible_values": [
                        [
                            "log_probs_flat.exp()",
                            "Call"
                        ],
                        [
                            "torch.gather(probs_flat, dim=1, index=targets_flat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_135": {
                "variable": {
                    "value": "alpha_factor",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_factor",
                    "possible_values": [
                        [
                            "torch.tensor([1.0 - float(alpha), float(alpha)], dtype=weights.dtype, device=weights.device)",
                            "Call"
                        ],
                        [
                            "torch.gather(alpha_factor, dim=0, index=targets_flat.view(-1)).view(*targets.size())",
                            "Call"
                        ],
                        [
                            "torch.tensor(alpha, dtype=weights.dtype, device=weights.device)",
                            "Call"
                        ],
                        [
                            "alpha_factor.view(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - alpha_factor, alpha_factor])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat.view(-1)",
                    "possible_values": []
                }
            },
            "zeros_like_142": {
                "variable": {
                    "value": "one_hot_targets",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_flat",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "alpha_factor",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 - float(alpha), float(alpha)]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "alpha_factor",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "possible_values": []
                }
            },
            "gather_151": {
                "input": {
                    "value": "log_probs_flat",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_130": {
                "variable": {
                    "value": "alpha_factor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - alpha_factor, alpha_factor]",
                    "possible_values": []
                }
            }
        }
    }
}