{
    "HPE/train_PoseTrack_COCO_17_CPN_res101.py": {
        "tensorflow": {
            "concat_71": {
                "variable": {
                    "value": "refine_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "refine_fms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_68": {
                "variable": {
                    "value": "mid_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "mid_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block",
                            "variable"
                        ],
                        [
                            "bottleneck(mid_fm, 256, 128, stride=1, scope='res{}/refine_conv{}'.format(2 + i, j))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(mid_fm, (cfg.output_shape[0], cfg.output_shape[1]), name='upsample_conv/res{}'.format(2 + i))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(cfg.output_shape[0], cfg.output_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'upsample_conv/res{}'.format(2 + i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(refine_fms, axis=3)",
                            "Call"
                        ],
                        [
                            "bottleneck(refine_fm, 256, 128, stride=1, scope='final_bottleneck')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "refine_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "variable": {
                    "value": "lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block in enumerate(reversed(blocks))",
                            "Call"
                        ],
                        [
                            "block in enumerate(blocks)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'lateral/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_33": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lateral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(block, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=tf.nn.relu, scope='lateral/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_34": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "last_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "upsample + lateral",
                            "BinOp"
                        ],
                        [
                            "lateral",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "(sz[1], sz[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'upsample/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(last_fm, (sz[1], sz[2]), name='upsample/res{}'.format(5 - i))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upsample, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='merge/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "'merge/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "upsample + lateral",
                            "BinOp"
                        ],
                        [
                            "lateral",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'tmp/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(last_fm, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=tf.nn.relu, scope='tmp/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "'pyramid/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "label15",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "label11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "label9",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "label7",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_54": {
                "images": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(tmp, cfg.nr_skeleton, [3, 3], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='pyramid/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(cfg.output_shape[0], cfg.output_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_139": {
                "variable": {
                    "value": "(topk_val, topk_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'ohkm{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_140": {
                "variable": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(sub_loss, k=top_k, sorted=False, name='ohkm{}'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'ohkm_loss{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "input_tensor": {
                    "value": "tf.square(refine_out - label7)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_156": {
                "x": {
                    "value": "tf.greater(valids, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_147": {
                "x": {
                    "value": "tf.greater(tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton)), 1.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "input_tensor": {
                    "value": "tf.square(global_out - global_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_156": {
                "x": {
                    "value": "refine_out - label7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_156": {
                "x": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.nr_skeleton])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(sub_loss, topk_idx, name='ohkm_loss{}'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_147": {
                "x": {
                    "value": "tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_148": {
                "x": {
                    "value": "global_out - global_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "tensor": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.nr_skeleton])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1, cfg.nr_skeleton)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "HPE/train_PoseTrack_COCO_17_MSRA152.py": {
        "tensorflow": {
            "concat_71": {
                "variable": {
                    "value": "refine_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "refine_fms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_68": {
                "variable": {
                    "value": "mid_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "mid_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block",
                            "variable"
                        ],
                        [
                            "bottleneck(mid_fm, 256, 128, stride=1, scope='res{}/refine_conv{}'.format(2 + i, j))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(mid_fm, (cfg.output_shape[0], cfg.output_shape[1]), name='upsample_conv/res{}'.format(2 + i))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(cfg.output_shape[0], cfg.output_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'upsample_conv/res{}'.format(2 + i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(refine_fms, axis=3)",
                            "Call"
                        ],
                        [
                            "bottleneck(refine_fm, 256, 128, stride=1, scope='final_bottleneck')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "refine_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "meshgrid_87": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[1])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[1] * output_shape[1] + 0.5)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[0])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[0] * output_shape[0] + 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(xx)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(yy)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[1] * output_shape[1] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_92": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[0] * output_shape[0] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_94": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-((xx - x) / tf.to_float(sigma)) ** 2 / tf.to_float(2) - ((yy - y) / tf.to_float(sigma)) ** 2 / tf.to_float(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_133": {
                "variable": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "variable": {
                    "value": "lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block in enumerate(reversed(blocks))",
                            "Call"
                        ],
                        [
                            "block in enumerate(blocks)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'lateral/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_33": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lateral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(block, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=tf.nn.relu, scope='lateral/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_34": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "last_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "upsample + lateral",
                            "BinOp"
                        ],
                        [
                            "lateral",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "(sz[1], sz[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'upsample/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(last_fm, (sz[1], sz[2]), name='upsample/res{}'.format(5 - i))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upsample, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='merge/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "'merge/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "upsample + lateral",
                            "BinOp"
                        ],
                        [
                            "lateral",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'tmp/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(last_fm, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=tf.nn.relu, scope='tmp/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "'pyramid/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_139": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blocks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_143": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(tmp, cfg.nr_skeleton, [3, 3], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='pyramid/res{}'.format(5 - i))",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_147": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(tmp, cfg.nr_skeleton, [3, 3], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='pyramid/res{}'.format(5 - i))",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_152": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(tmp, cfg.nr_skeleton, [3, 3], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='pyramid/res{}'.format(5 - i))",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "msra_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "label15",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "label11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "label9",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "label7",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_196": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(heatmap_outs - label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_54": {
                "images": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(tmp, cfg.nr_skeleton, [3, 3], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='pyramid/res{}'.format(5 - i))",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(cfg.output_shape[0], cfg.output_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_88": {
                "x": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(xx), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_89": {
                "x": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(yy), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_189": {
                "variable": {
                    "value": "(topk_val, topk_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'ohkm{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_190": {
                "variable": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(sub_loss, k=top_k, sorted=False, name='ohkm{}'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'ohkm_loss{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_195": {
                "x": {
                    "value": "tf.greater(tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton)), 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_196": {
                "x": {
                    "value": "heatmap_outs - label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_195": {
                "x": {
                    "value": "tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "coord[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "coord[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "input_tensor": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(sub_loss, topk_idx, name='ohkm_loss{}'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_195": {
                "tensor": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.nr_skeleton])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1, cfg.nr_skeleton)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "HPE/train_PoseTrack_COCO_17_mobile_deconv.py": {
        "tensorflow": {
            "meshgrid_25": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[1])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[1] * output_shape[1] + 0.5)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[0])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[0] * output_shape[0] + 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(xx)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(yy)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[1] * output_shape[1] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_30": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[0] * output_shape[0] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_32": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-((xx - x) / tf.to_float(sigma)) ** 2 / tf.to_float(2) - ((yy - y) / tf.to_float(sigma)) ** 2 / tf.to_float(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_71": {
                "variable": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_transpose_77": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blocks",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "msra_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "label15",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "label11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "label9",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "label7",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(heatmap_outs - label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_26": {
                "x": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(xx), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_27": {
                "x": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(yy), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_123": {
                "variable": {
                    "value": "(topk_val, topk_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'ohkm{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_124": {
                "variable": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(sub_loss, k=top_k, sorted=False, name='ohkm{}'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'ohkm_loss{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_129": {
                "x": {
                    "value": "tf.greater(tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton)), 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_130": {
                "x": {
                    "value": "heatmap_outs - label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_32": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_129": {
                "x": {
                    "value": "tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "tensor": {
                    "value": "coord[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "tensor": {
                    "value": "coord[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(sub_loss, topk_idx, name='ohkm_loss{}'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.nr_skeleton])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1, cfg.nr_skeleton)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "demo_camera_mobile.py": {
        "tensorflow": {}
    },
    "demo_video_mobile.py": {
        "tensorflow": {}
    },
    "lib/nets/basemodel.py": {
        "tensorflow": {
            "pad_59": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_50')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_101')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(tf.concat(inp, axis=3), 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_152')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_60": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_50')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_101')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(tf.concat(inp, axis=3), 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_152')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_102": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_50')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_101')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(tf.concat(inp, axis=3), 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_152')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_103": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_50')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_101')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(tf.concat(inp, axis=3), 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_152')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_147": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_50')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_101')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(tf.concat(inp, axis=3), 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_152')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_148": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_50')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(image, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_101')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(tf.concat(inp, axis=3), 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, padding='VALID', scope='pool1')",
                            "Call"
                        ],
                        [
                            "resnet_v1.resnet_v1(net, blocks[0:1], global_pool=False, include_root_block=False, scope='resnet_v1_152')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "resnet_v1_50",
                    "type": "str",
                    "possible_values": []
                },
                "default_name": {
                    "value": "resnet_v1_50",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "resnet_v1_101",
                    "type": "str",
                    "possible_values": []
                },
                "default_name": {
                    "value": "resnet_v1_101",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "resnet_v1_152",
                    "type": "str",
                    "possible_values": []
                },
                "default_name": {
                    "value": "resnet_v1_152",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_146": {
                "values": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nets/mobilenet_v1.py": {
        "tensorflow": {
            "pad_169": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_471": {
                "variable": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ],
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_366": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ],
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_373": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_376": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "_fixed_padding(net, conv_def.kernel)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), conv_def.kernel, stride=conv_def.stride, scope=end_point)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, conv_def.kernel, layer_rate)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, None, conv_def.kernel, depth_multiplier=1, stride=layer_stride, rate=layer_rate, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), [1, 1], stride=1, scope=end_point)",
                            "Call"
                        ],
                        [
                            "mobilenet_v1_base(inputs, scope=scope, min_depth=min_depth, depth_multiplier=depth_multiplier, conv_defs=conv_defs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_391": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nets/resnet_utils.py": {
        "tensorflow": {
            "pad_137": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_84": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factor",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_124": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "rate * unit_stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_139": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "rate * unit_stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nets/resnet_v1.py": {
        "tensorflow": {
            "conv2d_116": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth_bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_bottleneck",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(inputs, depth_bottleneck, [1, 1], stride=1, scope='conv1')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(residual, depth_bottleneck, 3, stride, rate=rate, scope='conv2')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(residual, depth, [1, 1], stride=1, activation_fn=None, scope='conv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_109": {
                "variable": {
                    "value": "shortcut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_203": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_207": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_209": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_218": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "layers_lib.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tfflat/base.py": {
        "tensorflow": {
            "ConfigProto_121": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_123": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_185": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_200": {
                "variable": {
                    "value": "biases_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_42": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_43": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "tf.add_n(weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_253": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_258": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "apply_gradient_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._optimizer.apply_gradients(grads)",
                            "Call"
                        ],
                        [
                            "self._optimizer.apply_gradients(grads)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "variables_averages_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_averages.apply(variables_to_average)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_261": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "apply_gradient_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._optimizer.apply_gradients(grads)",
                            "Call"
                        ],
                        [
                            "self._optimizer.apply_gradients(grads)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "*extra_update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_to_collection_75": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_137": {
                "device_name": {
                    "value": "/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_138": {
                "seed": {
                    "value": "2333",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_279": {
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_383": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_68": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                }
            },
            "get_variable_scope_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moving_average_variables_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_207": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_299": {
                "ref": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "cur_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.get_lr(itrs[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_385": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_208": {
                "name": {
                    "value": "'tower_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_231": {
                "variable": {
                    "value": "extra_update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_386": {
                "name": {
                    "value": "'tower_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "Gradient_Mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_232": {
                "control_inputs": {
                    "value": "extra_update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS, name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_243": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "tf.multiply(grad, scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "scale * 2.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/tfflat/net_utils.py": {
        "tensorflow": {
            "concat_31": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_25": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_97": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_86": {
                "values": {
                    "value": "data_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_holder",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_107": {
                "key": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "summary",
                            "variable"
                        ]
                    ]
                }
            },
            "get_collection_108": {
                "key": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "summary",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "ret[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_90": {
                "values": {
                    "value": "[data_holder[j][i] for j in range(len(data_holder))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_109": {
                "key": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "summary",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_113": {
                "variable": {
                    "value": "ret[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_111": {
                "key": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "summary",
                            "variable"
                        ]
                    ]
                }
            },
            "concat_115": {
                "variable": {
                    "value": "ret[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.get_collection(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_113": {
                "key": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "summary",
                            "variable"
                        ]
                    ]
                }
            },
            "get_collection_115": {
                "key": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "summary",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "lib/tfflat/saver.py": {
        "tensorflow": {
            "global_variables_38": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NewCheckpointReader_9": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_26": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_56": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "network_CPN101.py": {
        "tensorflow": {
            "concat_71": {
                "variable": {
                    "value": "refine_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "refine_fms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_68": {
                "variable": {
                    "value": "mid_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "mid_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block",
                            "variable"
                        ],
                        [
                            "bottleneck(mid_fm, 256, 128, stride=1, scope='res{}/refine_conv{}'.format(2 + i, j))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(mid_fm, (cfg.output_shape[0], cfg.output_shape[1]), name='upsample_conv/res{}'.format(2 + i))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(cfg.output_shape[0], cfg.output_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'upsample_conv/res{}'.format(2 + i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(refine_fms, axis=3)",
                            "Call"
                        ],
                        [
                            "bottleneck(refine_fm, 256, 128, stride=1, scope='final_bottleneck')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "refine_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "variable": {
                    "value": "lateral",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block in enumerate(reversed(blocks))",
                            "Call"
                        ],
                        [
                            "block in enumerate(blocks)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'lateral/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_33": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lateral",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(block, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=tf.nn.relu, scope='lateral/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_34": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "last_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "upsample + lateral",
                            "BinOp"
                        ],
                        [
                            "lateral",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "(sz[1], sz[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'upsample/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(last_fm, (sz[1], sz[2]), name='upsample/res{}'.format(5 - i))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upsample, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='merge/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "'merge/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_fm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "upsample + lateral",
                            "BinOp"
                        ],
                        [
                            "lateral",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'tmp/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(last_fm, 256, [1, 1], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=tf.nn.relu, scope='tmp/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "'pyramid/res{}'.format(5 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "label15",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "label11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "label9",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "label7",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_54": {
                "images": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(tmp, cfg.nr_skeleton, [3, 3], trainable=trainable, weights_initializer=initializer, padding='SAME', activation_fn=None, scope='pyramid/res{}'.format(5 - i))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(cfg.output_shape[0], cfg.output_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_126": {
                "variable": {
                    "value": "(topk_val, topk_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'ohkm{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_127": {
                "variable": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(sub_loss, k=top_k, sorted=False, name='ohkm{}'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'ohkm_loss{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "input_tensor": {
                    "value": "tf.square(refine_out - label7)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_144": {
                "x": {
                    "value": "tf.greater(valids, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_134": {
                "x": {
                    "value": "tf.greater(tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton)), 1.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "tf.square(global_out - global_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_144": {
                "x": {
                    "value": "refine_out - label7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_144": {
                "x": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.nr_skeleton])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(sub_loss, topk_idx, name='ohkm_loss{}'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_134": {
                "x": {
                    "value": "tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_135": {
                "x": {
                    "value": "global_out - global_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.nr_skeleton])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1, cfg.nr_skeleton)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "network_MSRA152.py": {
        "tensorflow": {
            "meshgrid_28": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[1])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[1] * output_shape[1] + 0.5)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[0])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[0] * output_shape[0] + 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(xx)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(yy)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[1] * output_shape[1] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[0] * output_shape[0] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_35": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-((xx - x) / tf.to_float(sigma)) ** 2 / tf.to_float(2) - ((yy - y) / tf.to_float(sigma)) ** 2 / tf.to_float(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_41": {
                "variable": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_transpose_47": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blocks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "msra_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "label15",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "label11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "label9",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "label7",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(heatmap_outs - label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_29": {
                "x": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(xx), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_30": {
                "x": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(yy), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_114": {
                "variable": {
                    "value": "(topk_val, topk_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'ohkm{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_115": {
                "variable": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(sub_loss, k=top_k, sorted=False, name='ohkm{}'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'ohkm_loss{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_120": {
                "x": {
                    "value": "tf.greater(tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton)), 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_121": {
                "x": {
                    "value": "heatmap_outs - label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_35": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_120": {
                "x": {
                    "value": "tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "tensor": {
                    "value": "coord[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "tensor": {
                    "value": "coord[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(sub_loss, topk_idx, name='ohkm_loss{}'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.nr_skeleton])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1, cfg.nr_skeleton)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "network_mobile_deconv.py": {
        "tensorflow": {
            "meshgrid_26": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[1])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[1] * output_shape[1] + 0.5)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[0])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[0] * output_shape[0] + 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(xx)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(yy)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[1] * output_shape[1] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_31": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.nr_skeleton]) / cfg.data_shape[0] * output_shape[0] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_33": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-((xx - x) / tf.to_float(sigma)) ** 2 / tf.to_float(2) - ((yy - y) / tf.to_float(sigma)) ** 2 / tf.to_float(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_39": {
                "variable": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_transpose_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blocks",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.nr_skeleton, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.nr_skeleton",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "msra_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "label15",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "label11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "label9",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "label7",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.output_shape, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *cfg.data_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(heatmap_outs - label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_27": {
                "x": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(xx), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_28": {
                "x": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(yy), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_112": {
                "variable": {
                    "value": "(topk_val, topk_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'ohkm{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_113": {
                "variable": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sub_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss[i]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(sub_loss, k=top_k, sorted=False, name='ohkm{}'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'ohkm_loss{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_118": {
                "x": {
                    "value": "tf.greater(tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton)), 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_119": {
                "x": {
                    "value": "heatmap_outs - label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_33": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_118": {
                "x": {
                    "value": "tf.reshape(valids, (-1, 1, 1, cfg.nr_skeleton))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "tensor": {
                    "value": "coord[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "tensor": {
                    "value": "coord[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.nr_skeleton]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "input_tensor": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(sub_loss, topk_idx, name='ohkm_loss{}'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "tensor": {
                    "value": "valids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.nr_skeleton])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1, cfg.nr_skeleton)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "process_posetrack18_with_lighttrack_CPN101.py": {
        "tensorflow": {}
    },
    "process_posetrack18_with_lighttrack_MSRA152.py": {
        "tensorflow": {}
    },
    "detector/detector_utils.py": {
        "torch": {
            "max_207": {
                "variable": {
                    "value": "inter_rect_x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[:, 0] - box1[:, 2] / 2",
                            "BinOp"
                        ],
                        [
                            "box1[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_208": {
                "variable": {
                    "value": "inter_rect_y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[:, 1] - box1[:, 3] / 2",
                            "BinOp"
                        ],
                        [
                            "box1[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_209": {
                "variable": {
                    "value": "inter_rect_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[:, 0] + box1[:, 2] / 2",
                            "BinOp"
                        ],
                        [
                            "box1[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_210": {
                "variable": {
                    "value": "inter_rect_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box1[:, 1] + box1[:, 3] / 2",
                            "BinOp"
                        ],
                        [
                            "box1[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_303": {
                "variable": {
                    "value": "noobj_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_304": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_305": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_size",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_276": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred[:, :5], class_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_366": {
                "ndarray": {
                    "value": "np.eye(num_classes, dtype='uint8')[y]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_to_square(img, 127.5)",
                            "Call"
                        ],
                        [
                            "cv2.resize(input_img, (img_size, img_size), interpolation=cv2.INTER_AREA)",
                            "Call"
                        ],
                        [
                            "np.transpose(input_img, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(input_img, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input_img).float() / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_212": {
                "input": {
                    "value": "inter_rect_y2 - inter_rect_y1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_290": {
                "variable": {
                    "value": "output[image_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "keep_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "keep_boxes + [detections[0]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_327": {
                "variable": {
                    "value": "gt_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_338": {
                "variable": {
                    "value": "gt_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_356": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cls[b, best_n, gj, gi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "detector/detector_yolov3.py": {
        "torch": {
            "is_available_31": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_41": {
                "f": {
                    "value": "opt.weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/models.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "module_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(prediction[..., 0])",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([layer_outputs[i] for i in layer_i], 1)",
                            "Call"
                        ],
                        [
                            "layer_outputs[-1] + layer_outputs[layer_i]",
                            "BinOp"
                        ],
                        [
                            "module[0](x, targets)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_124": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_125": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_142": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "pred_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_149": {
                "variable": {
                    "value": "grid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_150": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_150": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_boxes.view(nB, -1, 4) * stride, pred_conf.view(nB, -1, 1), pred_cls.view(nB, -1, self.num_classes))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "variable": {
                    "value": "maxpool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "int(module_def['size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "int(module_def['stride'])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((kernel_size - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_160": {
                "input": {
                    "value": "h.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((pred_boxes.view(nB, -1, 4) * stride, pred_conf.view(nB, -1, 1), pred_cls.view(nB, -1, self.num_classes)), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "output_filters[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[int(hyperparams['channels'])]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(module_def['filters'])",
                            "Call"
                        ],
                        [
                            "sum([output_filters[layer_i] for layer_i in layers])",
                            "Call"
                        ],
                        [
                            "output_filters[int(module_def['from'])]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(module_def['size'])",
                            "Call"
                        ],
                        [
                            "int(module_def['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "int(module_def['stride'])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2 if int(module_def['pad']) else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ZeroPad2d_53": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer_outputs[i] for i in layer_i]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((pred_boxes.view(nB, -1, 4) * stride, pred_conf.view(nB, -1, 1), pred_cls.view(nB, -1, self.num_classes)), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_305": {
                "variable": {
                    "value": "bn_b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "bn_w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "bn_rm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_317": {
                "variable": {
                    "value": "bn_rv",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_323": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(module_def['filters'])",
                            "Call"
                        ],
                        [
                            "sum([output_filters[layer_i] for layer_i in layers])",
                            "Call"
                        ],
                        [
                            "output_filters[int(module_def['from'])]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "graph/gcn_utils/contrastive.py": {
        "torch": {
            "sum_41": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(diff, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.pow(diff, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_45": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mdist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.margin - dist",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_positive - distance_negative + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "negative_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - (embeddings[negative_pairs[:, 0]] - embeddings[negative_pairs[:, 1]]).pow(2).sum(1).sqrt()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_91": {
                "variable": {
                    "value": "negative_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_loss, negative_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ap_distances - an_distances + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_41": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 - x1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * dist_sq + (1 - y) * torch.pow(dist, 2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat([positive_loss, negative_loss], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_46": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(dist_sq)",
                            "Call"
                        ],
                        [
                            "torch.clamp(mdist, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graph/gcn_utils/feeder.py": {
        "torch": {}
    },
    "graph/gcn_utils/feeder_random_negative.py": {
        "torch": {}
    },
    "graph/gcn_utils/feeder_triplet.py": {
        "torch": {}
    },
    "graph/gcn_utils/gcn_block.py": {
        "torch": {
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(t_dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv,kvw->nctw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "graph/gcn_utils/gcn_model.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels * A.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.st_gcn_networks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(st_gcn(in_channels, 64, kernel_size, 1, residual=False, **kwargs), st_gcn(64, 64, kernel_size, 1, **kwargs))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 4, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N * M, V * C, T)",
                            "Call"
                        ],
                        [
                            "self.data_bn(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, M, V, C, T)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N * M, C, T, V)",
                            "Call"
                        ],
                        [
                            "gcn(x, self.A * importance)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(N, M, -1, 1, 1).mean(dim=1)",
                            "Call"
                        ],
                        [
                            "self.fcn(x)",
                            "Call"
                        ],
                        [
                            "self.gcn(x, A)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ParameterList_71": {
                "variable": {
                    "value": "self.edge_importance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(self.A.size())) for i in self.st_gcn_networks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=(stride, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "data": {
                    "value": "torch.ones(self.A.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_72": {
                "*size": {
                    "value": "self.A.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graph/gcn_utils/io.py": {
        "torch": {
            "DataParallel_91": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graph/gcn_utils/naive_model.py": {
        "torch": {}
    },
    "graph/gcn_utils/processor_base.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "self.data_loader[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(**self.arg.train_feeder_args)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.arg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.arg.num_worker * torchlight.ngpu(self.arg.device)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "self.data_loader[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(**self.arg.test_feeder_args)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.arg.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.arg.num_worker * torchlight.ngpu(self.arg.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "graph/gcn_utils/processor_siamese_gcn.py": {
        "torch": {
            "SGD_59": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.arg.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow(diff, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_154": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(pow(diff, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph/torchlight/torchlight/gpu.py": {
        "torch": {
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graph/torchlight/torchlight/io.py": {
        "torch": {
            "load_64": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_106": {
                "obj": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(weights_path)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "OrderedDict([[''.join(k.split('module.')), v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(self.work_dir, name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph/visualize_pose_matching.py": {
        "torch": {
            "sum_195": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow(diff, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_196": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(pow(diff, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "data_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data_1)",
                            "Call"
                        ],
                        [
                            "data_1.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "data_1.float().to(self.dev)",
                            "Call"
                        ],
                        [
                            "data_1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "data_2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data_2)",
                            "Call"
                        ],
                        [
                            "data_2.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "data_2.float().to(self.dev)",
                            "Call"
                        ],
                        [
                            "data_2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph/visualize_pose_matching_diff_persons.py": {
        "torch": {
            "sum_195": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow(diff, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_196": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(pow(diff, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "data_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data_1)",
                            "Call"
                        ],
                        [
                            "data_1.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "data_1.float().to(self.dev)",
                            "Call"
                        ],
                        [
                            "data_1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "data_2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data_2)",
                            "Call"
                        ],
                        [
                            "data_2.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "data_2.float().to(self.dev)",
                            "Call"
                        ],
                        [
                            "data_2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}