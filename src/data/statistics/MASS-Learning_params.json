{
    "experiments/OODDetection.py": {
        "sklearn": {
            "roc_auc_score_86": {
                "variable": {
                    "value": "auroc_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "ent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_scores).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_87": {
                "variable": {
                    "value": "auroc_density",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "max_density_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "-torch.cat(max_density_scores).numpy()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "average_precision_score_101": {
                "variable": {
                    "value": "apr_out_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "ent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_scores).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_102": {
                "variable": {
                    "value": "apr_out_density",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "max_density_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "-torch.cat(max_density_scores).numpy()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "average_precision_score_117": {
                "variable": {
                    "value": "apr_in_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "-ent_scores",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "average_precision_score_118": {
                "variable": {
                    "value": "apr_in_density",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "-max_density_scores",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "roc_auc_score_96": {
                "variable": {
                    "value": "auroc_alternate",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "alternate_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "-torch.cat(alternate_scores).numpy()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "average_precision_score_111": {
                "variable": {
                    "value": "apr_out_alternate",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "alternate_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "-torch.cat(alternate_scores).numpy()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "average_precision_score_127": {
                "variable": {
                    "value": "apr_in_alternate",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]).to(torch.int32).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "1 - targets",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "-alternate_scores",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "stack_29": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(log_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "probs * SIs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "ent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_scores).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_82": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(len(self.val_loader.dataset)), torch.ones(len(self.OOD_loader.dataset))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_13": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.logits_from_net_output(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "max_density_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "-torch.cat(max_density_scores).numpy()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "alternate_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "-torch.cat(alternate_scores).numpy()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "len(self.val_loader.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "len(self.OOD_loader.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/utils.py": {
        "sklearn": {
            "GaussianMixture_143": {
                "variable": {
                    "value": "mog",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "covariance_type",
                    "type": "variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_41": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logdir, 'model_checkpoint_{}.pt'.format(checkpoint))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(output.shape) + list(input.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.mixture_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_mixture_components)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_mixture_components, rep_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.scale_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_mixture_components, rep_dim, rep_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_114": {
                "variable": {
                    "value": "component_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "component_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(component_log_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(writer.file_writer.get_logdir(), 'model_kwargs.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(writer.file_writer.get_logdir(), 'model_checkpoint_{}.pt'.format(chkpt_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(logdir, 'model_kwargs.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_111": {
                "variable": {
                    "value": "half_log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "half_log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_117": {
                "input": {
                    "value": "mixture_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "component_log_probs + torch.log_softmax(mixture_logits, dim=0).expand(x.shape[0], len(mixture_logits))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "n_mixture_components",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "n_mixture_components",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "n_mixture_components",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "input": {
                    "value": "mixture_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mixture_logits.detach()",
                            "Call"
                        ],
                        [
                            "self.mixture_logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_60": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.net.forward(data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_62": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.net.forward(data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.shape).to(input)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "torch.triu(c_scale_tril.detach(), diagonal=1) != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_108": {
                "input": {
                    "value": "c_scale_tril.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils.py": {
        "sklearn": {
            "GaussianMixture_46": {
                "variable": {
                    "value": "gm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_mixture_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "cov_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['full', 'diag']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Tensor_21": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tril_28": {
                "variable": {
                    "value": "mog.scale_tril.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "mog.scale_tril.data[0] + torch.eye(data.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "variable": {
                    "value": "mog.scale_tril.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_30": {
                "variable": {
                    "value": "mvn",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mog.loc[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_tril": {
                    "value": "mog.scale_tril[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(np.random.rand(20, 11)).requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tril_71": {
                "variable": {
                    "value": "mog.scale_tril.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mog.scale_tril.data[0] + torch.eye(data.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "mog.scale_tril.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_72": {
                "variable": {
                    "value": "mog.scale_tril.data[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mog.scale_tril.data[1] + torch.eye(data.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "mog.scale_tril.data[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(input).requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(input).requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.tensor(input).requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.tensor(input).requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(input).requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(input).requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.tensor(input).requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.tensor(input).requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_50": {
                "variable": {
                    "value": "mog.mixture_logits.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(gm.weights_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "mog.loc.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gm.means_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_53": {
                "variable": {
                    "value": "mog.scale_tril.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(gm.covariances_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_112": {
                "func": {
                    "value": "testfunction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestFunction.apply",
                            "Attribute"
                        ],
                        [
                            "TestFunction.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradcheck_139": {
                "func": {
                    "value": "testfunction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestFunction.apply",
                            "Attribute"
                        ],
                        [
                            "TestFunction.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "ndarray": {
                    "value": "gm.weights_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "variable": {
                    "value": "mog.scale_tril.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(np.stack([np.diag(d) for d in gm.covariances_]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_108": {
                "input": {
                    "value": "go",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "grad_output.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(input, output)",
                            "Call"
                        ],
                        [
                            "jacobian(input, output)",
                            "Call"
                        ],
                        [
                            "jacobian(input, output)",
                            "Call"
                        ],
                        [
                            "jacobian(input, output, diffable=True)",
                            "Call"
                        ],
                        [
                            "jacobian(input, output, diffable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_108": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "input": {
                    "value": "go",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "grad_output.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(input, output)",
                            "Call"
                        ],
                        [
                            "jacobian(input, output)",
                            "Call"
                        ],
                        [
                            "jacobian(input, output)",
                            "Call"
                        ],
                        [
                            "jacobian(input, output, diffable=True)",
                            "Call"
                        ],
                        [
                            "jacobian(input, output, diffable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_135": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "gm.covariances_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_28": {
                "n": {
                    "value": "data.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "np.stack([np.diag(d) for d in gm.covariances_])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_71": {
                "n": {
                    "value": "data.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_72": {
                "n": {
                    "value": "data.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/MASSLossTerms.py": {
        "torch": {
            "nll_loss_57": {
                "input": {
                    "value": "dummy_MASS.var_dist.rep_to_logits(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/UncertaintyQuantification.py": {
        "torch": {
            "sum_11": {
                "input": {
                    "value": "probs * SIs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_23": {
                "variable": {
                    "value": "NLL",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_24": {
                "variable": {
                    "value": "MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_8": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, dim=1).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.logits_from_net_output(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/MASSBase.py": {
        "torch": {
            "matmul_61": {
                "variable": {
                    "value": "predets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian(input, output, diffable=diffable)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "D_f.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_52": {
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(log_probs, dim=1) - np.log(len(self.var_dist.q))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_53": {
                "input": {
                    "value": "torch.logsumexp(log_probs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_53": {
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(log_probs, dim=1) - np.log(len(self.var_dist.q))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logdet_64": {
                "input": {
                    "value": "pd * pd.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "torch.tensor(pd.shape[0]).to(pd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "pd.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/MASSCE.py": {
        "torch": {
            "nll_loss_30": {
                "input": {
                    "value": "self.var_dist.rep_to_logits(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/MASSVariationalDist.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_68": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_68": {
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.functional.log_softmax(torch.stack(logits, dim=1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "mog.scale_tril.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tril(st) for st in mog.scale_tril.data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_57": {
                "variable": {
                    "value": "mog.mixture_logits.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(q_params[i][0]).to(mog.mixture_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_59": {
                "variable": {
                    "value": "mog.scale_tril.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(q_params[i][2]).to(mog.scale_tril)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tril_38": {
                "input": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_59": {}
        }
    },
    "models/ModelBase.py": {
        "torch": {}
    },
    "models/ReducedJacMASSCE.py": {
        "torch": {
            "cat_19": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_jac, out_no_jac]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/SoftmaxCE.py": {
        "torch": {
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "self.loss_fxn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_21": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/VIB.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normal_63": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(n_samples, *mean.shape).to(mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_106": {
                "variable": {
                    "value": "cross_entropy_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(rep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expanded_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.repeat(n_samples, 1).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultivariateNormal_131": {
                "variable": {
                    "value": "enc_mvn",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean.repeat(n_samples, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_tril": {
                    "value": "scale_tril.repeat(n_samples, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_50": {
                "variable": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + torch.exp(std)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_75": {
                "input": {
                    "value": "self.decoder(rep)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_89": {
                "variable": {
                    "value": "enc_mvn",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean.repeat(n_samples, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_tril": {
                    "value": "scale_tril.repeat(n_samples, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "kl_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_log_probs - marg_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "scale_tril",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "std.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "(mean, scale_tril_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[self.rep_dim, self.net.out_dim - self.rep_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_55": {
                "variable": {
                    "value": "std[:, torch.eye(self.rep_dim) == 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + torch.exp(scale_tril_vec[:, :self.rep_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "scale_tril",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "std.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.train_var_dist_samples",
                            "Attribute"
                        ],
                        [
                            "self.test_var_dist_samples",
                            "Attribute"
                        ],
                        [
                            "self.train_var_dist_samples",
                            "Attribute"
                        ],
                        [
                            "self.test_var_dist_samples",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "*mean.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "exp_51": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(1 + torch.exp(std))",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape[0], self.rep_dim, self.rep_dim).to(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_67": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(1 + torch.exp(std))",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.shape[0], self.rep_dim, self.rep_dim).to(output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "eps.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "scale_tril_vec[:, :self.rep_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_128": {
                "n": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_56": {
                "input": {
                    "value": "torch.ones(self.rep_dim, self.rep_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_86": {
                "n": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/nets/ResNet20.py": {
        "torch": {
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fcout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fcout(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_72": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fcout(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fcout(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_114": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fcout(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_97": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/nets/SmallMLP.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fcout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.do2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "start_evaluating.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_id if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_58": {
                "device": {
                    "value": "int(kwargs['device_id'][-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "start_training.py": {
        "torch": {
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_id if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_32": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_115": {
                "device": {
                    "value": "int(kwargs['device_id'][-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_MASSVariationalDist.py": {
        "torch": {
            "zeros_87": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_108": {
                "mean": {
                    "value": "torch.matmul(x, torch.ones(200, out_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.ones(200, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[8, 10, 12]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_models/test_VIB.py": {
        "torch": {
            "zeros_242": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_103": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_169": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "model.marginal.mixture_logits.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "model.marginal.loc.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "model.marginal.mixture_logits.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "model.marginal.loc.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_233": {
                "variable": {
                    "value": "model.marginal.scale_tril.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_106": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_118": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_206": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "triu_74": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.marginal.scale_tril.detach()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_108": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "m": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_112": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_120": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "m": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_124": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_208": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "m": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_129": {
                "n": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "m": {
                    "value": "rep_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_133": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_133": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_137": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_137": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_141": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_141": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ],
                        [
                            "model.sample_representation(mean, std, model.train_var_dist_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "stack_53": {
                "variable": {
                    "value": "mls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mog.mixture_logits for mog in var_dist.q]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(mls).squeeze(-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "mls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data', dataset_name), **dataset_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "locs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "locs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(locs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_63": {
                "variable": {
                    "value": "scale_trils",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scale_trils",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(scale_trils)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}