{
    "__experiments_readstats_pick_best_images_.py": {
        "sklearn": {}
    },
    "experiments_readstats.py": {
        "sklearn": {
            "f1_score_57": {
                "variable": {
                    "value": "s_f1mic",
                    "possible_values": []
                },
                "y_true": {
                    "value": "pf",
                    "possible_values": [
                        [
                            "p.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gf",
                    "possible_values": [
                        [
                            "gt_image_flatten[g_filename]",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "possible_values": []
                }
            },
            "f1_score_58": {
                "variable": {
                    "value": "s_f1mac",
                    "possible_values": []
                },
                "y_true": {
                    "value": "pf",
                    "possible_values": [
                        [
                            "p.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gf",
                    "possible_values": [
                        [
                            "gt_image_flatten[g_filename]",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            }
        }
    },
    "experiments_readstats_cfs_mtx.py": {
        "sklearn": {
            "f1_score_57": {
                "y_true": {
                    "value": "g[..., cj].flatten()",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_image[..., cj].flatten()",
                    "possible_values": []
                }
            }
        }
    },
    "experiments_readstats_pick_best_images.py": {
        "sklearn": {}
    },
    "preprocess/mk_traindata_bach_centered.py": {
        "sklearn": {
            "KMeans_170": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "possible_values": [
                        [
                            "np.ceil(label_patch.size / (args.tile_w * args.tile_h) + 1).astype(np.int)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/mk_traindata_sunny_no_tumors.py": {
        "sklearn": {
            "KMeans_176": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "possible_values": [
                        [
                            "np.ceil(np.prod(label_patch.size) / (args.tile_w * args.tile_h) + 1).astype(np.int)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/mk_traindata_sunnybrook_centered.py": {
        "sklearn": {
            "KMeans_138": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "possible_values": [
                        [
                            "np.ceil(np.prod(label_patch.size) / (args.tile_w * args.tile_h) + 1).astype(np.int)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_115": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.astype(np.uint8)",
                    "possible_values": []
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.astype(np.uint8)",
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "dataset": {
                    "value": "Dataset(impth, eval=eval, duplicate_dataset=duplicate_dataset, use_seg_ratio=use_seg_ratio, use_cls=use_cls)",
                    "possible_values": []
                }
            },
            "from_numpy_406": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label.astype(np.uint8)",
                    "possible_values": []
                }
            },
            "DataLoader_419": {
                "dataset": {
                    "value": "Dataset_cls(impth, eval=eval, duplicate_dataset=duplicate_dataset)",
                    "possible_values": []
                }
            },
            "DataLoader_360": {
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "Dataset_wsi(wsipth, p)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_65": {
                "input": {
                    "value": "(0, 1)",
                    "possible_values": []
                }
            },
            "randint_107": {
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "randint_206": {
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "randint_398": {
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            }
        }
    },
    "utils/eval.py": {
        "sklearn": {
            "f1_score_122": {
                "variable": {
                    "value": "f1mic",
                    "possible_values": []
                },
                "y_true": {
                    "value": "p.flatten()",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "g.flatten()",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "possible_values": []
                }
            },
            "f1_score_123": {
                "variable": {
                    "value": "f1mac",
                    "possible_values": []
                },
                "y_true": {
                    "value": "p.flatten()",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "g.flatten()",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "argmax_188": {
                "variable": {
                    "value": "pred_cls",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cls",
                    "possible_values": [
                        [
                            "model.fc(feature_maps_l)",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred_cls, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "pred_src",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_src",
                    "possible_values": [
                        [
                            "F.interpolate(pred_src, (args.tile_h * args.scan_resize, args.tile_w * args.scan_resize))",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred_src, (int(m * args.tile_h), int(m * args.tile_h)))",
                            "Call"
                        ],
                        [
                            "pred_src.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred_src, -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(args.tile_h * args.scan_resize, args.tile_w * args.scan_resize)",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "variable": {
                    "value": "pred_src",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_src",
                    "possible_values": [
                        [
                            "F.interpolate(pred_src, (args.tile_h * args.scan_resize, args.tile_w * args.scan_resize))",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred_src, (int(m * args.tile_h), int(m * args.tile_h)))",
                            "Call"
                        ],
                        [
                            "pred_src.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred_src, -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(m * args.tile_h), int(m * args.tile_h))",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluation.py": {
        "sklearn": {
            "accuracy_score_30": {
                "variable": {
                    "value": "my_metrics[val_acc]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "f1_score_36": {
                "variable": {
                    "value": "my_metrics[val_f1_micro]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "possible_values": []
                }
            },
            "f1_score_37": {
                "variable": {
                    "value": "my_metrics[val_f1_macro]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            },
            "accuracy_score_73": {
                "variable": {
                    "value": "my_metrics[val_acc]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "f1_score_79": {
                "variable": {
                    "value": "my_metrics[val_f1_micro]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "possible_values": []
                }
            },
            "f1_score_80": {
                "variable": {
                    "value": "my_metrics[val_f1_macro]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            },
            "confusion_matrix_82": {
                "variable": {
                    "value": "my_metrics[confusion_matrix]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "f1_score_32": {
                "variable": {
                    "value": "my_metrics[val_f1]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "possible_values": []
                }
            },
            "f1_score_75": {
                "variable": {
                    "value": "my_metrics[val_f1]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "argmax_20": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_src",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "argmax_63": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "possible_values": [
                        [
                            "model.fc(feature_maps_l)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/preprocessing.py": {
        "sklearn": {
            "KMeans_291": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_colors",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "softmax_165": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "torch.from_numpy(pred)",
                            "Call"
                        ],
                        [
                            "torch.softmax(pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred.numpy()",
                            "Call"
                        ],
                        [
                            "threshold_probs(pred)",
                            "Call"
                        ],
                        [
                            "255 * np.eye(args.num_classes)[pred][..., 1:].astype(np.uint8)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "as_tensor_40": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "torch.as_tensor(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_41": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.as_tensor(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "torch.from_numpy(pred)",
                            "Call"
                        ],
                        [
                            "torch.softmax(pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred.numpy()",
                            "Call"
                        ],
                        [
                            "threshold_probs(pred)",
                            "Call"
                        ],
                        [
                            "255 * np.eye(args.num_classes)[pred][..., 1:].astype(np.uint8)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/regiontools.py": {
        "sklearn": {
            "KMeans_89": {
                "variable": {
                    "value": "km_out",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "possible_values": [
                        [
                            "min_clusters",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_179": {
                "variable": {
                    "value": "cfs",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "possible_values": [
                        [
                            "np.asarray(gts)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds_c",
                    "possible_values": [
                        [
                            "np.asarray(preds_c)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "argmax_162": {
                "variable": {
                    "value": "pred_cls",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cls",
                    "possible_values": [
                        [
                            "torch.argmax(pred_cls, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "export_tensorboard_ynet.py": {
        "tensorflow": {
            "summary_iterator_13": {
                "path": {
                    "value": "path",
                    "possible_values": [
                        [
                            "glob.glob(paths, recursive=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "eval_gleason.py": {
        "torch": {
            "load_70": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "f'{model_folder}/model_{dataset_name}_{seg_and_cls}_{use_seg_ratio}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "pred_map",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.num_classes, IMAGE_SIZE, IMAGE_SIZE)",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_map",
                    "possible_values": [
                        [
                            "torch.zeros((args.num_classes, IMAGE_SIZE, IMAGE_SIZE))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "input": {
                    "value": "_models[t].c1(_models[t](patch.cuda()))[1].cpu()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "input": {
                    "value": "_models[t].c1(_models[t](patch.cuda()))[1].cpu()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "input": {
                    "value": "_models[t].c1(_models[t](patch.cuda()))[1].cpu()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "models/losses.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "mapped_weights",
                    "possible_values": []
                },
                "data": {
                    "value": "mapped_weights",
                    "possible_values": [
                        [
                            "list(map(lambda u: self.weights[np.round(u * 10 ** 2) / 10 ** 2], y.tolist()))",
                            "Call"
                        ],
                        [
                            "torch.tensor(mapped_weights, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "MSELoss_72": {
                "variable": {
                    "value": "self.criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "self.criterion(x, y)",
                    "possible_values": []
                }
            },
            "log_softmax_134": {
                "variable": {
                    "value": "logpt",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_165": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_166": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "y.unsqueeze_(0).float()",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "possible_values": []
                }
            },
            "softmax_230": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_232": {
                "variable": {
                    "value": "y_1h",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_237": {
                "variable": {
                    "value": "fps",
                    "possible_values": []
                },
                "input": {
                    "value": "x * (1 - y_1h)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dims",
                    "possible_values": [
                        [
                            "(0, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "(0,) + tuple(range(2, y.ndimension()))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_238": {
                "variable": {
                    "value": "fns",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - x) * y_1h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dims",
                    "possible_values": [
                        [
                            "(0, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "(0,) + tuple(range(2, y.ndimension()))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_257": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "F.softmax(output, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_288": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_296": {
                "variable": {
                    "value": "intersection",
                    "possible_values": []
                },
                "input": {
                    "value": "x * y_1h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dims",
                    "possible_values": [
                        [
                            "(0, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "(0,) + tuple(range(2, y.ndimension()))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_85": {
                "input": {
                    "value": "torch.log(torch.cosh(ey_t + 1e-12))",
                    "possible_values": []
                }
            },
            "mean_94": {
                "input": {
                    "value": "ey_t * torch.tanh(ey_t)",
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "2 * ey_t / (1 + torch.exp(-ey_t)) - ey_t",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "self.weights",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "self.weights",
                    "possible_values": []
                }
            },
            "cross_entropy_180": {
                "input": {
                    "value": "x_hn",
                    "possible_values": [
                        [
                            "x.index_select(0, idxs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_hn",
                    "possible_values": [
                        [
                            "y.index_select(0, idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_205": {
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "is_available_252": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "args.num_classes",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_24": {
                "reduction": {
                    "value": "params.reduction",
                    "possible_values": []
                },
                "weight": {
                    "value": "params.weights",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "params.xent_ignore",
                    "possible_values": []
                }
            },
            "BCELoss_25": {
                "reduction": {
                    "value": "params.reduction",
                    "possible_values": []
                }
            },
            "MSELoss_33": {
                "reduction": {
                    "value": "params.reduction",
                    "possible_values": []
                }
            },
            "L1Loss_35": {
                "reduction": {
                    "value": "params.reduction",
                    "possible_values": []
                }
            },
            "log_85": {
                "input": {
                    "value": "torch.cosh(ey_t + 1e-12)",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_193": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_entropy_195": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(y.unsqueeze_(0).float(), mode='nearest', scale_factor=self.scale_factor).long().squeeze_(0)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weights",
                    "possible_values": []
                }
            },
            "sum_236": {
                "input": {
                    "value": "x * y_1h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dims",
                    "possible_values": [
                        [
                            "(0, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "(0,) + tuple(range(2, y.ndimension()))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_250": {
                "*size": {
                    "value": "args.num_classes",
                    "possible_values": []
                }
            },
            "eye_290": {
                "n": {
                    "value": "args.num_classes",
                    "possible_values": []
                }
            },
            "sum_297": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dims",
                    "possible_values": [
                        [
                            "(0, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "(0,) + tuple(range(2, y.ndimension()))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cosh_85": {
                "input": {
                    "value": "ey_t + 1e-12",
                    "possible_values": []
                }
            },
            "tanh_94": {
                "input": {
                    "value": "ey_t",
                    "possible_values": [
                        [
                            "y_t - y_prime_t",
                            "BinOp"
                        ],
                        [
                            "y_t - y_prime_t",
                            "BinOp"
                        ],
                        [
                            "y_t - y_prime_t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_entropy_179": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=self.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(y.unsqueeze_(0).float(), mode='nearest', scale_factor=self.scale_factor).long().squeeze_(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "num_inst",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_103": {
                "input": {
                    "value": "-ey_t",
                    "possible_values": []
                }
            }
        }
    },
    "models/models.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(n_classes, 8, 1)",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_23": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.cbr",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv3x3_bn_relu(fc_dim, fc_dim // 4, 1)",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv_last",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "interpolate_54": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "possible_values": [
                        [
                            "self.conv_last(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.segSize",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.mpconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2)",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_block(3, 8)",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv_last",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_137": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_154": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_features, num_features // 4)",
                    "possible_values": []
                }
            },
            "flatten_164": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.adaptive_max_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "self.cbr(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.mpconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "flatten_25": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.nn.functional.adaptive_max_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "self.cbr(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.mpconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "out_planes",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "n_classes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_45": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "out_ch",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AvgPool2d_81": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "AvgPool2d_134": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "num_features",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features // 4",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "num_features // 4",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "in_filters",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "out_filters",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "models/optimizers.py": {
        "torch": {
            "Adam_13": {
                "params": {
                    "value": "m_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(m.parameters()) + m_list",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "SGD_17": {
                "params": {
                    "value": "m_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(m.parameters()) + m_list",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.beta1",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            }
        }
    },
    "resnet.py": {
        "torch": {
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_165": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_173": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            }
        }
    },
    "resnet_segmask.py": {
        "torch": {
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_166": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_175": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_46": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "flatten_237": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "save_118": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'config': args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/model_{}_{}.pt'.format(args.model_save_pth, args.arch_encoder, epoch)",
                    "possible_values": []
                }
            },
            "nonzero_89": {
                "input": {
                    "value": "is_cls",
                    "possible_values": [
                        [
                            "is_cls.type(torch.bool).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_93": {
                "input": {
                    "value": "~is_cls",
                    "possible_values": []
                }
            }
        }
    },
    "train_cls.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "model.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "models.Flatten()",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_classes",
                    "possible_values": []
                }
            },
            "nonzero_122": {
                "input": {
                    "value": "is_cls",
                    "possible_values": [
                        [
                            "is_cls.type(torch.bool).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_123": {
                "input": {
                    "value": "~is_cls",
                    "possible_values": []
                }
            }
        }
    },
    "train_seg.py": {
        "torch": {
            "argmax_87": {
                "variable": {
                    "value": "loss_seg_",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "model.c1(model(image))[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_88": {
                "input": {
                    "value": "(loss_seg_ == mask).float()",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "argmax_111": {
                "variable": {
                    "value": "loss_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "model.c1(model(image))[1]",
                    "possible_values": []
                }
            },
            "mean_112": {
                "input": {
                    "value": "(loss_seg == mask).float()",
                    "possible_values": []
                }
            }
        }
    },
    "train_seg_and_cls.py": {
        "torch": {
            "save_163": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'config': args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/model_{}_{}_{}.pt'.format(args.model_save_pth, args.arch_encoder, epoch, args.experiment_time)",
                    "possible_values": []
                }
            },
            "nonzero_120": {
                "input": {
                    "value": "is_cls",
                    "possible_values": [
                        [
                            "is_cls.type(torch.bool).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_121": {
                "input": {
                    "value": "~is_cls",
                    "possible_values": []
                }
            }
        }
    },
    "train_seg_and_cls_gleason.py": {
        "torch": {
            "DataLoader_32": {
                "variable": {
                    "value": "iterator_val",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_onlyseg(args.val_image_pth, use_seg_ratio=args.use_seg_ratio, use_cls=args.use_cls, eval=1)",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "iterator_train",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_onlyseg(args.train_image_pth, use_seg_ratio=use_seg_ratio, use_cls=use_cls, eval=0)",
                    "possible_values": []
                }
            },
            "SummaryWriter_115": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "f'{args.experiment_save_pth}/{args.dataset_name}'",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'config': args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f'{args.model_save_pth}/model_{args.dataset_name}_{args.seg_and_cls}_{args.use_seg_ratio}.pt'",
                    "possible_values": []
                }
            },
            "nonzero_139": {
                "input": {
                    "value": "is_cls",
                    "possible_values": [
                        [
                            "is_cls.type(torch.bool).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_140": {
                "input": {
                    "value": "~is_cls",
                    "possible_values": []
                }
            }
        }
    },
    "train_seg_and_cls_train_classifier.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "iterator_val",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_onlyseg(args.val_image_pth, use_seg_ratio=args.use_seg_ratio, use_cls=args.use_cls, eval=1)",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "iterator_train",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset_onlyseg(args.train_image_pth, use_seg_ratio=use_seg_ratio, use_cls=use_cls, eval=0)",
                    "possible_values": []
                }
            },
            "SummaryWriter_109": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "f'{args.experiment_save_pth}/{args.dataset_name}'",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'config': args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f\"{args.model_save_pth}/model_{args.train_image_pth.split('/')[0]}_{args.seg_and_cls}_{args.use_seg_ratio}.pt\"",
                    "possible_values": []
                }
            },
            "nonzero_133": {
                "input": {
                    "value": "is_cls",
                    "possible_values": [
                        [
                            "is_cls.type(torch.bool).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_134": {
                "input": {
                    "value": "~is_cls",
                    "possible_values": []
                }
            }
        }
    },
    "train_ynet.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "model.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(nf, nf // 4)",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "args.num_classes * pool_size * pool_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nf // 4",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "nf // 4",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_classes",
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'config': args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/model_{}_{}.pt'.format(args.model_save_pth, args.arch_encoder, epoch)",
                    "possible_values": []
                }
            },
            "nonzero_92": {
                "input": {
                    "value": "is_cls",
                    "possible_values": [
                        [
                            "is_cls.type(torch.bool).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_93": {
                "input": {
                    "value": "~is_cls",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_123": {
                "variable": {
                    "value": "feature_maps_cls",
                    "possible_values": []
                },
                "*args": {
                    "value": "feature_maps_cls",
                    "possible_values": []
                }
            },
            "flatten_124": {
                "variable": {
                    "value": "feature_maps_cls",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_maps_cls",
                    "possible_values": [
                        [
                            "c1(feature_maps)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.adaptive_max_pool2d(feature_maps_cls, (pool_size, pool_size))",
                            "Call"
                        ],
                        [
                            "torch.flatten(feature_maps_cls, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset_hr.py": {
        "torch": {
            "stack_201": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "dataset": {
                    "value": "Dataset(pth, eval, remove_white, duplicate_dataset)",
                    "possible_values": []
                }
            },
            "stack_292": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "DataLoader_306": {
                "dataset": {
                    "value": "Dataset_eval(metadata, eval, remove_white)",
                    "possible_values": []
                }
            },
            "randint_195": {
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset_ssr.py": {
        "torch": {
            "from_numpy_55": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label.astype(np.uint8)",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "dataset": {
                    "value": "Dataset(impth, eval=eval)",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "dataset": {
                    "value": "Dataset_cls(impth, eval=eval)",
                    "possible_values": []
                }
            },
            "randint_44": {
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "randint_102": {
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            }
        }
    },
    "utils/networks.py": {
        "torch": {
            "load_7": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "possible_values": []
                }
            }
        }
    }
}