{
    "models/kernel_score_estimators.py": {
        "tensorflow": {
            "ConfigProto_56": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_eager_execution_58": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_96": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "unsqueeze_15": {
                "variable": {
                    "value": "x_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "variable": {
                    "value": "x_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "variable": {
                    "value": "x_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "x_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "G_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rbf_kernel(x_row, x_col, kernel_width)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "variable": {
                    "value": "x_samples_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_35": {
                "variable": {
                    "value": "x_basis_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_basis",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((x_samples_expand - x_basis_expand) ** 2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eigen_values.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "eigen_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eigen_vectors.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "grad_K1_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_K1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigen_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nystrom_ext(samples, x, eigen_vectors, eigen_values, kernel_width)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-np.sqrt(M) * torch.matmul(eigen_vectors.transpose(-1, -2), grad_K1_avg) / torch.unsqueeze(eigen_values, dim=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_157": {
                "variable": {
                    "value": "Kinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K + self._eta * torch.eye(M, device=samples.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_159": {
                "variable": {
                    "value": "H_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_K2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_11": {
                "input": {
                    "value": "-torch.sum((x1 - x2) ** 2, dim=-1) / (2 * kernel_width ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[samples, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_113": {
                "variable": {
                    "value": "eigen_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigen_values.view(-1, M)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_118": {
                "variable": {
                    "value": "eigen_cum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigen_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(eigen_values.view(-1, M), dim=0)",
                            "Call"
                        ],
                        [
                            "eigen_arr.flip([-1])",
                            "Call"
                        ],
                        [
                            "eigen_arr / torch.sum(eigen_arr)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "self._n_eigen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "(eigen_cum < self._n_eigen_threshold).int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "variable": {
                    "value": "KxqKinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kxq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gram(x, samples, kernel_width)",
                            "Call"
                        ],
                        [
                            "self.gram(x, samples, kernel_width)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Kinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(K + self._eta * torch.eye(M, device=samples.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_37": {
                "input": {
                    "value": "(x_samples_expand - x_basis_expand) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_40": {
                "input": {
                    "value": "pairwise_dist.view(-1, n_samples * n_basis)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples * n_basis // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "input": {
                    "value": "Kxq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gram(x, samples, kernel_width)",
                            "Call"
                        ],
                        [
                            "self.gram(x, samples, kernel_width)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "eigen_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eigen_vectors.numpy(), device=samples.device)",
                            "Call"
                        ],
                        [
                            "eigen_vectors[..., -self._n_eigen:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_74": {
                "input": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eigen_values.numpy(), device=samples.device)",
                            "Call"
                        ],
                        [
                            "eigen_values[..., -self._n_eigen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "eigen_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(eigen_values.view(-1, M), dim=0)",
                            "Call"
                        ],
                        [
                            "eigen_arr.flip([-1])",
                            "Call"
                        ],
                        [
                            "eigen_arr / torch.sum(eigen_arr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_133": {
                "input": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eigen_values.numpy(), device=samples.device)",
                            "Call"
                        ],
                        [
                            "eigen_values[..., -self._n_eigen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "input": {
                    "value": "Kinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(K + self._eta * torch.eye(M, device=samples.device))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H_dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grad_K2, dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_180": {
                "input": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0 / (Kxx + self._eta - torch.matmul(KxqKinv, Kxq.transpose(-1, -2)))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Kxq, grads) - torch.matmul(KxqKinv + 1.0, torch.squeeze(grad_Kqx2, -2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_94": {
                "n": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.shape[-2]",
                            "Subscript"
                        ],
                        [
                            "samples.shape[-2]",
                            "Subscript"
                        ],
                        [
                            "samples.shape[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "input": {
                    "value": "eigen_vectors.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_K1_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(grad_K1, dim=-3)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_177": {
                "input": {
                    "value": "KxqKinv + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.squeeze(grad_Kqx2, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "(x1 - x2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_157": {
                "n": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.shape[-2]",
                            "Subscript"
                        ],
                        [
                            "samples.shape[-2]",
                            "Subscript"
                        ],
                        [
                            "samples.shape[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "input": {
                    "value": "KxqKinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(Kxq, Kinv)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Kxq.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_178": {
                "input": {
                    "value": "grad_Kqx2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluations/ais.py": {
        "torch": {
            "MultivariateNormal_44": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(dims['input_dim']).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(dims['input_dim']).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_130": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(dims).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(dims).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluations/fid.py": {
        "torch": {
            "from_numpy_118": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_127": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "evaluations/hmc.py": {
        "torch": {
            "randn_like_36": {
                "variable": {
                    "value": "initial_vel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_pos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_54": {
                "variable": {
                    "value": "new_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "accept.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "final_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "initial_pos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_15": {
                "input": {
                    "value": "e_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_prev - e_next",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_15": {
                "input": {
                    "value": "e_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_prev - e_next",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_23": {
                "outputs": {
                    "value": "energy_fn(pos).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.detach()",
                            "Call"
                        ],
                        [
                            "pos + step * vel",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses/dsm.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(train_data, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_data, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-0.3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_23": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_mix_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.exp(-2 * self.log_sigma) * dist",
                            "BinOp"
                        ],
                        [
                            "log_mix_p - self.dim * (np.log(2.0 * np.pi) + self.log_sigma)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_23": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_84": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_89": {
                "input": {
                    "value": "dlogp + kernel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "data": {
                    "value": "-0.3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_18": {
                "input": {
                    "value": "self.train_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_19": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_87": {
                "outputs": {
                    "value": "logp.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "perturbed_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples + vector",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_21": {
                "input": {
                    "value": "-2 * self.log_sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_40": {
                "input": {
                    "value": "flattened_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(train_data_iter)",
                            "Call"
                        ],
                        [
                            "flattened_X + torch.randn_like(flattened_X) * noise_sigma",
                            "BinOp"
                        ],
                        [
                            "next(test_data_iter)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_55": {
                "input": {
                    "value": "flattened_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(train_data_iter)",
                            "Call"
                        ],
                        [
                            "flattened_X + torch.randn_like(flattened_X) * noise_sigma",
                            "BinOp"
                        ],
                        [
                            "next(test_data_iter)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "losses/score_matching.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_16": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_33": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_51": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_22": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_34": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(logp, samples)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_52": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(logp, samples)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_23": {
                "outputs": {
                    "value": "grad1[:, i].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_40": {
                "outputs": {
                    "value": "grad1[:, i].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_17": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(logp, samples)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_62": {
                "outputs": {
                    "value": "grad1[:, i].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_64": {
                "outputs": {
                    "value": "grad1[:, i].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "losses/sliced_sm.py": {
        "torch": {
            "sum_24": {
                "variable": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_69": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_74": {
                "variable": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_88": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_93": {
                "variable": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_107": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_111": {
                "variable": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_126": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_129": {
                "variable": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_132": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_10": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_40": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_23": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_28": {
                "outputs": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_51": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_56": {
                "outputs": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_70": {
                "input": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "variable"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True) * np.sqrt(vectors.shape[-1])",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "variable"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_73": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_76": {
                "outputs": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_91": {
                "outputs": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "grad1 * grad1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_94": {
                "outputs": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "variable"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True) * np.sqrt(vectors.shape[-1])",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "variable"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_113": {
                "outputs": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "grad1 * grad1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_131": {
                "outputs": {
                    "value": "gradv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_53": {
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, dup_samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, dup_samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "score_net(dup_samples)",
                            "Call"
                        ],
                        [
                            "score_net(dup_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "grad1 * vectors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_14": {
                "input": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "variable"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True) * np.sqrt(vectors.shape[-1])",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "variable"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "losses/vae.py": {
        "torch": {
            "randn_102": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mean_z.shape[0] * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "mean_z.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_22": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_57": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_82": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "elbos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elbos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(elbos, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_15": {
                "input": {
                    "value": "mean_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((mean_z + 1) / 2.0, 0, 1)",
                            "Call"
                        ],
                        [
                            "mean_z.unsqueeze(0).expand(k, -1, -1).contiguous().view(-1, mean_z.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_26": {
                "variable": {
                    "value": "mean_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(mean_z + 1) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(X + 1) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_28": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((mean_z + 1) / 2.0, 0, 1)",
                            "Call"
                        ],
                        [
                            "mean_z.unsqueeze(0).expand(k, -1, -1).contiguous().view(-1, mean_z.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((X + 1) / 2.0, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_112": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expand_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.unsqueeze(0).expand(k, -1, -1, -1, -1).contiguous().view(-1, X.shape[1], X.shape[2], X.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logsumexp_120": {
                "input": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon + n_logph - n_logq",
                            "BinOp"
                        ],
                        [
                            "elbo.view(k, X.shape[0])",
                            "Call"
                        ],
                        [
                            "recon + n_logph - n_logq",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_126": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((mean_z + 1) / 2.0, 0, 1)",
                            "Call"
                        ],
                        [
                            "mean_z.unsqueeze(0).expand(k, -1, -1).contiguous().view(-1, mean_z.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_142": {
                "input": {
                    "value": "elbos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(elbos, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_133": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ],
                        [
                            "decoder(h)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "losses/wae.py": {
        "torch": {
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_83": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_78": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_all_86": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/dkef.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "self.kernel_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_kernels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.log_lambd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.M, self.M)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.M,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "kernel_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernel_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_230": {
                "variable": {
                    "value": "S_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_231": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "S_r + kxzS_r.sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(grad1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.relu(M)) * v + self.kxz * S_r",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(torch.relu(M))[:, :, None] * v + grad1_normnode * S_r[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_231": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_241": {
                "variable": {
                    "value": "kernel_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernel_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_255": {
                "variable": {
                    "value": "kernel_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernel_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(sigma_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_396": {
                "variable": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(sigma_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_415": {
                "variable": {
                    "value": "self.kxz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 / (2 * torch.pow(10.0, self.log_sigma)) * self.diffsq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_440": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kxz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_440": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_449": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1_normnode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 / torch.pow(10.0, self.log_sigma) * self.diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_449": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_478": {
                "variable": {
                    "value": "test_Z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Kernel_approx_bp(self.input_dim, hidden_dim=hidden_dim, add_skip=add_skip, sigma_init=sigma_list[i], pretrained_encoder=pretrained_encoder) for i in range(self.num_kernels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Kernel(self.input_dim, hidden_dim=hidden_dim, add_skip=add_skip, sigma_init=sigma_list[i], pretrained_encoder=pretrained_encoder) for i in range(self.num_kernels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "train_Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((M, self.input_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "train_Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.M) / self.M",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_306": {
                "input": {
                    "value": "-1 / (2 * torch.pow(10.0, self.log_sigma)) * diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_310": {
                "input": {
                    "value": "-1 / (2 * torch.pow(10.0, self.log_sigma)) * diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_319": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_435": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kxz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_436": {
                "variable": {
                    "value": "S_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-x / self.q0_sigma ** 2",
                            "BinOp"
                        ],
                        [
                            "-x / self.q0_sigma ** 2",
                            "BinOp"
                        ],
                        [
                            "grad1 + kxz_gradx.sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(self.kxz)",
                            "Call"
                        ],
                        [
                            "self.kxz * grad1",
                            "BinOp"
                        ],
                        [
                            "grad1[:, :, None] * grad1_normnode",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_437": {
                "variable": {
                    "value": "S_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "S_r + kxzS_r.sum(1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(grad1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.relu(M)) * v + self.kxz * S_r",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(torch.relu(M))[:, :, None] * v + grad1_normnode * S_r[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_484": {
                "variable": {
                    "value": "test_input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_485": {
                "variable": {
                    "value": "test_input_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_494": {
                "variable": {
                    "value": "grad2_std",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[autograd.grad(grad_std[:, d].sum(), test_input_v, retain_graph=True)[0][:, d] for d in range(dim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_496": {
                "variable": {
                    "value": "grad2_S_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad2_kingma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_522": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_524": {
                "variable": {
                    "value": "test_Z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_529": {
                "variable": {
                    "value": "grad2_std",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[autograd.grad(grad_std[:, :, d].sum(), expanded_test_input, retain_graph=True)[0][:, :, d] for d in range(dim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_531": {
                "variable": {
                    "value": "grad2_S_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad2_kingma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_540": {
                "variable": {
                    "value": "grad2_hutch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad2_kingma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_576": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_581": {
                "variable": {
                    "value": "grad2_std",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[autograd.grad(grad_std[:, d].sum(), test_input, retain_graph=True)[0][:, d] for d in range(dim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_583": {
                "variable": {
                    "value": "grad2_S_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad2_kingma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "num_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_48": {
                "data": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "kernel_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernel_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_137": {
                "outputs": {
                    "value": "self.q0(data).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_206": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_206": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_222": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_228": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "data": {
                    "value": "sigma_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_321": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softplus_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_323": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softplus_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_325": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_396": {
                "data": {
                    "value": "sigma_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_448": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_469": {
                "input": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_542": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(output.sum(), test_input_v, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(energy_std.sum(), expanded_test_input, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(phi_x_std.sum(), test_input, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sign_542": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_568": {
                "variable": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.randn(*list(m.weight.size())) / np.sqrt(m.weight.size(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "(M, self.input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_like_56": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_56": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_122": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.log_lambd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_122": {
                "n": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "G.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_224": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.randn(*list(m.weight.size())) / np.sqrt(m.weight.size(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_402": {
                "variable": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.randn(*list(m.weight.size())) / np.sqrt(m.weight.size(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_419": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_442": {
                "input": {
                    "value": "torch.relu(M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_443": {
                "input": {
                    "value": "torch.relu(-M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_447": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_493": {
                "outputs": {
                    "value": "output.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 15, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_528": {
                "outputs": {
                    "value": "energy_std.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "expanded_test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_input[:, None, :].expand(-1, 200, -1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_571": {
                "variable": {
                    "value": "m.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.randn(*list(m.bias.size())) / np.sqrt(m.bias.size(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_580": {
                "outputs": {
                    "value": "phi_x_std.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 15, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, dim, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_582": {
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_582": {
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_62": {
                "outputs": {
                    "value": "self.q0(data).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_164": {
                "outputs": {
                    "value": "kxz.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_169": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_263": {
                "input": {
                    "value": "alpha[None, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_296": {
                "variable": {
                    "value": "m.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.randn(*list(m.bias.size())) / np.sqrt(m.bias.size(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "m.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.randn(*list(m.bias.size())) / np.sqrt(m.bias.size(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_421": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_442": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad1 * self.kxz",
                            "BinOp"
                        ],
                        [
                            "-grad1 / torch.pow(10.0, self.log_sigma)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_443": {
                "input": {
                    "value": "-M",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_450": {
                "input": {
                    "value": "torch.relu(M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_451": {
                "input": {
                    "value": "torch.relu(-M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_488": {
                "input": {
                    "value": "test_input_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 15, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "sign_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_544": {
                "outputs": {
                    "value": "grad1v.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "expanded_test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_input[:, None, :].expand(-1, 200, -1)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_556": {
                "input": {
                    "value": "energy_std - energy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_557": {
                "input": {
                    "value": "grad_std - grad1_S",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_557": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_586": {
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_586": {
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_597": {
                "input": {
                    "value": "phi_x_std - phi_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_598": {
                "input": {
                    "value": "grad_std - grad1_kingma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_58": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_208": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_274": {
                "input": {
                    "value": "alpha[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_275": {
                "input": {
                    "value": "alpha[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_306": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_310": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_415": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_450": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad1 * self.kxz",
                            "BinOp"
                        ],
                        [
                            "-grad1 / torch.pow(10.0, self.log_sigma)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_451": {
                "input": {
                    "value": "-M",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_534": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.forward(test_input, test_Z)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_535": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.forward(test_input, test_Z)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_90": {
                "outputs": {
                    "value": "kxz.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_95": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "input": {
                    "value": "kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].alpha_forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].alpha_forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_179": {
                "outputs": {
                    "value": "kxz_gradxv.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_494": {
                "outputs": {
                    "value": "grad_std[:, d].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 15, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_529": {
                "outputs": {
                    "value": "grad_std[:, :, d].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "expanded_test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_input[:, None, :].expand(-1, 200, -1)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_581": {
                "outputs": {
                    "value": "grad_std[:, d].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 15, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, dim, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_147": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "input": {
                    "value": "kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].alpha_forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].alpha_forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_186": {
                "outputs": {
                    "value": "kxz_gradxv.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_510": {
                "input": {
                    "value": "grad_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(output.sum(), test_input_v, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(energy_std.sum(), expanded_test_input, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(phi_x_std.sum(), test_input, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_511": {
                "input": {
                    "value": "grad_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(output.sum(), test_input_v, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(energy_std.sum(), expanded_test_input, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(phi_x_std.sum(), test_input, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "input": {
                    "value": "kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].alpha_forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].alpha_forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_84": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_106": {
                "outputs": {
                    "value": "kxz_gradxv.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_77": {
                "input": {
                    "value": "kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].alpha_forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([kernel_weight[j] * self.kernel[j].alpha_forward(data, self.z) for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ],
                        [
                            "kernel(x_v, self.z)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_99": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_113": {
                "outputs": {
                    "value": "kxz_gradxv.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_169": {
                "outputs": {
                    "value": "kxz_gradx[:, :, j].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_172": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_95": {
                "outputs": {
                    "value": "kxz_gradx[:, :, j].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data + vectors",
                            "BinOp"
                        ],
                        [
                            "data.unsqueeze(1).expand(-1, self.M, -1)",
                            "Call"
                        ],
                        [
                            "data.unsqueeze(1).repeat(1, self.M, 1)",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data + vectors",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_118": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_191": {
                "input": {
                    "value": "kxz_gradx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "sum([kernel_weight[j] * grad1s[j] for j in range(self.num_kernels)])",
                            "Call"
                        ],
                        [
                            "sum([grad[0] for grad in grads])",
                            "Call"
                        ],
                        [
                            "autograd.grad(kxz.sum(), data, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/gmm.py": {
        "torch": {
            "Parameter_10": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_size, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_size, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_10": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/inception.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_100": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/nice_approxbp.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_53": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_58": {
                "variable": {
                    "value": "new_grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-grad1",
                            "UnaryOp"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "linear_59": {
                "variable": {
                    "value": "new_grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(T[:, :, None] * U[:, None, :] + U[:, :, None] * T[:, None, :]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "S_r[:, :, None] * S_r[:, None, :] - S_i[:, :, None] * S_i[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "-grad2",
                            "UnaryOp"
                        ],
                        [
                            "-torch.ones_like(self.output)",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad2, grad2.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "linear_63": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(T, self.grad, bias=None)",
                            "Call"
                        ],
                        [
                            "T * self.grad1",
                            "BinOp"
                        ],
                        [
                            "M * v + T",
                            "BinOp"
                        ],
                        [
                            "T * self.grad1",
                            "BinOp"
                        ],
                        [
                            "M_diag * v",
                            "BinOp"
                        ],
                        [
                            "self._permutate(T, T.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "randn_like_64": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(T, self.grad, bias=None)",
                            "Call"
                        ],
                        [
                            "T * self.grad1",
                            "BinOp"
                        ],
                        [
                            "M * v + T",
                            "BinOp"
                        ],
                        [
                            "T * self.grad1",
                            "BinOp"
                        ],
                        [
                            "M_diag * v",
                            "BinOp"
                        ],
                        [
                            "self._permutate(T, T.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_64": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_66": {
                "variable": {
                    "value": "new_grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-grad1",
                            "UnaryOp"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "linear_70": {
                "variable": {
                    "value": "S_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(S_r, self.grad, bias=None)",
                            "Call"
                        ],
                        [
                            "F_r * v + S_r * self.grad1",
                            "BinOp"
                        ],
                        [
                            "S_r * self.grad1",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ],
                        [
                            "self._permutate(S_r, S_r.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "linear_71": {
                "variable": {
                    "value": "S_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(S_i, self.grad, bias=None)",
                            "Call"
                        ],
                        [
                            "F_i * v + S_i * self.grad1",
                            "BinOp"
                        ],
                        [
                            "S_i * self.grad1",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(self.output).sign() * torch.ones_like(self.output)",
                            "BinOp"
                        ],
                        [
                            "self._permutate(S_i, S_i.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "linear_72": {
                "variable": {
                    "value": "new_grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-grad1",
                            "UnaryOp"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "-self.output",
                            "UnaryOp"
                        ],
                        [
                            "self._permutate(grad1, grad1.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(self.output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softplus_90": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_110": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(T, self.grad, bias=None)",
                            "Call"
                        ],
                        [
                            "T * self.grad1",
                            "BinOp"
                        ],
                        [
                            "M * v + T",
                            "BinOp"
                        ],
                        [
                            "T * self.grad1",
                            "BinOp"
                        ],
                        [
                            "M_diag * v",
                            "BinOp"
                        ],
                        [
                            "self._permutate(T, T.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_110": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_123": {
                "variable": {
                    "value": "F_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "variable": {
                    "value": "F_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(-M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_125": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.relu(M))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_125": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_159": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(T, self.grad, bias=None)",
                            "Call"
                        ],
                        [
                            "T * self.grad1",
                            "BinOp"
                        ],
                        [
                            "M * v + T",
                            "BinOp"
                        ],
                        [
                            "T * self.grad1",
                            "BinOp"
                        ],
                        [
                            "M_diag * v",
                            "BinOp"
                        ],
                        [
                            "self._permutate(T, T.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_159": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_365": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_499": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_500": {
                "variable": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_513": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_514": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_515": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_529": {
                "variable": {
                    "value": "S_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_530": {
                "variable": {
                    "value": "S_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_531": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_557": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_558": {
                "variable": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_565": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_566": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_567": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_623": {
                "variable": {
                    "value": "stdevs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_625": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "self.grad1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_143": {
                "variable": {
                    "value": "self.grad1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_170": {
                "input": {
                    "value": "-self.scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(x1), m1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "gradm1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gradm1, torch.zeros(gradm1.shape[0], self.half_size, device=grad1.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "gradm2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gradm2, torch.zeros(gradm2.shape[0], self.half_size, device=grad1.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "gradm1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gradm1, torch.zeros(gradm1.shape[0], self.half_size, device=grad1.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "Tm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Tm, torch.zeros(Tm.shape[0], self.half_size, device=grad1.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "Um",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Um, torch.zeros(Um.shape[0], self.half_size, device=grad1.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "gradm1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(gradm1.shape[0], self.half_size, device=grad1.device), gradm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "Tm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(Tm.shape[0], self.half_size, device=grad1.device), Tm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "Um",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(Um.shape[0], self.half_size, device=grad1.device), Um]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "gradm1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gradm1, torch.zeros(gradm1.shape[0], self.half_size, device=grad1.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "S_rm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[S_rm, torch.zeros(S_rm.shape[0], self.half_size, device=grad1.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_350": {
                "variable": {
                    "value": "S_im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[S_im, torch.zeros(S_im.shape[0], self.half_size, device=grad1.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "gradm1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(gradm1.shape[0], self.half_size, device=grad1.device), gradm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "S_rm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(S_rm.shape[0], self.half_size, device=grad1.device), S_rm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "S_im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(S_im.shape[0], self.half_size, device=grad1.device), S_im]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_380": {
                "variable": {
                    "value": "to_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.identity(len(permutation))[:, perm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_383": {
                "variable": {
                    "value": "inv_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.identity(len(permutation))[:, inv_perm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_like_434": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_434": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_458": {
                "variable": {
                    "value": "S_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_593": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_611": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_640": {
                "variable": {
                    "value": "grad2_std",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[autograd.grad(grad_std[:, d].sum(), test_input, retain_graph=True)[0] for d in range(dim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_641": {
                "variable": {
                    "value": "grad2_std_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[autograd.grad(grad_std[:, d].sum(), test_input, retain_graph=True)[0][:, d] for d in range(dim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_642": {
                "variable": {
                    "value": "grad2_hutch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_652": {
                "variable": {
                    "value": "grad2_TU_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_659": {
                "variable": {
                    "value": "grad2_S_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_672": {
                "variable": {
                    "value": "grad2_hutch_acc_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.diag(grad2_hutch_acc[i]) for i in range(nsamples)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_673": {
                "variable": {
                    "value": "grad2_TU_acc_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.diag(grad2_TU_acc[i]) for i in range(nsamples)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_674": {
                "variable": {
                    "value": "grad2_S_acc_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.diag(grad2_S_acc[i]) for i in range(nsamples)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_65": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v + F.linear(U, self.grad, bias=None)",
                            "BinOp"
                        ],
                        [
                            "v + U * self.grad1",
                            "BinOp"
                        ],
                        [
                            "v + U * self.grad1",
                            "BinOp"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "self._permutate(U, U.shape[1], inv=not inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(self.output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_123": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.grad2 * grad1",
                            "BinOp"
                        ],
                        [
                            "self.grad2 * grad1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_124": {
                "input": {
                    "value": "-M",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m2, torch.zeros_like(x2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "gradm1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(gradm1.shape[0], self.half_size, device=grad1.device), gradm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "gradm2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(gradm2.shape[0], self.half_size, device=grad1.device), gradm2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_619": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_619": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_622": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_like_646": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(energy_std.sum(), test_input)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(energy.sum(), test_input)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(energy.sum(), test_input, create_graph=True, retain_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sign_646": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_149": {
                "input": {
                    "value": "-self.scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_413": {
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_433": {
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_459": {
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_459": {
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_597": {
                "outputs": {
                    "value": "energy_std.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 784, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, 2, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ],
                        [
                            "torch.randn(nsamples, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_613": {
                "outputs": {
                    "value": "energy.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 784, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, 2, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ],
                        [
                            "torch.randn(nsamples, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_639": {
                "outputs": {
                    "value": "energy.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 784, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, 2, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ],
                        [
                            "torch.randn(nsamples, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_15": {
                "input": {
                    "value": "-inputs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_19": {
                "input": {
                    "value": "1 - inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_146": {
                "input": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_149": {
                "input": {
                    "value": "-self.scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_286": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, :self.half_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_304": {
                "*size": {
                    "value": "gradm1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "*size": {
                    "value": "gradm2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "*size": {
                    "value": "gradm1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "*size": {
                    "value": "Tm.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_327": {
                "*size": {
                    "value": "Um.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_333": {
                "*size": {
                    "value": "gradm1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "*size": {
                    "value": "Tm.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "*size": {
                    "value": "Um.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_348": {
                "*size": {
                    "value": "gradm1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "*size": {
                    "value": "S_rm.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_350": {
                "*size": {
                    "value": "S_im.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_356": {
                "*size": {
                    "value": "gradm1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "*size": {
                    "value": "S_rm.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "*size": {
                    "value": "S_im.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_603": {
                "input": {
                    "value": "energy_std - energy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_603": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_604": {
                "input": {
                    "value": "grad_std - grad1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_604": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_605": {
                "input": {
                    "value": "recon - test_input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_615": {
                "input": {
                    "value": "grad_std - grad1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_627": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_637": {
                "*size": {
                    "value": "nsamples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_647": {
                "outputs": {
                    "value": "(grad_std * v).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 784, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, 2, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ],
                        [
                            "torch.randn(nsamples, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_672": {
                "input": {
                    "value": "grad2_hutch_acc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_673": {
                "input": {
                    "value": "grad2_TU_acc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_674": {
                "input": {
                    "value": "grad2_S_acc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_699": {
                "input": {
                    "value": "tr_est_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad2_std_diag.sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_700": {
                "input": {
                    "value": "tr_est_std - tr_est_kingma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_701": {
                "input": {
                    "value": "tr_est_std - tr_est_hutch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_702": {
                "input": {
                    "value": "tr_est_std - tr_est_TU",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_703": {
                "input": {
                    "value": "tr_est_std - tr_est_S",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_706": {
                "input": {
                    "value": "grad_std - grad1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_706": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_289": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, self.half_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_311": {
                "*size": {
                    "value": "gradm1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "*size": {
                    "value": "gradm2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.half_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_640": {
                "outputs": {
                    "value": "grad_std[:, d].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 784, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, 2, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ],
                        [
                            "torch.randn(nsamples, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_408": {
                "data": {
                    "value": "dim * 0.5 * np.log(2 * np.pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_408": {
                "input": {
                    "value": "X ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_641": {
                "outputs": {
                    "value": "grad_std[:, d].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(100, 784, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, 2, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(100, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ],
                        [
                            "torch.randn(nsamples, dim, requires_grad=True).to(device) * stdevs + means",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_398": {
                "data": {
                    "value": "dim * 0.5 * np.log(2 * np.pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_399": {
                "input": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/vae.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784 + self.z_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "Xz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784 + self.eps_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_84": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.eps_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "X_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flattened_X, eps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.channels, self.nef * 1, 5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((self.image_size // 2 ** 4) ** 2 * self.nef * 8, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.ndf * 8 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.ndf * 8, self.ndf * 4, 5, stride=2, padding=2, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, self.channels, self.image_size, self.image_size) * -0.602",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.zfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_dim, self.image_size ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.channels + 1, self.nef * 1, 5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((self.image_size // 2 ** 4) ** 2 * self.nef * 8, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "Xz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "self.noise_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.eps_dim, self.image_size ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.channels + 1, self.nef * 1, 5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((self.image_size // 2 ** 4) ** 2 * self.nef * 8, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_223": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.eps_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "noisy_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, noise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "784 + self.z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "784 + self.eps_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "(self.image_size // 2 ** 4) ** 2 * self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_136": {
                "in_channels": {
                    "value": "self.ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_138": {
                "in_channels": {
                    "value": "self.ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_140": {
                "in_channels": {
                    "value": "self.ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_142": {
                "in_channels": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.image_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softplus_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "self.channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_179": {
                "in_features": {
                    "value": "(self.image_size // 2 ** 4) ** 2 * self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "self.eps_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.image_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "self.channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "(self.image_size // 2 ** 4) ** 2 * self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_218": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_145": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/wae.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.channels, self.nef * 1, 5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((self.image_size // 2 ** 4) ** 2 * self.nef * 8, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.ndf * 8 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.ndf * 8, self.ndf * 4, 5, stride=2, padding=2, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.zfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_dim, self.image_size ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, self.nef * 1, 5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((self.image_size // 2 ** 4) ** 2 * self.nef * 8, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "(self.image_size // 2 ** 4) ** 2 * self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_109": {
                "in_channels": {
                    "value": "self.ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_111": {
                "in_channels": {
                    "value": "self.ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_113": {
                "in_channels": {
                    "value": "self.ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_115": {
                "in_channels": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.image_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softplus_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "self.nef * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "self.nef * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "self.nef * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "(self.image_size // 2 ** 4) ** 2 * self.nef * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runners/dkef_runner.py": {
        "torch": {
            "DataLoader_167": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(val_data).float()",
                            "Call"
                        ],
                        [
                            "SmallDataset(val_data + torch.randn_like(val_data) * 0.05)",
                            "Call"
                        ],
                        [
                            "SmallDataset(np.random.randn(540, self.args.scalability_dim).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "dataset[-(test_data_size + val_data_size):-test_data_size]",
                            "Subscript"
                        ],
                        [
                            "self.apply_whiten(val_data, compute_W=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "val_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(val_data)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_data).float()",
                            "Call"
                        ],
                        [
                            "SmallDataset(train_data + torch.randn_like(train_data) * 0.05)",
                            "Call"
                        ],
                        [
                            "SmallDataset(np.random.randn(4860, self.args.scalability_dim).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "dataset[:-(test_data_size + val_data_size)]",
                            "Subscript"
                        ],
                        [
                            "self.apply_whiten(train_data, compute_W=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "split_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.training.batch_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_292": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lambda_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for (name, param) in dkef.named_parameters() if 'lambd' in name]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_294": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(val_data).float()",
                            "Call"
                        ],
                        [
                            "SmallDataset(val_data + torch.randn_like(val_data) * 0.05)",
                            "Call"
                        ],
                        [
                            "SmallDataset(np.random.randn(540, self.args.scalability_dim).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "dataset[-(test_data_size + val_data_size):-test_data_size]",
                            "Subscript"
                        ],
                        [
                            "self.apply_whiten(val_data, compute_W=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.training.fval_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_295": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_data).float()",
                            "Call"
                        ],
                        [
                            "SmallDataset(test_data + torch.randn_like(test_data) * 0.05)",
                            "Call"
                        ],
                        [
                            "SmallDataset(np.random.randn(600, self.args.scalability_dim).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "dataset[-test_data_size:]",
                            "Subscript"
                        ],
                        [
                            "self.apply_whiten(test_data, compute_W=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.training.fval_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_442": {
                "variable": {
                    "value": "init_z_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "init_z_subset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(train_data, np.random.choice(len(train_data), self.config.model.M, replace=False))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(init_z_subset)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_371": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(val_data).float()",
                            "Call"
                        ],
                        [
                            "SmallDataset(val_data + torch.randn_like(val_data) * 0.05)",
                            "Call"
                        ],
                        [
                            "SmallDataset(np.random.randn(540, self.args.scalability_dim).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "dataset[-(test_data_size + val_data_size):-test_data_size]",
                            "Subscript"
                        ],
                        [
                            "self.apply_whiten(val_data, compute_W=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_379": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(test_data).float()",
                            "Call"
                        ],
                        [
                            "SmallDataset(test_data + torch.randn_like(test_data) * 0.05)",
                            "Call"
                        ],
                        [
                            "SmallDataset(np.random.randn(600, self.args.scalability_dim).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "dataset[-test_data_size:]",
                            "Subscript"
                        ],
                        [
                            "self.apply_whiten(test_data, compute_W=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.dataloader.default_collate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_39": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__203": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "dkef.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSprop_41": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_43": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "runners/nice_runner.py": {
        "torch": {
            "DataLoader_121": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(dataset, val_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_116": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_117": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RMSprop_30": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_32": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "runners/vae_runner.py": {
        "torch": {
            "DataLoader_81": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_269": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_274": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.model.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_320": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_479": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_484": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_563": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_568": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_280": {
                "variable": {
                    "value": "image_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_grid / 2.0 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_594": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gaussian.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_595": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_optimizer(itertools.chain(encoder.parameters(), decoder.parameters()))",
                            "Call"
                        ],
                        [
                            "self.get_optimizer(itertools.chain(imp_encoder.parameters(), decoder.parameters()))",
                            "Call"
                        ],
                        [
                            "optim.SGD(gaussian.parameters(), lr=0.01, momentum=0.5)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[100, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_29": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_59": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_60": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_109": {
                "variable": {
                    "value": "opt_ae",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(decoder.parameters(), imp_encoder.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_111": {
                "variable": {
                    "value": "opt_score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "score.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_283": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_349": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_32": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_78": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_79": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_318": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_389": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}0k.pth'.format(iter))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_474": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_510": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_like_526": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_561": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_like_590": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_34": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_126": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_like_143": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_210": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.model.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[encoder.state_dict(), decoder.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "[imp_encoder.state_dict(), decoder.state_dict(), score.state_dict(), opt_ae.state_dict(), opt_score.state_dict()]",
                            "List"
                        ],
                        [
                            "[imp_encoder.state_dict(), decoder.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint_{}0k.pth'.format(iter)), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}0k.pth'.format((step + 1) // 10000))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[encoder.state_dict(), decoder.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "[imp_encoder.state_dict(), decoder.state_dict(), score.state_dict(), opt_ae.state_dict(), opt_score.state_dict()]",
                            "List"
                        ],
                        [
                            "[imp_encoder.state_dict(), decoder.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint_{}0k.pth'.format(iter)), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_372": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.model.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_178": {
                "variable": {
                    "value": "test_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X + (torch.rand_like(test_X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(test_eps <= test_X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_217": {
                "variable": {
                    "value": "image_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_grid / 2.0 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_219": {
                "variable": {
                    "value": "data_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_grid / 2.0 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_413": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.model.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_222": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ],
                        [
                            "decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_331": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_524": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_588": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_141": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_176": {
                "input": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X + (torch.rand_like(test_X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(test_eps <= test_X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runners/wae_runner.py": {
        "torch": {
            "DataLoader_80": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_246": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_251": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.model.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_296": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_444": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_449": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_99": {
                "variable": {
                    "value": "opt_ae",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(decoder.parameters(), encoder.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_101": {
                "variable": {
                    "value": "opt_score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "score.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_257": {
                "variable": {
                    "value": "image_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_grid / 2.0 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_464": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_58": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_59": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_325": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_31": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_77": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_78": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_294": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_361": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}0k.pth'.format(iter))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_442": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ],
                        [
                            "indices[int(0.8 * num_items):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_like_480": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_33": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_like_130": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_194": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.model.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[encoder.state_dict(), decoder.state_dict(), score.state_dict(), opt_ae.state_dict(), opt_score.state_dict()]",
                            "List"
                        ],
                        [
                            "[encoder.state_dict(), decoder.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint_{}0k.pth'.format(iter)), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}0k.pth'.format((step + 1) // 10000))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_239": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[encoder.state_dict(), decoder.state_dict(), score.state_dict(), opt_ae.state_dict(), opt_score.state_dict()]",
                            "List"
                        ],
                        [
                            "[encoder.state_dict(), decoder.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint_{}0k.pth'.format(iter)), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_344": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.model.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_163": {
                "variable": {
                    "value": "test_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X + (torch.rand_like(test_X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(test_eps <= test_X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_201": {
                "variable": {
                    "value": "image_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_grid / 2.0 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_203": {
                "variable": {
                    "value": "data_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_grid / 2.0 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_381": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.model.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_307": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_478": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_128": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X + (torch.rand_like(X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(eps <= X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_161": {
                "input": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X + (torch.rand_like(test_X) - 0.5) / 128.0",
                            "BinOp"
                        ],
                        [
                            "(test_eps <= test_X).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}