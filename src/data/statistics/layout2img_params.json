{
    "IS.py": {
        "tensorflow": {
            "GraphDef_171": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_173": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_191": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3, [1, 2]), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_169": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_188": {
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "generate_original_image.py": {
        "tensorflow": {}
    },
    "data/cocostuff_loader.py": {
        "torch": {
            "cat_441": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_442": {
                "variable": {
                    "value": "all_objs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_objs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_objs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_443": {
                "variable": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_444": {
                "variable": {
                    "value": "all_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_445": {
                "variable": {
                    "value": "all_triples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_triples)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_446": {
                "variable": {
                    "value": "all_obj_to_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_obj_to_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_obj_to_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_447": {
                "variable": {
                    "value": "all_triple_to_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triple_to_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_triple_to_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_490": {
                "variable": {
                    "value": "imgs_de",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_de",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_de, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_de, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "imgs_de",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_de",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_de, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_de, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/cocostuff_loader_ours.py": {
        "torch": {
            "cat_477": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_478": {
                "variable": {
                    "value": "all_objs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_objs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_objs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_479": {
                "variable": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_480": {
                "variable": {
                    "value": "all_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_481": {
                "variable": {
                    "value": "all_triples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_triples)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_482": {
                "variable": {
                    "value": "all_obj_to_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_obj_to_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_obj_to_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_483": {
                "variable": {
                    "value": "all_triple_to_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triple_to_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_triple_to_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_536": {
                "variable": {
                    "value": "imgs_de",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_de",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_de, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/vg.py": {
        "torch": {
            "cat_221": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_222": {
                "variable": {
                    "value": "all_objs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_objs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_objs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_223": {
                "variable": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_224": {
                "variable": {
                    "value": "all_triples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_triples)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_225": {
                "variable": {
                    "value": "all_obj_to_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_obj_to_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_obj_to_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_226": {
                "variable": {
                    "value": "all_triple_to_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triple_to_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_triple_to_img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/mask_regression.py": {
        "torch": {
            "spectral_norm_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(obj_feat, 128 * 4 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_64": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(obj_feat, 256 * 4 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "spectral_norm_19": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_25": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_31": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_34": {
                "module": {
                    "value": "nn.Conv2d(128, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "spectral_norm_66": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_67": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_72": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_73": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_78": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_79": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "module": {
                    "value": "nn.Conv2d(256, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/mask_regression_part.py": {
        "torch": {
            "spectral_norm_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(obj_feat, 128 * 4 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_63": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(obj_feat, 128 * 4 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_119": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(obj_feat, 256 * 4 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "spectral_norm_19": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_25": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_31": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_34": {
                "module": {
                    "value": "nn.Conv2d(128, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "spectral_norm_65": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_71": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_77": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "module": {
                    "value": "nn.Conv2d(128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "spectral_norm_121": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_122": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_127": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_128": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_133": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_134": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_136": {
                "module": {
                    "value": "nn.Conv2d(256, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/norm_module.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_norm_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(1, b * c, *x.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ],
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ],
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.unsqueeze(-1).unsqueeze(-1).expand(size)",
                            "Call"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.unsqueeze(-1).unsqueeze(-1).expand(size)",
                            "Call"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_norm_84": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_norm_126": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_133": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_158": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_w, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_159": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_w, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/norm_module_part.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_norm_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(1, b * c, *x.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ],
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ],
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.unsqueeze(-1).unsqueeze(-1).expand(size)",
                            "Call"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.unsqueeze(-1).unsqueeze(-1).expand(size)",
                            "Call"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_norm_84": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_norm_126": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_133": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_158": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_w, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_159": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_w, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_196": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_w, num_features * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_197": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_w, num_features * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_216": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_217": {
                "variable": {
                    "value": "bbox1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(bbox1, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_218": {
                "variable": {
                    "value": "bbox2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(bbox2, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "num_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_239": {
                "input": {
                    "value": "bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_241": {
                "input": {
                    "value": "bbox1.unsqueeze(2) * bias1.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_243": {
                "input": {
                    "value": "bbox2.unsqueeze(2) * bias2.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_233": {
                "input": {
                    "value": "bbox1.unsqueeze(2) * weight1.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_235": {
                "input": {
                    "value": "bbox2.unsqueeze(2) * weight2.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_240": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_242": {
                "input": {
                    "value": "bbox1.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_244": {
                "input": {
                    "value": "bbox2.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_232": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_234": {
                "input": {
                    "value": "bbox1.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_236": {
                "input": {
                    "value": "bbox2.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/rcnn_discriminator_app.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "spectral_norm_29": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_38": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_39": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_95": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_104": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_105": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_108": {
                "variable": {
                    "value": "self.l_y_app",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_109": {
                "variable": {
                    "value": "self.app",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "app_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[app_gram, app_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_181": {
                "variable": {
                    "value": "self.l_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_187": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 8, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_188": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_212": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_238": {
                "variable": {
                    "value": "self.l8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_247": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_248": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_287": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_322": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_353": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_376": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_402": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_430": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_13": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_308": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_313": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_333": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_105": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_108": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_153": {
                "input": {
                    "value": "app_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.app_conv(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(app_feat)",
                            "Call"
                        ],
                        [
                            "app_feat.view(s1, s2, s3 * s4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "app_feat.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "in_features": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_188": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_214": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_248": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_289": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_340": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/rcnn_discriminator_orig.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "spectral_norm_29": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_38": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_39": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_93": {
                "variable": {
                    "value": "self.l_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_99": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 8, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_100": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_150": {
                "variable": {
                    "value": "self.l8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_159": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_160": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_199": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_234": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_265": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_288": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.to(idx.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_311": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.to(idx.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_13": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_225": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_100": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_160": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_252": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/rcnn_discriminator_vg.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "spectral_norm_29": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_38": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_39": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_95": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_104": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_105": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_108": {
                "variable": {
                    "value": "self.l_y_app",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_109": {
                "variable": {
                    "value": "self.app",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "app_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[app_gram, app_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_181": {
                "variable": {
                    "value": "self.l_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_187": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 8, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_188": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_212": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_238": {
                "variable": {
                    "value": "self.l8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_247": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_248": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_287": {
                "variable": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_322": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_353": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_376": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_402": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_430": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_13": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_308": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_313": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_333": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_105": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_108": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_153": {
                "input": {
                    "value": "app_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.app_conv(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(app_feat)",
                            "Call"
                        ],
                        [
                            "app_feat.view(s1, s2, s3 * s4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "app_feat.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "in_features": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_188": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_214": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_248": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ],
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_289": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_340": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_app_v2.py": {
        "torch": {
            "chunk_33": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_g.cuda()",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_43": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_46": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_47": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_49": {
                "variable": {
                    "value": "delta_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_50": {
                "variable": {
                    "value": "delta_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "position_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "scaled_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "w_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(w_g, min=1e-06)) + w_a",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(w_mn)",
                            "Call"
                        ],
                        [
                            "dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_682": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.residual(in_feat, w, bbox) + self.shortcut(in_feat)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_711": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_712": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_61": {
                "variable": {
                    "value": "feat_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_71": {
                "variable": {
                    "value": "sin_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_72": {
                "variable": {
                    "value": "cos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_150": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_151": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_188": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_223": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_224": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_231": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b0, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_239": {
                "variable": {
                    "value": "log_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_242": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_263": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_264": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_268": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_304": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_307": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_323": {
                "variable": {
                    "value": "self.alpha1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_324": {
                "variable": {
                    "value": "self.alpha2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_325": {
                "variable": {
                    "value": "self.alpha3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_326": {
                "variable": {
                    "value": "self.alpha4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_328": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_360": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha1).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_360": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_368": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha2).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_368": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_376": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha3).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_376": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_384": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha4).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_384": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_405": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_409": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_416": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_423": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_425": {
                "variable": {
                    "value": "self.alpha1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_426": {
                "variable": {
                    "value": "self.alpha2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_427": {
                "variable": {
                    "value": "self.alpha3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_428": {
                "variable": {
                    "value": "self.alpha4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_430": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_469": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha1).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_469": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_477": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha2).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_477": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_485": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha3).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_485": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_493": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha4).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_493": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_514": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_517": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_525": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_532": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_534": {
                "variable": {
                    "value": "self.alpha1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_535": {
                "variable": {
                    "value": "self.alpha2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_536": {
                "variable": {
                    "value": "self.alpha3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_537": {
                "variable": {
                    "value": "self.alpha4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_538": {
                "variable": {
                    "value": "self.alpha5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_539": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_552": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_564": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_577": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha1).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_577": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_586": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha2).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_586": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_595": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha3).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_595": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_604": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha4).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_604": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_613": {
                "variable": {
                    "value": "alpha5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha5).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_613": {
                "variable": {
                    "value": "alpha5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_640": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_694": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.expand(expanse)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_734": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(features, out_features, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_735": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features + len(sizes) * out_features, out_features, kernel_size=3, padding=1, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_743": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_744": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_745": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_42": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_46": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "torch.clamp(w_g, min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_114": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_347": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_456": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_560": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_658": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_684": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(features, out_features, kernel_size=1, bias=False)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_746": {
                "*args": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_63": {
                "input": {
                    "value": "wave_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_113": {
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_relation_embds_matrix.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "geo_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim_g",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_307": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_323": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_359": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_359": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_367": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_367": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_375": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_375": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_383": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_383": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_409": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_425": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_427": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_428": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_468": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_468": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_476": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_476": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_484": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_484": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_492": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_492": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_517": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_534": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_535": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_536": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_537": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_538": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_576": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_576": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_584": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_584": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_593": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_593": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_602": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_602": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_611": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_611": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_645": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PSPModule(out_ch, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_648": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_ch, 100, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_668": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_736": {
                "in_channels": {
                    "value": "features + len(sizes) * out_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_738": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_739": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_746": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_751": {
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.interpolate(input=stage(feats), size=(h, w), mode='bilinear', align_corners=True) for stage in self.stages] + [feats]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_361": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_369": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_377": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_385": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_470": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_478": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_486": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_494": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_578": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_587": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_596": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_605": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_614": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_750": {
                "input": {
                    "value": "stage(feats)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_646": {
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_648": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_651": {
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_context.py": {
        "torch": {
            "chunk_31": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_g.cuda()",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_41": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_44": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_45": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_47": {
                "variable": {
                    "value": "delta_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_48": {
                "variable": {
                    "value": "delta_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "position_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "scaled_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "w_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(w_g, min=1e-06)) + w_a",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(w_mn)",
                            "Call"
                        ],
                        [
                            "dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_570": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_12": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_59": {
                "variable": {
                    "value": "feat_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_69": {
                "variable": {
                    "value": "sin_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_70": {
                "variable": {
                    "value": "cos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_148": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_149": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_152": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_186": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_187": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_222": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_229": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b0, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_237": {
                "variable": {
                    "value": "log_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_240": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_253": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_261": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_262": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_302": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_305": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_319": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_377": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_380": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_390": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_449": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_452": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_458": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_465": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_479": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_518": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_546": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_547": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_548": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_550": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_555": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(in_ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_583": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_591": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(background_feat, foreground_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_603": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_607": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_614": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_621": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_644": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "torch.clamp(w_g, min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_112": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_346": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_421": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_485": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_525": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_572": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_637": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_658": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_61": {
                "input": {
                    "value": "wave_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_111": {
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_relation_embds_matrix.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "geo_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim_g",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_380": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_452": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_535": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_557": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_560": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_586": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_607": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_617": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_graph.py": {
        "torch": {
            "from_numpy_63": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_145": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_g.cuda()",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_154": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_155": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_158": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_159": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_161": {
                "variable": {
                    "value": "delta_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_162": {
                "variable": {
                    "value": "delta_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "position_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_210": {
                "variable": {
                    "value": "scaled_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "w_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_233": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(w_g, min=1e-06)) + w_a",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(w_mn)",
                            "Call"
                        ],
                        [
                            "dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_722": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_37": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_173": {
                "variable": {
                    "value": "feat_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_183": {
                "variable": {
                    "value": "sin_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_184": {
                "variable": {
                    "value": "cos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_185": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_265": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_266": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_269": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_304": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_305": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_339": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_340": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_347": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b0, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_355": {
                "variable": {
                    "value": "log_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_358": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_370": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_371": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_372": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_378": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_379": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_383": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_418": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_421": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_427": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_434": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_482": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_485": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_492": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_499": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_556": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_559": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_570": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_591": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_636": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_672": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_699": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_700": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_701": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_703": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_708": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(in_ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_734": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_741": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(background_feat, foreground_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_751": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_755": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_762": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_769": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_793": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_837": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_841": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_848": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_855": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_879": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_926": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_930": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_937": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_944": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_968": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "graph_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(graph_input, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_117": {
                "variable": {
                    "value": "graph_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_input_raw[g_index, :]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.gc1(graph_input, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(graph_input, 0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(graph_input, adj)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_122": {
                "tensors": {
                    "value": "set_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "abs_154": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_158": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_227": {
                "input": {
                    "value": "torch.clamp(w_g, min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_229": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_454": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_526": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_584": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_600": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_643": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_679": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_724": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_786": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_807": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_872": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_896": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_961": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_982": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_175": {
                "input": {
                    "value": "wave_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_227": {
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_relation_embds_matrix.squeeze(1)",
                            "Call"
                        ],
                        [
                            "w_g.masked_fill(mask == 0, 0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "in_features": {
                    "value": "geo_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim_g",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_421": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_485": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_559": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_653": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_689": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_710": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_735": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_737": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_755": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_763": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_765": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_841": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_849": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_851": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_930": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_938": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_940": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_part.py": {
        "torch": {
            "chunk_31": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_g.cuda()",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_41": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_44": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_45": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_47": {
                "variable": {
                    "value": "delta_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_48": {
                "variable": {
                    "value": "delta_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "position_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "scaled_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "w_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(w_g, min=1e-06)) + w_a",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(w_mn)",
                            "Call"
                        ],
                        [
                            "dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_608": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_12": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_59": {
                "variable": {
                    "value": "feat_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_69": {
                "variable": {
                    "value": "sin_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_70": {
                "variable": {
                    "value": "cos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_148": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_149": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_152": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_186": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_187": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_222": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_229": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b0, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_237": {
                "variable": {
                    "value": "log_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_240": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_253": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_261": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_262": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_302": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_305": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_366": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_369": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_376": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_383": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_441": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_444": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_454": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_519": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_556": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_584": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_585": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_586": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_588": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_593": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(in_ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_621": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_629": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(background_feat, foreground_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_641": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_645": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_652": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_659": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_682": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_728": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_732": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_739": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_746": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_769": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "torch.clamp(w_g, min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_112": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_338": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_410": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_468": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_483": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_526": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_563": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_610": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_675": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_696": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_762": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_786": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_61": {
                "input": {
                    "value": "wave_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_111": {
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_relation_embds_matrix.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "geo_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim_g",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_369": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_444": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_536": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_573": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_622": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_645": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_655": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_732": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_740": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_742": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_v1.py": {
        "torch": {
            "Conv2d_351": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_78": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_155": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_221": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_224": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_328": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_331": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(in_ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(background_feat, foreground_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_192": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_264": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_306": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_353": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_316": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_v1_bk.py": {
        "torch": {
            "Conv2d_185": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_78": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_187": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_v1_orig.py": {
        "torch": {
            "Conv2d_185": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_78": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_187": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_v2.py": {
        "torch": {
            "Conv2d_291": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.residual(in_feat, w, bbox) + self.shortcut(in_feat)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_319": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_320": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_20": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.alpha1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.alpha2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.alpha3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.alpha4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_41": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_73": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha1).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_81": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha2).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_89": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha3).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_97": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha4).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_123": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_126": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_143": {
                "variable": {
                    "value": "self.alpha1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.alpha2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.alpha3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.alpha4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.alpha5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_148": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_186": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha1).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_186": {
                "variable": {
                    "value": "alpha1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_195": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha2).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "variable": {
                    "value": "alpha2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_204": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha3).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_204": {
                "variable": {
                    "value": "alpha3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_213": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha4).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_213": {
                "variable": {
                    "value": "alpha4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_222": {
                "variable": {
                    "value": "alpha5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha5).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_222": {
                "variable": {
                    "value": "alpha5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_303": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.expand(expanse)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_342": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(features, out_features, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features + len(sizes) * out_features, out_features, kernel_size=3, padding=1, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_351": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_353": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_60": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_169": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_293": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(features, out_features, kernel_size=1, bias=False)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_354": {
                "*args": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_72": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_80": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_88": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_96": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_185": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_185": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_193": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_193": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_202": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_202": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_211": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_211": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_220": {
                "input": {
                    "value": "seman_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_220": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PSPModule(out_ch, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_ch, 100, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_344": {
                "in_channels": {
                    "value": "features + len(sizes) * out_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_347": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_359": {
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.interpolate(input=stage(feats), size=(h, w), mode='bilinear', align_corners=True) for stage in self.stages] + [feats]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_98": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_187": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_196": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_205": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_214": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_223": {
                "input": {
                    "value": "bmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_358": {
                "input": {
                    "value": "stage(feats)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "184",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_vg.py": {
        "torch": {
            "chunk_31": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_g.cuda()",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_41": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_44": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_45": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_47": {
                "variable": {
                    "value": "delta_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_48": {
                "variable": {
                    "value": "delta_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "position_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "scaled_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "w_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_a",
                            "variable"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(w_mn)",
                            "Call"
                        ],
                        [
                            "dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_612": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_12": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_59": {
                "variable": {
                    "value": "feat_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_69": {
                "variable": {
                    "value": "sin_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_70": {
                "variable": {
                    "value": "cos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_152": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_153": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_225": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_226": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_233": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b0, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_241": {
                "variable": {
                    "value": "log_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_244": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_265": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_266": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_270": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_306": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_309": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_370": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_373": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_380": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_445": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_448": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_458": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_479": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_523": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_560": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_588": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_589": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_590": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_592": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_597": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(in_ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_625": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_633": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(background_feat, foreground_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_645": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_649": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_656": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_663": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_686": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_735": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_739": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_746": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_753": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_776": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_116": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_342": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_414": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_487": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_530": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_567": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_614": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_679": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_703": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_769": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_793": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_61": {
                "input": {
                    "value": "wave_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "geo_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim_g",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_309": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_373": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_448": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_540": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_577": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "variable"
                        ],
                        [
                            "self.b1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox, bbox1, bbox2)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_602": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_626": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_628": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_649": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_657": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_659": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_739": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_747": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_749": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "model/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_layout2img/bilinear.py": {
        "torch": {
            "zeros_46": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox.size(0)",
                            "Call"
                        ],
                        [
                            "bbox.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.data.type()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "WW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HH",
                            "variable"
                        ],
                        [
                            "HH",
                            "variable"
                        ],
                        [
                            "HH",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_87": {
                "variable": {
                    "value": "feats_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(feats_flat, dim=0)",
                            "Call"
                        ],
                        [
                            "feats.view(N, C, H * W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "bbox_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_flat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "all_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_idx, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_95": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox.size(0)",
                            "Call"
                        ],
                        [
                            "bbox.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_168": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_169": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "variable"
                        ]
                    ]
                }
            },
            "linspace_266": {
                "variable": {
                    "value": "start_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_268": {
                "variable": {
                    "value": "end_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_284": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(cat.transpose(2, 0, 1).astype(np.float32)), torch.from_numpy(dog.transpose(2, 0, 1).astype(np.float32))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_130": {
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.from_numpy(cat.transpose(2, 0, 1).astype(np.float32)), torch.from_numpy(dog.transpose(2, 0, 1).astype(np.float32))], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_285": {
                "ndarray": {
                    "value": "cat.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_286": {
                "ndarray": {
                    "value": "dog.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model_layout2img/discriminator.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_191": {
                "variable": {
                    "value": "object_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_205": {
                "variable": {
                    "value": "object_bboxes_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "object_bboxes_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(object_bboxes_flat, 0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_208": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.resi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.resi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OptimizedBlock(3, self.ch, downsample=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.resi(h)",
                            "Call"
                        ],
                        [
                            "_downsample(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "_downsample(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.resi(h)",
                            "Call"
                        ],
                        [
                            "_downsample(h)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.main(h)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OptimizedBlock(3, conv_dim, downsample=downsample_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.classifier_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.classifier_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_165": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.resi(h)",
                            "Call"
                        ],
                        [
                            "_downsample(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "_downsample(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.resi(h)",
                            "Call"
                        ],
                        [
                            "_downsample(h)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.main(h)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_20": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model_layout2img/discriminator_app.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_208": {
                "variable": {
                    "value": "object_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "object_bboxes_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "object_bboxes_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(object_bboxes_flat, 0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_225": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.resi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.resi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OptimizedBlock(3, self.ch, downsample=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.resi(h)",
                            "Call"
                        ],
                        [
                            "_downsample(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "_downsample(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.resi(h)",
                            "Call"
                        ],
                        [
                            "_downsample(h)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.main(h)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OptimizedBlock(3, conv_dim, downsample=downsample_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.app_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OptimizedBlock(3, conv_dim, downsample=downsample_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_157": {
                "variable": {
                    "value": "self.l_y_app",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.classifier_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.classifier_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.app",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "app_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[app_gram, app_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.resi(h)",
                            "Call"
                        ],
                        [
                            "_downsample(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "_downsample(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.resi(h)",
                            "Call"
                        ],
                        [
                            "_downsample(h)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.main(h)",
                            "Call"
                        ],
                        [
                            "self.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_20": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_164": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_174": {
                "input": {
                    "value": "app_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.app_conv(h))",
                            "Call"
                        ],
                        [
                            "app_feat.view(s1, s2, s3 * s4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "app_feat.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model_layout2img/generator.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "time_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_flat.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_552": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_32": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_101": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_297": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_298": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "batch_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_output, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_368": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_374": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_377": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_380": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_383": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_386": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_389": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_390": {
                "variable": {
                    "value": "self.fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_425": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_426": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_438": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_441": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_444": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_447": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_450": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "embeddings_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embeddings, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_484": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_486": {
                "variable": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_487": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_489": {
                "variable": {
                    "value": "self.dc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_490": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_492": {
                "variable": {
                    "value": "self.dc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_493": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_495": {
                "variable": {
                    "value": "self.dc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_496": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_498": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_596": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "objs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_10": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_196": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_108": {
                "input": {
                    "value": "c_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_291": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_292": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_324": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_372": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_375": {
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_378": {
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_381": {
                "num_features": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_384": {
                "num_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_442": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_445": {
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_448": {
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_451": {
                "num_features": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_8": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model_layout2img/generator1.py": {
        "torch": {
            "zeros_33": {
                "variable": {
                    "value": "holder",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(obj_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(obj_num)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(obj_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(obj_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "time_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_flat.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_604": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.pos_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "pos_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_12": {
                "variable": {
                    "value": "self.class_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embd_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_69": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_148": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_149": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_152": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_311": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_344": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_345": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_388": {
                "variable": {
                    "value": "batch_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_output, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_415": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_418": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_421": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_427": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_430": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_433": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_436": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_472": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_486": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_489": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim + z_dim + pos_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_490": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_519": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_521": {
                "variable": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_522": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_524": {
                "variable": {
                    "value": "self.dc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_525": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_527": {
                "variable": {
                    "value": "self.dc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_528": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_530": {
                "variable": {
                    "value": "self.dc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_531": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_533": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_648": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "objs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_47": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_243": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_17": {
                "tensors": {
                    "value": "[cla_embd, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_155": {
                "input": {
                    "value": "c_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_338": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_339": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_371": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_419": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_422": {
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_425": {
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_428": {
                "num_features": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_431": {
                "num_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_45": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model_layout2img/generator2.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "holder",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(obj_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "z.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "time_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_flat.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_595": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_56": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_125": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_321": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_322": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "batch_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_output, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_392": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_395": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_401": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_404": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_407": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_410": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_413": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "self.fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_449": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_450": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_463": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_466": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_469": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_472": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_475": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_477": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_478": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_483": {
                "variable": {
                    "value": "embeddings_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embeddings, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_527": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_529": {
                "variable": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_530": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_532": {
                "variable": {
                    "value": "self.dc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_533": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_535": {
                "variable": {
                    "value": "self.dc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_536": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_538": {
                "variable": {
                    "value": "self.dc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_539": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_541": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_639": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "objs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_34": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_220": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "input": {
                    "value": "c_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_315": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_316": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_348": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_396": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_399": {
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_402": {
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_405": {
                "num_features": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_408": {
                "num_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_467": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_470": {
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_473": {
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_476": {
                "num_features": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model_layout2img/generator_app.py": {
        "torch": {
            "chunk_30": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_g.cuda()",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_39": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_x / w)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_40": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cx - cx.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_x / w), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_x)",
                            "Call"
                        ],
                        [
                            "delta_x.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_43": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(delta_y / h)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_44": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cy - cy.view(batch_size, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.abs(delta_y / h), min=0.001)",
                            "Call"
                        ],
                        [
                            "torch.log(delta_y)",
                            "Call"
                        ],
                        [
                            "delta_y.view(batch_size, matrix_size[1], matrix_size[2], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_46": {
                "variable": {
                    "value": "delta_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / w.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_47": {
                "variable": {
                    "value": "delta_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h / h.view(batch_size, 1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "position_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "scaled_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "w_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.clamp(w_g, min=1e-06)) + w_a",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(w_mn)",
                            "Call"
                        ],
                        [
                            "dropout(w_mn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_327": {
                "variable": {
                    "value": "holder",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(obj_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(obj_num)",
                            "Call"
                        ],
                        [
                            "max(obj_num)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(obj_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(obj_num)",
                            "Call"
                        ],
                        [
                            "max(obj_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_351": {
                "variable": {
                    "value": "holder",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(obj_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "z.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_371": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "f_g.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "time_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_flat.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_968": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_11": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_58": {
                "variable": {
                    "value": "feat_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_g / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_68": {
                "variable": {
                    "value": "sin_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_69": {
                "variable": {
                    "value": "cos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_mat * dim_mat",
                            "BinOp"
                        ],
                        [
                            "mul_mat.view(batch_size, matrix_size[1], matrix_size[2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_mat, cos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_151": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_152": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_189": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "relative_geometry_weights_per_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l(flatten_relative_geometry_embeddings).view(box_size_per_head) for l in self.WGs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_geometry_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(relative_geometry_weights_per_head, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(relative_geometry_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_224": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_225": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_232": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b0, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "log_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_243": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_264": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_265": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_269": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_311": {
                "tensors": {
                    "value": "all_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "BatchNorm2d_386": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_387": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_403": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_444": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_453": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_456": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_457": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_458": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_459": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_460": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_510": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_619": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_652": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_653": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_696": {
                "variable": {
                    "value": "batch_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_output, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_723": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_726": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_729": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_732": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_735": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_738": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_741": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_744": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_745": {
                "variable": {
                    "value": "self.fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_780": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_781": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_795": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_798": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_801": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_804": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_807": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_809": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_810": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_816": {
                "variable": {
                    "value": "embeddings_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embeddings, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_868": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_870": {
                "variable": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_871": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_873": {
                "variable": {
                    "value": "self.dc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_874": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_876": {
                "variable": {
                    "value": "self.dc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_877": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_879": {
                "variable": {
                    "value": "self.dc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_880": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_882": {
                "variable": {
                    "value": "self.c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_1012": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "objs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_39": {
                "input": {
                    "value": "delta_x / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "delta_y / h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "torch.clamp(w_g, min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_115": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_365": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "f_g.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_551": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_60": {
                "input": {
                    "value": "wave_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_range / (dim_g / 8)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.pow(wave_len, dim_mat)",
                            "BinOp"
                        ],
                        [
                            "dim_mat.view(1, 1, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_113": {
                "input": {
                    "value": "w_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_relation_embds_matrix.squeeze(1)",
                            "Call"
                        ],
                        [
                            "w_g.masked_fill(mask == 0, 0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "geo_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim_g",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_404": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_405": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_406": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_407": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_408": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_463": {
                "input": {
                    "value": "c_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_468": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "f_g.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_469": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "f_g.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_646": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_647": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(temp, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(temp, 0)",
                            "Call"
                        ],
                        [
                            "[obj_tensor[i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_679": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_727": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_730": {
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_733": {
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_736": {
                "num_features": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_739": {
                "num_features": {
                    "value": "conv_dim * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_799": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_802": {
                "num_features": {
                    "value": "conv_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_805": {
                "num_features": {
                    "value": "conv_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_808": {
                "num_features": {
                    "value": "conv_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_363": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "f_g.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model_layout2img/layers.py": {
        "torch": {
            "Sequential_107": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_24": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cur_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(arch[0][1:])",
                            "Call"
                        ],
                        [
                            "next_C",
                            "variable"
                        ],
                        [
                            "Dout",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "next_C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_padding(K, padding)",
                            "Call"
                        ],
                        [
                            "_get_padding(K, padding)",
                            "Call"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_211": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_padding(K, padding)",
                            "Call"
                        ],
                        [
                            "_get_padding(K, padding)",
                            "Call"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_padding(K, padding)",
                            "Call"
                        ],
                        [
                            "_get_padding(K, padding)",
                            "Call"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_229": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_223": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_188": {
                "scale_factor": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(s[1:])",
                            "Call"
                        ],
                        [
                            "int(s[1:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2d_192": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(s[1:])",
                            "Call"
                        ],
                        [
                            "int(s[1:])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(s[1:])",
                            "Call"
                        ],
                        [
                            "int(s[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_194": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(s[1:])",
                            "Call"
                        ],
                        [
                            "int(s[1:])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(s[1:])",
                            "Call"
                        ],
                        [
                            "int(s[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_202": {
                "in_features": {
                    "value": "Din",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "Dout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_layout2img/layout.py": {
        "torch": {
            "grid_sample_51": {
                "variable": {
                    "value": "sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecs.view(O, D, 1, 1).expand(O, D, 8, 8)",
                            "Call"
                        ],
                        [
                            "vecs.view(O, D, 1, 1) * masks.float().view(O, 1, M, M)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_boxes_to_grid(boxes, H, W)",
                            "Call"
                        ],
                        [
                            "_boxes_to_grid(boxes, H, W)",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "grid.mul(2).sub(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_86": {
                "variable": {
                    "value": "sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecs.view(O, D, 1, 1).expand(O, D, 8, 8)",
                            "Call"
                        ],
                        [
                            "vecs.view(O, D, 1, 1) * masks.float().view(O, 1, M, M)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_boxes_to_grid(boxes, H, W)",
                            "Call"
                        ],
                        [
                            "_boxes_to_grid(boxes, H, W)",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "grid.mul(2).sub(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_112": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "variable"
                        ],
                        [
                            "H",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_113": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_to_img.data.max().item() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "variable"
                        ],
                        [
                            "H",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_151": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "obj_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_to_img.data.max().item() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_layout2img/transformer.py": {
        "torch": {
            "ModuleList_10": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_20": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_27": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b0, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.layer0(self.q, self.q, self.q)",
                            "Call"
                        ],
                        [
                            "q.expand(n, 64, 192)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_35": {
                "variable": {
                    "value": "log_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_38": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_59": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_60": {
                "variable": {
                    "value": "self.layer_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_112": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 64, 192)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_161": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_LostGAN.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab_json='./data/tmp/vocab.json', h5_path='./data/tmp/preprocess_vg/val.h5', image_dir='./datasets/vg/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "z_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_app.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab_json='./data/tmp/vocab.json', h5_path='./data/tmp/preprocess_vg/val.h5', image_dir='./datasets/vg/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_53": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "z_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_context.py": {
        "torch": {
            "DataLoader_32": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab=vocab, h5_path='./datasets/vg/val.h5', image_dir='./datasets/vg/images/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "z_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_context_app.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab_json='./data/tmp/vocab.json', h5_path='./data/tmp/preprocess_vg/val.h5', image_dir='./datasets/vg/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "z_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_context_app_nogeo.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab_json='./data/tmp/vocab.json', h5_path='./data/tmp/preprocess_vg/val.h5', image_dir='./datasets/vg/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "z_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_context_app_v2.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab_json='./data/tmp/vocab.json', h5_path='./data/tmp/preprocess_vg/val.h5', image_dir='./datasets/vg/', image_size=(128, 128), left_right_flip=False, max_objects=10)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "z_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_context_part.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab=vocab, h5_path='./datasets/vg/val.h5', image_dir='./datasets/vg/images/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "z_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_graph_context_app.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab_json='./data/tmp/vocab.json', h5_path='./data/tmp/preprocess_vg/val.h5', image_dir='./datasets/vg/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "z_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "z_im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_layout2img.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "netG_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0.5, 0.999]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "netD_image_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD_image.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0.5, 0.999]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "netD_object_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD_object.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0.5, 0.999]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_67": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "objs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "config.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_81": {
                "variable": {
                    "value": "d_image_adv_loss_fake_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.full_like(out_logits, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_84": {
                "variable": {
                    "value": "d_image_adv_loss_fake_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.full_like(out_logits, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_90": {
                "variable": {
                    "value": "d_image_adv_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.full_like(out_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_94": {
                "variable": {
                    "value": "g_object_adv_loss_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.full_like(out_logits, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_98": {
                "variable": {
                    "value": "d_object_adv_loss_fake_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.full_like(out_logits, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_104": {
                "variable": {
                    "value": "d_object_adv_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits_src",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.full_like(out_logits_src, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_105": {
                "variable": {
                    "value": "d_object_cls_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "objs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_138": {
                "variable": {
                    "value": "g_img_rec_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_rec - imgs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_138": {
                "variable": {
                    "value": "g_img_rec_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_139": {
                "variable": {
                    "value": "g_z_rec_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_rand_rec - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_139": {
                "variable": {
                    "value": "g_z_rec_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "g_kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_element",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.pow(2).add_(logvar.exp()).mul_(-1).add_(1).add_(logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_147": {
                "variable": {
                    "value": "g_image_adv_loss_fake_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.full_like(out_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_150": {
                "variable": {
                    "value": "g_image_adv_loss_fake_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.full_like(out_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_156": {
                "variable": {
                    "value": "g_object_adv_loss_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits_src",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.full_like(out_logits_src, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_157": {
                "variable": {
                    "value": "g_object_cls_loss_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "objs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_160": {
                "variable": {
                    "value": "g_object_adv_loss_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits_src",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.full_like(out_logits_src, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_161": {
                "variable": {
                    "value": "g_object_cls_loss_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "objs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_81": {
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_84": {
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_90": {
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_94": {
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_98": {
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_104": {
                "input": {
                    "value": "out_logits_src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_147": {
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_150": {
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD_image(img_rec.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand.detach())",
                            "Call"
                        ],
                        [
                            "netD_image(imgs)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rec)",
                            "Call"
                        ],
                        [
                            "netD_image(img_rand)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_156": {
                "input": {
                    "value": "out_logits_src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_160": {
                "input": {
                    "value": "out_logits_src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_lpips.py": {
        "torch": {
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_ours.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab=vocab, h5_path='./datasets/vg/val.h5', image_dir='./datasets/vg/images/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "z_f",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "z_b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_ours_context_bg.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/images/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab=vocab, h5_path='./datasets/vg/val.h5', image_dir='./datasets/vg/images/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "z_f",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "z_b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_app.py": {
        "torch": {
            "device_count_52": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "num_workers * num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_110": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128_app(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "d_loss_robj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_129": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_132": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_133": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "d_loss_fobj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'D_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_context_app.py": {
        "torch": {
            "device_count_52": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_110": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128_app(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "d_loss_robj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_129": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_132": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_133": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "d_loss_fobj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'D_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_context_app_nogeo.py": {
        "torch": {
            "device_count_53": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_108": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128_app(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_126": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "d_loss_robj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_134": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_135": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "d_loss_fobj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'D_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_context_app_v2.py": {
        "torch": {
            "device_count_50": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "num_workers * num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_142": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_143": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.out_path + '/model/G_{}.pth'.format(args.checkpoint_epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_92": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.out_path + '/model/D_{}.pth'.format(args.checkpoint_epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_110": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128_app(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_159": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_160": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "d_loss_robj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_165": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_168": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_169": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_170": {
                "variable": {
                    "value": "d_loss_fobj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'D_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_context_nogeo.py": {
        "torch": {
            "device_count_49": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_105": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_106": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_73": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_122": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_125": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_128": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_178": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_context_part.py": {
        "torch": {
            "device_count_50": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "num_workers * num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_106": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_74": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_126": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_129": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'D_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_graph_context_app.py": {
        "torch": {
            "device_count_50": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "num_workers * num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_132": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_133": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.join(args.out_path, 'model/', 'G_{}.pth'.format(args.checkpoint)))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_86": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.join(args.out_path, 'model/', 'D_{}.pth'.format(args.checkpoint)))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128_app(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_152": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_154": {
                "variable": {
                    "value": "d_loss_robj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_158": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_161": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_162": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_163": {
                "variable": {
                    "value": "d_loss_fobj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'D_last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'D_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_lostGan.py": {
        "torch": {
            "device_count_50": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "num_workers * num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_103": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_104": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_117": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_118": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_120": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_123": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_ours.py": {
        "torch": {
            "device_count_53": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "num_workers * num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_110": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator64(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_132": {
                "variable": {
                    "value": "z_f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "randn_133": {
                "variable": {
                    "value": "z_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_138": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_139": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_ours_d.py": {
        "torch": {
            "device_count_49": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_105": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_106": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_73": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128_app(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_122": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "d_loss_robj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_126": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_129": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "d_loss_fobj_app",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_ours_layout2img.py": {
        "torch": {
            "DataLoader_51": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_96": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_97": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CombineDiscriminator128(num_classes=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_114": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "z_f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "randn_118": {
                "variable": {
                    "value": "z_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "mean_123": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/bilinear.py": {
        "torch": {
            "affine_grid_12": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "transformation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([scale_x.unsqueeze(-1), zeros, t_x.unsqueeze(-1), zeros, scale_y.unsqueeze(-1), t_y.unsqueeze(-1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_13": {
                "variable": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(transformation_matrix, torch.Size(size))",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "_boxes_to_grid(boxes.view(b * num_o, -1), H, W).float().cuda(device=masks.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "grid.mul(2).sub(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_68": {
                "variable": {
                    "value": "start_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_70": {
                "variable": {
                    "value": "end_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_156": {
                "variable": {
                    "value": "sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.float().view(b * num_o, 1, M, M)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(transformation_matrix, torch.Size(size))",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "_boxes_to_grid(boxes.view(b * num_o, -1), H, W).float().cuda(device=masks.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "grid.mul(2).sub(1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_178": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_179": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "transformation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_x.unsqueeze(-1), zeros, t_x.unsqueeze(-1), zeros, scale_y.unsqueeze(-1), t_y.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_47": {
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(transformation_matrix, torch.Size(size))",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "_boxes_to_grid(boxes.view(b * num_o, -1), H, W).float().cuda(device=masks.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "grid.mul(2).sub(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/util.py": {
        "torch": {
            "cat_36": {
                "tensors": {
                    "value": "crop_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_86": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_27": {
                "variable": {
                    "value": "crop_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crop_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[idx:idx + 1, :, int(imsize * bbox[idx, odx, 1]):int(imsize * (bbox[idx, odx, 1] + bbox[idx, odx, 3])), int(imsize * bbox[idx, odx, 0]):int(imsize * (bbox[idx, odx, 0] + bbox[idx, odx, 2]))]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(crop_image, size=(cropsize, cropsize), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(cropsize, cropsize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "rlabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_23": {
                "input": {
                    "value": "bbox[idx, odx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils_layout2img/data.py": {
        "torch": {
            "cat_66": {
                "variable": {
                    "value": "imgs_de",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_de",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_de, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils_layout2img/miscs.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(np.transpose(images, (0, 2, 3, 1)), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(results, axis=0)",
                            "Call"
                        ],
                        [
                            "np.transpose(images, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils_layout2img/model_saver.py": {
        "torch": {
            "save_102": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'iter-%d_%s.pkl' % (iter, appendix))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'iter-%d.pkl' % iter)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_59": {
                "f": {
                    "value": "load_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "os.path.join(model_dir, file)",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_74": {
                "f": {
                    "value": "load_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "os.path.join(model_dir, file)",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}