{
    "viz.py": {
        "sklearn": {
            "DBSCAN_13": {
                "variable": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets_loader.py": {
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc_np.transpose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "sn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sn_np.transpose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "node_np.transpose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data/helper.py": {
        "torch": {
            "from_numpy_84": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "angles2rotation_matrix(angles).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "angles_Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R2angles(R)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dot(Rz, np.dot(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(angles2rotation_matrix(angles).astype(np.float32)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc - pc_shift",
                            "BinOp"
                        ],
                        [
                            "pc * scale",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(R, pc)",
                            "Call"
                        ],
                        [
                            "pc * scale",
                            "BinOp"
                        ],
                        [
                            "pc + shift",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dot(Rz, np.dot(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(angles2rotation_matrix(angles).astype(np.float32)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(R, node)",
                            "Call"
                        ],
                        [
                            "node * scale",
                            "BinOp"
                        ],
                        [
                            "node + shift",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.uniform(-1 * shift_thre, shift_thre, (3, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "sn[0:3, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dot(Rz, np.dot(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(angles2rotation_matrix(angles).astype(np.float32)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sn[0:3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/basis_keypoint_detector.py": {
        "torch": {
            "cos_18": {
                "variable": {
                    "value": "cosy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_19": {
                "variable": {
                    "value": "siny",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cosy, zeros, siny, zeros, ones, zeros, -siny, zeros, cosy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "ymat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_31": {
                "variable": {
                    "value": "norm_npl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "n_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "refl_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - 2 * n_x * n_x, -2 * n_x * n_y, -2 * n_x * n_z, -2 * n_x * n_y, 1 - 2 * n_y * n_y, -2 * n_y * n_z, -2 * n_x * n_z, -2 * n_y * n_z, 1 - 2 * n_z * n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "refl_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kpts_half, kpts_half_reflected)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_75": {
                "variable": {
                    "value": "kpts_half",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c * basis_half",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "kpts_half_reflected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refl_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "refl_mat.repeat(c.shape[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "refl_mat.unsqueeze(0).repeat(basis_half.shape[0], 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kpts_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(c * basis_half, 3)",
                            "Call"
                        ],
                        [
                            "torch.sum(c1 * basis_half, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "variable": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "euler2mat(angles)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((kpts_half, kpts_half_reflected), 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(R, kpts)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "self.optimizer_detector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.detector.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.old_lr_detector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "self.test_chamfer_average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "self.test_loss_average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "self.test_inclusivity_average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "self.test_coverage_average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "basis_half_reflected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refl_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "refl_mat.repeat(c.shape[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "refl_mat.unsqueeze(0).repeat(basis_half.shape[0], 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(torch.transpose(basis_half, 1, 3), 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_83": {
                "input": {
                    "value": "basis_half_reflected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(refl_batch, torch.transpose(torch.transpose(basis_half, 1, 3), 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(basis_half_reflected, 1, 3), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "kpts_half",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1 * basis_half",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "kpts_half_reflected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c2 * basis_half_reflected",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.opt.checkpoints_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_153": {
                "type": {
                    "value": "pc.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_159": {
                "type": {
                    "value": "self.pc.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "chosen_indices_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chosen_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(self.opt.input_pc_num, resulting_pc_num, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_167": {
                "variable": {
                    "value": "self.pc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "chosen_indices_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(chosen_indices).to(self.opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_168": {
                "variable": {
                    "value": "self.sn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "chosen_indices_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(chosen_indices).to(self.opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_81": {
                "input": {
                    "value": "basis_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basis",
                            "variable"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/index_max_ext/setup.py": {
        "torch": {}
    },
    "models/layers.py": {
        "torch": {
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_171": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_230": {
                "variable": {
                    "value": "self.layers_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_240": {
                "variable": {
                    "value": "self.layers_after",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_269": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_Mx1 - database_1xN",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "topk_270": {
                "variable": {
                    "value": "(knn_D, knn_I)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(query_Mx1 - database_1xN, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_274": {
                "variable": {
                    "value": "query_neighbor_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "database",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "knn_I_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knn_I.unsqueeze(1).expand(B, 3, M, K).contiguous().view(B, 3, M * K)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_275": {
                "variable": {
                    "value": "query_neighbor_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, epoch)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "layer(x, epoch)",
                            "Call"
                        ],
                        [
                            "layer(x, epoch)",
                            "Call"
                        ],
                        [
                            "layer(x, epoch)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, x.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "knn_I_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knn_I.unsqueeze(1).expand(B, C, M, K).contiguous().view(B, C, M * K)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_278": {
                "variable": {
                    "value": "query_neighbor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query_neighbor_coord_decentered, query_neighbor_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_282": {
                "variable": {
                    "value": "(feature, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "query_neighbor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((query_neighbor_coord_decentered, query_neighbor_feature), dim=1)",
                            "Call"
                        ],
                        [
                            "layer(query_neighbor, epoch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.expand_as(query_neighbor), query_neighbor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_287": {
                "variable": {
                    "value": "(feature, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(y, epoch)",
                            "Call"
                        ],
                        [
                            "self.norm(y)",
                            "Call"
                        ],
                        [
                            "self.act(y)",
                            "Call"
                        ],
                        [
                            "torch.cat((feature.expand_as(query_neighbor), query_neighbor), dim=1)",
                            "Call"
                        ],
                        [
                            "layer(y, epoch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_323": {
                "variable": {
                    "value": "self._mlp_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_359": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_norm_59": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_109": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_125": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_129": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_177": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_182": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_343": {
                "input": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._coeffs_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.max(coeffs, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "coeffs.view(-1, coeffs.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_347": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.sigmoid(self._rot_layer(x)) - 0.5) * np.pi / 6",
                            "BinOp"
                        ],
                        [
                            "torch.max(rot, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "rot.view(-1, rot.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_377": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, epoch)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "layer(x, epoch)",
                            "Call"
                        ],
                        [
                            "layer(x, epoch)",
                            "Call"
                        ],
                        [
                            "layer(x, epoch)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, x.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_133": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_186": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_346": {
                "input": {
                    "value": "self._rot_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SELU_135": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SELU_188": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/losses.py": {
        "torch": {
            "norm_28": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_src_input_expanded - pc_dst_input_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_31": {
                "variable": {
                    "value": "(src_dst_min_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pc_src_input_expanded - pc_dst_input_expanded, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.norm(pc_src_input_expanded - pc_dst_input_expanded, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_35": {
                "variable": {
                    "value": "(dst_src_min_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pc_src_input_expanded - pc_dst_input_expanded, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.norm(pc_src_input_expanded - pc_dst_input_expanded, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_48": {
                "variable": {
                    "value": "self.cov_criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_59": {
                "variable": {
                    "value": "(val_max_pc, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_60": {
                "variable": {
                    "value": "(val_min_pc, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_62": {
                "variable": {
                    "value": "(val_max_kp, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_63": {
                "variable": {
                    "value": "(val_min_kp, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_102": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_src_input_expanded - pc_dst_input_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_105": {
                "variable": {
                    "value": "(src_dst_min_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pc_src_input_expanded - pc_dst_input_expanded, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.norm(pc_src_input_expanded - pc_dst_input_expanded, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp.repeat(1, 1, num_kp)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "t1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_80": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.single_side_chamfer(keypoint, pc)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_120": {
                "input": {
                    "value": "t1 - t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "torch.max(-lensqr + delta, torch.tensor([0.0]).cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_121": {
                "input": {
                    "value": "-lensqr + delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "Softplus_63": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(torch.rand(1, 3, self.opt.node_num // 2, self.opt.basis_num) - 0.5).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.n_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 2).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_94": {
                "variable": {
                    "value": "mask_row_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float() * node_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "x_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_decentered, sn_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_128": {
                "variable": {
                    "value": "scattered_first_masked_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first_pn_out_masked_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "first_pn_out.gather(dim=2, index=first_gather_index) * mask_row_max.unsqueeze(1).float()",
                            "BinOp"
                        ],
                        [
                            "first_pn_out.gather(dim=2, index=first_gather_index) * mask_row_max.unsqueeze(1).float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "min_idx.unsqueeze(1).expand(B, first_pn_out.size()[1], kN)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "first_pn_out_fusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_pn_out, scattered_first_masked_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "node_feature_aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(second_pn_out_masked_max, knn_feature_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "x_init_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_stack, sn_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(torch.rand(1, 3, self.opt.node_num // 2, self.opt.basis_num) - 0.5).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.n_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 2).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_190": {
                "variable": {
                    "value": "self.R_n_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(torch.rand(1) - 0.5).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "x_init_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_stack, sn_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_269": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_287": {
                "variable": {
                    "value": "self.basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(torch.rand(1, 3, self.opt.node_num // 2, self.opt.basis_num) - 0.5).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_290": {
                "variable": {
                    "value": "self.n_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 2).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_291": {
                "variable": {
                    "value": "self.R_n_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(torch.rand(1) - 0.5).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_307": {
                "variable": {
                    "value": "mask_row_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_334": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float() * node_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "x_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_decentered, sn_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_359": {
                "variable": {
                    "value": "scattered_first_masked_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first_pn_out_masked_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "first_pn_out.gather(dim=2, index=first_gather_index) * mask_row_max.unsqueeze(1).float()",
                            "BinOp"
                        ],
                        [
                            "first_pn_out.gather(dim=2, index=first_gather_index) * mask_row_max.unsqueeze(1).float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "min_idx.unsqueeze(1).expand(B, first_pn_out.size()[1], kN)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "first_pn_out_fusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_pn_out, scattered_first_masked_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "node_feature_aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(second_pn_out_masked_max, knn_feature_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "x_init_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_stack, sn_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_80": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "x_stack_data_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_stack_data_unsqueeze * mask.float()",
                            "BinOp"
                        ],
                        [
                            "x_stack_data_unsqueeze * mask.float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_123": {
                "type": {
                    "value": "first_pn_out.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_136": {
                "type": {
                    "value": "second_pn_out.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_189": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_290": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_317": {
                "input": {
                    "value": "x_stack_data_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_stack_data_unsqueeze * mask.float()",
                            "BinOp"
                        ],
                        [
                            "x_stack_data_unsqueeze * mask.float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_346": {
                "type": {
                    "value": "first_pn_out.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_369": {
                "type": {
                    "value": "second_pn_out.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.opt.node_num // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.opt.basis_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_187": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.opt.node_num // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.opt.basis_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_190": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_288": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.opt.node_num // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.opt.basis_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_291": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/options_detector.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % self.opt.gpu_ids[0] if torch.cuda.is_available() and len(self.opt.gpu_ids) >= 1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KeypointsDataset(root, 'test', opt_detector)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt_detector.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt_detector.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "detector_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "root + opt_detector.dataset + '/checkpoints/' + opt_detector.ckpt_model + '/checkpoint.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_49": {
                "*size": {
                    "value": "anc_pc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KeypointsDataset(root, 'train', opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KeypointsDataset(root, 'test', opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, 'checkpoint.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_117": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'model_state_dict': model.detector.state_dict(), 'optimizer_state_dict': model.optimizer_detector.state_dict(), 'loss': model.test_loss_average.item()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, 'checkpoint.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "util/som.py": {
        "torch": {
            "from_numpy_28": {
                "variable": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(M).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_39": {
                "variable": {
                    "value": "(_, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eq_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_idx_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], M, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.arange(M).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_52": {
                "variable": {
                    "value": "(mask_row_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 2, 3, 1).contiguous().view(B, M, k * N).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "torch.cat(tuple(mask_list), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "self.node_idx_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(self.rows * self.cols).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "self.node_init_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pf.node.transpose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_109": {
                "variable": {
                    "value": "weighting_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(self.init_weighting_matrix) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_136": {
                "variable": {
                    "value": "(_, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_140": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_idx_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], M, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.arange(M).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_141": {
                "variable": {
                    "value": "(mask_row_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 2, 3, 1).contiguous().view(B, M, k * N).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "torch.cat(tuple(mask_list), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_162": {
                "variable": {
                    "value": "(_, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_166": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_idx_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], M, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.arange(M).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_168": {
                "variable": {
                    "value": "(mask_row_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 2, 3, 1).contiguous().view(B, M, k * N).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "torch.cat(tuple(mask_list), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "x_expanded_masked_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_expanded_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_expanded * mask.unsqueeze(0).expand_as(x_expanded)",
                            "BinOp"
                        ],
                        [
                            "x_expanded * mask.unsqueeze(1).expand_as(x_expanded)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_228": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % gpu_id if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "variable": {
                    "value": "self.node_init_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pf.node.transpose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_271": {
                "variable": {
                    "value": "weighting_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(self.init_weighting_matrix) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_287": {
                "variable": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(self.node_num).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_298": {
                "variable": {
                    "value": "(_, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eq_303": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_idx_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], M, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.arange(M).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_310": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(mask_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "min_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(min_idx_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_312": {
                "variable": {
                    "value": "(mask_row_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 2, 3, 1).contiguous().view(B, M, k * N).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "torch.cat(tuple(mask_list), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_324": {
                "variable": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(self.node_num).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_336": {
                "variable": {
                    "value": "(_, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_341": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_idx_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], M, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.arange(M).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_342": {
                "variable": {
                    "value": "(mask_row_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 2, 3, 1).contiguous().view(B, M, k * N).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "torch.cat(tuple(mask_list), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_360": {
                "variable": {
                    "value": "(_, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(diff ** 2).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_365": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_idx_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], M, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(1).expand(min_idx.size()[0], self.rows * self.cols).float()",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols, k)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ],
                        [
                            "min_idx.unsqueeze(2).expand(min_idx.size()[0], min_idx.size()[1], self.rows * self.cols)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.arange(M).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).expand_as(min_idx_expanded)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).unsqueeze(3).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.arange(self.node_num).astype(np.int64)).to(device)",
                            "Call"
                        ],
                        [
                            "node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ],
                        [
                            "self.node_idx_list.unsqueeze(0).unsqueeze(0).expand_as(min_idx_expanded).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_367": {
                "variable": {
                    "value": "(mask_row_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 2, 3, 1).contiguous().view(B, M, k * N).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "torch.cat(tuple(mask_list), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_371": {
                "variable": {
                    "value": "x_expanded_masked_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_expanded_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_expanded * mask.unsqueeze(0).expand_as(x_expanded)",
                            "BinOp"
                        ],
                        [
                            "x_expanded * mask.unsqueeze(1).expand_as(x_expanded)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "np.outer(ax, ay).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "ndarray": {
                    "value": "np.outer(ax, ay).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_167": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 2, 3, 1).contiguous().view(B, M, k * N).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "torch.cat(tuple(mask_list), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_250": {
                "input": {
                    "value": "self.node_init_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_366": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 2, 3, 1).contiguous().view(B, M, k * N).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).int()",
                            "Call"
                        ],
                        [
                            "torch.cat(tuple(mask_list), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ],
                        [
                            "torch.eq(min_idx_expanded, node_idx_list).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_109": {
                "input": {
                    "value": "self.init_weighting_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_271": {
                "input": {
                    "value": "self.init_weighting_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "mean_48": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_48": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}