{
    "exp_classification_mention.py": {
        "tensorflow": {}
    },
    "exp_classification_pair.py": {
        "tensorflow": {}
    },
    "exp_unsup.py": {
        "tensorflow": {}
    },
    "models/sup/classification/__init__.py": {
        "tensorflow": {
            "Input_48": {
                "variable": {
                    "value": "input_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.z_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "z_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N * n_samples, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "nn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nn_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(z_flat, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nn_out, (N, n_samples, self.n_classes))",
                            "Call"
                        ],
                        [
                            "self.model(z_flat, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nn_out, (N, n_samples, self.n_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, n_samples, self.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.log(nn_out + 1e-05)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_89": {
                "variable": {
                    "value": "r_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "log_p_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "r_one_hot * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "z_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N * n_samples, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "nn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nn_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(z_flat, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nn_out, (N, n_samples, self.n_classes))",
                            "Call"
                        ],
                        [
                            "self.model(z_flat, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nn_out, (N, n_samples, self.n_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, n_samples, self.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.log(nn_out + 1e-05)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_121": {
                "variable": {
                    "value": "r_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.math.log(nn_out + 1e-05), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.math.log(nn_out + 1e-05), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_58": {
                "inputs": {
                    "value": "input_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(self.z_dim,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=self.n_classes, activation='softmax', use_bias=False)(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_56": {
                "units": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_87": {
                "x": {
                    "value": "nn_out + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_119": {
                "x": {
                    "value": "nn_out + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_53": {
                "units": {
                    "value": "ff_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['ff_units']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "ff_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['ff_activation']",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Concatenate_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "size_28": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/unsup/generative/__init__.py": {
        "tensorflow": {
            "Input_63": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.emb_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_64": {
                "variable": {
                    "value": "input_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.emb_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_65": {
                "variable": {
                    "value": "input_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.u_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_116": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.emb_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_117": {
                "variable": {
                    "value": "input_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.emb_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_118": {
                "variable": {
                    "value": "input_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.z_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_119": {
                "variable": {
                    "value": "input_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_len, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_186": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_batch, n_samples, self.u_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "u_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.normal((n_batch, n_samples, self.u_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N * n_samples, self.u_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda l: l / tf.norm(l, axis=-1, keepdims=True))(input_x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, 1, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda l: l / tf.norm(l, axis=-1, keepdims=True))(input_y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, 1, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_mean_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, n_samples, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "z_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_var_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, n_samples, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_227": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "z_mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda l: l / tf.norm(l, axis=-1, keepdims=True))(input_x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, 1, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda l: l / tf.norm(l, axis=-1, keepdims=True))(input_y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, 1, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "z_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_mean + tf.sqrt(z_var) * e",
                            "BinOp"
                        ],
                        [
                            "self.get_samples_z(u, x, y, n_samples, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N * n_samples, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_271": {
                "variable": {
                    "value": "c_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(c, (N, 1, self.max_len, self.emb_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_samples, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "c_rep_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(c, (N, 1, self.max_len, self.emb_dim)), (1, n_samples, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N * n_samples, self.max_len, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "nn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nn_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model_context([x_rep_flat, y_rep_flat, z_flat, c_rep_flat], training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nn_out, (N, n_samples, self.max_len, self.emb_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, n_samples, self.max_len, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_277": {
                "variable": {
                    "value": "c_mask_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(c_mask, (N, 1, self.max_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "variable": {
                    "value": "log_pot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c_rep * nn_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_280": {
                "variable": {
                    "value": "log_pot",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c_mask_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(c_mask, (N, 1, self.max_len)), (1, n_samples, 1))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "log_pot",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(c_rep * nn_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(c_mask_rep, log_pot, tf.zeros_like(log_pot))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(log_pot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "nn_out_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nn_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model_context([x_rep_flat, y_rep_flat, z_flat, c_rep_flat], training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nn_out, (N, n_samples, self.max_len, self.emb_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N * n_samples * self.max_len, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_283": {
                "variable": {
                    "value": "log_norm_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(nn_out_flat, emb_matrix_words, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "log_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_norm_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_logsumexp(tf.matmul(nn_out_flat, emb_matrix_words, transpose_b=True), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, n_samples, self.max_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_286": {
                "variable": {
                    "value": "log_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c_mask_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(c_mask, (N, 1, self.max_len)), (1, n_samples, 1))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "log_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(log_norm_flat, (N, n_samples, self.max_len))",
                            "Call"
                        ],
                        [
                            "tf.where(c_mask_rep, log_norm, tf.zeros_like(log_norm))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(log_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_288": {
                "variable": {
                    "value": "c_mask_rep_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_mask_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(c_mask, (N, 1, self.max_len)), (1, n_samples, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_290": {
                "variable": {
                    "value": "log_p_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(log_pot - log_norm, axis=2) / tf.reduce_sum(c_mask_rep_float, axis=2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_82": {
                "inputs": {
                    "value": "[input_x, input_y, input_u]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[mean, var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_144": {
                "inputs": {
                    "value": "[input_x, input_y, input_z, input_c]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=self.emb_dim)(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_67": {
                "function": {
                    "value": "lambda l: l / tf.norm(l, axis=-1, keepdims=True)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_68": {
                "function": {
                    "value": "lambda l: l / tf.norm(l, axis=-1, keepdims=True)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Multiply_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_78": {
                "units": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_80": {
                "units": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.exp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RepeatVector_126": {
                "n": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_128": {
                "function": {
                    "value": "lambda l: l[:, :-1]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ZeroPadding1D_129": {
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Concatenate_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RepeatVector_136": {
                "n": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_142": {
                "units": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_165": {
                "input_tensor": {
                    "value": "var_rec + mean_rec ** 2 - tf.ones_like(mean_rec) - tf.math.log(var_rec)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_216": {
                "input": {
                    "value": "tf.reshape(x, (N, 1, self.emb_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_218": {
                "input": {
                    "value": "tf.reshape(y, (N, 1, self.emb_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_262": {
                "input": {
                    "value": "tf.reshape(x, (N, 1, self.emb_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_264": {
                "input": {
                    "value": "tf.reshape(y, (N, 1, self.emb_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, 1, self.max_len, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "tensor": {
                    "value": "c_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, 1, self.max_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_280": {
                "input": {
                    "value": "log_pot",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(c_rep * nn_out, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(c_mask_rep, log_pot, tf.zeros_like(log_pot))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_283": {
                "a": {
                    "value": "nn_out_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(nn_out, (N * n_samples * self.max_len, self.emb_dim))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "emb_matrix_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_286": {
                "input": {
                    "value": "log_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(log_norm_flat, (N, n_samples, self.max_len))",
                            "Call"
                        ],
                        [
                            "tf.where(c_mask_rep, log_norm, tf.zeros_like(log_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_75": {
                "units": {
                    "value": "ff_units",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs['ff_units']",
                            "Subscript"
                        ],
                        [
                            "kwargs['ff_units']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "ff_activation",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs['ff_activation']",
                            "Subscript"
                        ],
                        [
                            "kwargs['ff_activation']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Concatenate_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_124": {
                "units": {
                    "value": "ff_units",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs['ff_units']",
                            "Subscript"
                        ],
                        [
                            "kwargs['ff_units']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "ff_activation",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs['ff_activation']",
                            "Subscript"
                        ],
                        [
                            "kwargs['ff_activation']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_132": {
                "rate": {
                    "value": "token_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['token_drop']",
                            "Subscript"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "[None, self.max_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_139": {
                "units": {
                    "value": "lstm_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['lstm_units']",
                            "Subscript"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Concatenate_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_228": {
                "x": {
                    "value": "z_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z_var_flat, (N, n_samples, self.z_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_290": {
                "input_tensor": {
                    "value": "c_mask_rep_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(c_mask_rep, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomNormal_79": {
                "stddev": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_165": {
                "x": {
                    "value": "var_rec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_67": {
                "tensor": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_68": {
                "tensor": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_165": {
                "input": {
                    "value": "mean_rec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "size_38": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/unsup/recognition/__init__.py": {
        "tensorflow": {
            "Input_63": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.emb_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_64": {
                "variable": {
                    "value": "input_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.emb_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_65": {
                "variable": {
                    "value": "input_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_len, self.emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_66": {
                "variable": {
                    "value": "input_c_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_len,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_122": {
                "variable": {
                    "value": "u_mean_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(u_mean, (N, 1, self.u_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_123": {
                "variable": {
                    "value": "u_var_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(u_var, (N, 1, self.u_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, n_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_125": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "u_mean_rep.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_90": {
                "inputs": {
                    "value": "[input_x, input_y, input_c, input_c_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[mean, var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Concatenate_75": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Lambda_77": {
                "function": {
                    "value": "lambda l: l / tf.norm(l, axis=-1, keepdims=True)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_78": {
                "function": {
                    "value": "lambda l: l / tf.norm(l, axis=-1, keepdims=True)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Multiply_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_87": {
                "units": {
                    "value": "self.u_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_88": {
                "units": {
                    "value": "self.u_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.exp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "u_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, 1, self.u_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "tensor": {
                    "value": "u_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, 1, self.u_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LSTM_72": {
                "units": {
                    "value": "lstm_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['lstm_units']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LSTM_73": {
                "units": {
                    "value": "lstm_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['lstm_units']",
                            "Subscript"
                        ]
                    ]
                },
                "go_backwards": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_85": {
                "units": {
                    "value": "ff_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['ff_units']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "ff_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['ff_activation']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_126": {
                "x": {
                    "value": "u_var_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(u_var, (N, 1, self.u_dim)), (1, n_samples, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_77": {
                "tensor": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_78": {
                "tensor": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "size_31": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "run/sup/__init__.py": {
        "tensorflow": {
            "Checkpoint_171": {
                "variable": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimiser": {
                    "value": "self.trainer.optimiser",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_487": {
                "variable": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimiser": {
                    "value": "self.trainer.optimiser",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_379": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.int32(entities_x[n:n + n_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_380": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.int32(entities_y[n:n + n_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_381": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.int32(contexts[n:n + n_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_382": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.int32(labels[n:n + n_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_716": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.int32(entities_x[n:n + n_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_717": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.int32(entities_y[n:n + n_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_718": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.int32(labels[n:n + n_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run/unsup/__init__.py": {
        "tensorflow": {
            "MirroredStrategy_48": {
                "variable": {
                    "value": "self.strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Checkpoint_61": {
                "variable": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimiser": {
                    "value": "self.trainer.optimiser",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_classification_mention.py": {
        "tensorflow": {
            "set_seed_18": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_classification_pair.py": {
        "tensorflow": {
            "set_seed_18": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_unsup.py": {
        "tensorflow": {
            "set_seed_16": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainers/sup/__init__.py": {
        "tensorflow": {
            "Checkpoint_33": {
                "variable": {
                    "value": "checkpoint_unsup",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimiser": {
                    "value": "self.trainer_unsup.optimiser",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "log_p_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_p_r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.log_p_r(z, r, n_samples, training=training)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, c, r, n_samples, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, c, r, n_samples, training=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.model.log_p_r(z, r, n_samples, training=training)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, r, n_samples, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, r, n_samples, training=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_201": {
                "variable": {
                    "value": "checkpoint_unsup",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimiser": {
                    "value": "self.trainer_unsup.optimiser",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_264": {
                "variable": {
                    "value": "log_p_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_p_r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.log_p_r(z, r, n_samples, training=training)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, c, r, n_samples, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, c, r, n_samples, training=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.model.log_p_r(z, r, n_samples, training=training)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, r, n_samples, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, r, n_samples, training=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "log_p_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_p_r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.log_p_r(z, r, n_samples, training=training)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, c, r, n_samples, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, c, r, n_samples, training=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.model.log_p_r(z, r, n_samples, training=training)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, r, n_samples, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, r, n_samples, training=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_294": {
                "variable": {
                    "value": "log_p_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_p_r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.log_p_r(z, r, n_samples, training=training)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, c, r, n_samples, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, c, r, n_samples, training=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.model.log_p_r(z, r, n_samples, training=training)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, r, n_samples, training=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ],
                        [
                            "self.log_p_r(x, y, r, n_samples, training=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(log_p_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainers/unsup/__init__.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "self.emb_matrix_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "emb_matrix_entities",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emb_matrix_entities",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "self.emb_matrix_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "emb_matrix_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "emb_matrix_words",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_73": {
                "variable": {
                    "value": "x_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_matrix_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_74": {
                "variable": {
                    "value": "y_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_matrix_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_75": {
                "variable": {
                    "value": "c_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_matrix_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "not_equal_76": {
                "variable": {
                    "value": "c_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.pad_ind",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_104": {
                "variable": {
                    "value": "x_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_matrix_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_105": {
                "variable": {
                    "value": "y_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_matrix_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_141": {
                "variable": {
                    "value": "x_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_matrix_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_142": {
                "variable": {
                    "value": "y_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_matrix_entities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_143": {
                "variable": {
                    "value": "c_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb_matrix_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "not_equal_144": {
                "variable": {
                    "value": "c_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.pad_ind",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_150": {
                "variable": {
                    "value": "c_mask_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.not_equal(c, self.pad_ind)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(c, self.pad_ind)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "c_mask_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(c_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_200": {
                "x": {
                    "value": "n_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "input_tensor": {
                    "value": "elbo",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_p_c - kl",
                            "BinOp"
                        ],
                        [
                            "log_p_c - beta * kl",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}