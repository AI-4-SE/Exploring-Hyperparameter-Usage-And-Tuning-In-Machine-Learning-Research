{
    "eval.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if t.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_mcmc_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "ens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_mcmc_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "ens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_mcmc_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_mcmc_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "accepts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_mcmc_steps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_53": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_66": {
                "f": {
                    "value": "config['net_weight_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cpu()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[config['batch_size'], config['im_ch'], config['im_sz'], config['im_sz']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0] for x in data[config['mcmc_init']]('./data/' + config['mcmc_init'], transform)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randn_like_142": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "t.autograd.Variable(x_s_t_0.clone(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "t.autograd.Variable(x_s_t_0.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_93": {
                "n": {
                    "value": "q.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_77": {
                "*size": {
                    "value": "[config['batch_size'], config['im_ch'], config['im_sz'], config['im_sz']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_112": {
                "outputs": {
                    "value": "en.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_s_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_138": {
                "outputs": {
                    "value": "en.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_s_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_148": {
                "outputs": {
                    "value": "en_prop.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_prop]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_like_156": {
                "input": {
                    "value": "en",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "f(x_s_t) / temp",
                            "BinOp"
                        ],
                        [
                            "f(x_s_t) / temp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_156": {
                "input": {
                    "value": "joint_en_orig - joint_en_prop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "(p ** 2).view(x_s_t.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_153": {
                "input": {
                    "value": "(p_prop ** 2).view(x_s_t.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_114": {
                "input": {
                    "value": "x_s_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "t.autograd.Variable(x_s_t_0.clone(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "t.autograd.Variable(x_s_t_0.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_90": {
                "*size": {
                    "value": "config['im_ch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nets.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, n_f, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_c, n_f, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=n_c, out_channels=n_f, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=n_f * 4 * 4 * 4, out_features=n_f * 8)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.theta(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "f_div_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.matmul(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(f, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_f",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_15": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "n_f",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_21": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "n_c",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_f",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "n_f",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_f * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "n_f * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_f * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_43": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "n_f * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "n_c",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_f",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "n_f",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_f * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_72": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "n_f * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_f * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "leak",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "n_f * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "train_data.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if t.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0] for x in data[config['data']]('./data/' + config['data'], transform)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "d_s_t_record",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_train_iters']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "r_s_t_record",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_train_iters']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "r_s_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_50": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_85": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.stack([x[0] for x in data[config['data']]('./data/' + config['data'], transform)]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_94": {
                "n": {
                    "value": "image_set.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "f.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "EXP_DIR + 'checkpoints/' + 'net_{:>06d}.pth'.format(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_100": {
                "input": {
                    "value": "x_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_q()",
                            "Call"
                        ],
                        [
                            "sample_image_set(q)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "grad_126": {
                "outputs": {
                    "value": "f(x_s_t).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_s_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_like_127": {
                "input": {
                    "value": "x_s_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.autograd.Variable(x_s_t_0.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_80": {
                "*size": {
                    "value": "config['im_ch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_114": {
                "variable": {
                    "value": "noise_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[config['batch_size'], config['im_ch'], config['im_sz'], config['im_sz']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_111": {
                "*size": {
                    "value": "[config['batch_size'], config['im_ch'], config['im_sz'], config['im_sz']]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train_toy.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if t.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "d_s_t_record",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_train_iters']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "r_s_t_record",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config['num_train_iters']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "r_s_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_48": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_75": {
                "*size": {
                    "value": "[config['s_t_0_size'], 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_84": {
                "n": {
                    "value": "state_set.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "f.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "EXP_DIR + 'checkpoints/' + 'net_{:>06d}.pth'.format(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_112": {
                "outputs": {
                    "value": "f(x_s_t).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_s_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_like_113": {
                "input": {
                    "value": "x_s_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.autograd.Variable(x_s_t_0.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_101": {
                "*size": {
                    "value": "[batch_size, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_99": {
                "*size": {
                    "value": "[batch_size, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "clamp_49": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_206": {
                "variable": {
                    "value": "xy_plot_torch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_79": {
                "input": {
                    "value": "t.sum(en_diffs[t_init:t_end] * en_diffs[t_init:t_end]) / (t_gap - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "std_81": {
                "input": {
                    "value": "grad_mags[t_init:t_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xy_plot_torch, y_vals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "grad_mags[t_init:t_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "en_diffs[t_init:t_end] * en_diffs[t_init:t_end]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_210": {
                "input": {
                    "value": "xy_plot_torch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.Tensor(self.xy_plot).view(-1, 1, 1, 1).to(next(f.parameters()).device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}