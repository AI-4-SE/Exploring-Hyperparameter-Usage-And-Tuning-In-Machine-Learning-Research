{
    "SCML.py": {
        "tensorflow": {
            "ConfigProto_237": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_239": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_58": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.user_positive_items_pairs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.negative_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.positive_social_pairs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.negative_social_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.score_user_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.score_neg_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_120": {
                "variable": {
                    "value": "users",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hyp_user_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_positive_items_pairs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "users",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_125": {
                "variable": {
                    "value": "pos_items",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hyp_item_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(self.item_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.item_embeddings, self.c)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_positive_items_pairs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_items",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_132": {
                "variable": {
                    "value": "neg_items",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hyp_item_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(self.item_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.item_embeddings, self.c)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.negative_samples[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_138": {
                "variable": {
                    "value": "loss_per_pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_distances - closest_negative_item_distances + self.rating_margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "rating_pair_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_per_pair",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(pos_distances - closest_negative_item_distances + self.rating_margin, 0, name='rating_pair_loss')",
                            "Call"
                        ],
                        [
                            "tf.maximum(pos_distances - closest_negative_item_distances + self.social_margin, 0, name='social_pair_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rating_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_160": {
                "variable": {
                    "value": "users",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hyp_user_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.positive_social_pairs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "social_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_165": {
                "variable": {
                    "value": "pos_neighbors",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hyp_user_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.positive_social_pairs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_neighbors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_172": {
                "variable": {
                    "value": "neg_neighbors",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hyp_user_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.negative_social_samples[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_177": {
                "variable": {
                    "value": "loss_per_pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_distances - closest_negative_item_distances + self.social_margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "social_pair_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_181": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_per_pair",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(pos_distances - closest_negative_item_distances + self.rating_margin, 0, name='rating_pair_loss')",
                            "Call"
                        ],
                        [
                            "tf.maximum(pos_distances - closest_negative_item_distances + self.social_margin, 0, name='social_pair_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "social_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_214": {
                "variable": {
                    "value": "user",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.embedding_lookup(hyp_user_embeddings, self.score_user_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_216": {
                "variable": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hyp_item_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(self.item_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.item_embeddings, self.c)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.score_neg_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_92": {
                "initial_value": {
                    "value": "tf.random_uniform([self.n_users, self.embed_dim], minval=-alpha, maxval=alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_94": {
                "initial_value": {
                    "value": "tf.random_normal([self.n_users, self.embed_dim], stddev=1 / self.embed_dim ** 0.5, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "initial_value": {
                    "value": "tf.random_uniform([self.n_items, self.embed_dim], minval=-alpha, maxval=alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "initial_value": {
                    "value": "tf.random_normal([self.n_items, self.embed_dim], stddev=1 / self.embed_dim ** 0.5, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_195": {
                "ref": {
                    "value": "self.user_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.user_embeddings, self.clip_norm, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_196": {
                "ref": {
                    "value": "self.item_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.item_embeddings, self.clip_norm, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_201": {
                "learning_rate": {
                    "value": "self.master_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_205": {
                "control_inputs": {
                    "value": "gds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "embedding_lookup_214": {
                "params": {
                    "value": "hyp_user_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ],
                        [
                            "self.manifold.expmap0(self.user_embeddings, self.c)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.score_user_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scope or function.__name__",
                            "BoolOp"
                        ]
                    ]
                },
                "default_name": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clip_by_norm_195": {
                "t": {
                    "value": "self.user_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_196": {
                "t": {
                    "value": "self.item_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "evaluator.py": {
        "tensorflow": {
            "top_k_25": {
                "input": {
                    "value": "self.model.item_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "k[-1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "manifolds/euclidean.py": {
        "tensorflow": {
            "reduce_sum_13": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_15": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x * y, axis=dim)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(res, -1)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_19": {
                "input_tensor": {
                    "value": "tf.square(p1 - p2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_19": {
                "x": {
                    "value": "p1 - p2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "manifolds/poincare.py": {
        "tensorflow": {
            "sqrt_20": {
                "variable": {
                    "value": "hyp_norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.sqdist(x, tf.zeros_like(x), c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_21": {
                "variable": {
                    "value": "hyp_norm_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.sqdist(y, tf.zeros_like(y), c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_22": {
                "variable": {
                    "value": "norm_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hyp_norm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(self.sqdist(x, tf.zeros_like(x), c))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hyp_norm_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(self.sqdist(y, tf.zeros_like(y), c))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_23": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(x, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.norm(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_24": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.norm(x, axis=-1), tf.norm(y, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(denominator, clip_value_min=self.eps[denominator.dtype], clip_value_max=tf.reduce_max(denominator))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.eps[denominator.dtype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.reduce_max(denominator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_26": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_mul",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(hyp_norm_x, hyp_norm_y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(x, y), axis=-1) / denominator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(norm_mul, cos_theta)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(res, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(cond, res_0, res_c)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "variable": {
                    "value": "x_sqnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_47": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 / (1.0 - c * x_sqnorm)",
                            "BinOp"
                        ],
                        [
                            "tf.where(cond, projected, x)",
                            "Call"
                        ],
                        [
                            "2 / sqrt_c / lam * artanh(sqrt_c * sub_norm) * sub / sub_norm",
                            "BinOp"
                        ],
                        [
                            "num / denom",
                            "BinOp"
                        ],
                        [
                            "w + 2 * (a * u + b * v) / d",
                            "BinOp"
                        ],
                        [
                            "self._gyration(y, -x, u, c) * lambda_x / lambda_y",
                            "BinOp"
                        ],
                        [
                            "self._gyration(y, -x, u, c) * lambda_x / lambda_y",
                            "BinOp"
                        ],
                        [
                            "2 * u / lambda_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_57": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(x, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_58": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(x, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_72": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "tf.tile(cond, [1, 1, 1, x.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, 1, x.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, x.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [x.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(tf.equal(mx, 0), axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, res_c.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x / norm * maxnorm",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_84": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(u, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(u_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ],
                        [
                            "self.safe_norm(u, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(u_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(u, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(u_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ],
                        [
                            "self.safe_norm(u, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(u_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_97": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sub_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(sub, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(sub_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_98": {
                "variable": {
                    "value": "sub_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "sub_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(sub, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(sub_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_107": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(u, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(u_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ],
                        [
                            "self.safe_norm(u, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(u_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(u, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(u_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ],
                        [
                            "self.safe_norm(u, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(u_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_115": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(p, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_116": {
                "variable": {
                    "value": "p_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(p, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(y, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_126": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 + 2 * c * xy + c ** 2 * x2 * y2",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(denom, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_127": {
                "variable": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 + 2 * c * xy + c ** 2 * x2 * y2",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(denom, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_134": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(x, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_135": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(x, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_141": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mx_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(mx, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mx_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_142": {
                "variable": {
                    "value": "mx_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "mx_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.safe_norm(mx, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(mx_norm, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_all_144": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.equal(mx, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_145": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "tf.tile(cond, [1, 1, 1, x.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, 1, x.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, x.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [x.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(tf.equal(mx, 0), axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, res_c.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, res_c.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "res_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tanh(mx_norm / x_norm * artanh(sqrt_c * x_norm)) * mx / (mx_norm * sqrt_c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_147": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "tf.tile(cond, [1, 1, 1, x.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, 1, x.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, x.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [x.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(tf.equal(mx, 0), axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, res_c.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "res_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(res_c)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "res_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tanh(mx_norm / x_norm * artanh(sqrt_c * x_norm)) * mx / (mx_norm * sqrt_c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_151": {
                "variable": {
                    "value": "u2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(u, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "variable": {
                    "value": "v2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(v, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "uv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "variable": {
                    "value": "uw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "variable": {
                    "value": "vw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_160": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 + 2 * c * uv + c2 * u2 * v2",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(d, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_161": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 + 2 * c * uv + c2 * u2 * v2",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(d, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_169": {
                "variable": {
                    "value": "uv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_186": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lambda_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._lambda_x(x, c)",
                            "Call"
                        ],
                        [
                            "self._lambda_x(x, c)",
                            "Call"
                        ],
                        [
                            "self._lambda_x(x, c)",
                            "Call"
                        ],
                        [
                            "self._lambda_x(x, c)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(lambda_x, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_187": {
                "variable": {
                    "value": "lambda_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "lambda_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._lambda_x(x, c)",
                            "Call"
                        ],
                        [
                            "self._lambda_x(x, c)",
                            "Call"
                        ],
                        [
                            "self._lambda_x(x, c)",
                            "Call"
                        ],
                        [
                            "self._lambda_x(x, c)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(lambda_x, clip_value_min=self.min_norm, clip_value_max=max_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_17": {
                "x": {
                    "value": "tf.reduce_sum(x ** 2, axis=axis, keep_dims=keep_dims) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_29": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(norm_mul, cos_theta)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(res, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(cond, res_0, res_c)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_34": {
                "x": {
                    "value": "tf.clip_by_value(dot, clip_value_min=self.eps[u.dtype], clip_value_max=tf.reduce_max(dot))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_48": {
                "t": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 / (1.0 - c * x_sqnorm)",
                            "BinOp"
                        ],
                        [
                            "tf.where(cond, projected, x)",
                            "Call"
                        ],
                        [
                            "2 / sqrt_c / lam * artanh(sqrt_c * sub_norm) * sub / sub_norm",
                            "BinOp"
                        ],
                        [
                            "num / denom",
                            "BinOp"
                        ],
                        [
                            "w + 2 * (a * u + b * v) / d",
                            "BinOp"
                        ],
                        [
                            "self._gyration(y, -x, u, c) * lambda_x / lambda_y",
                            "BinOp"
                        ],
                        [
                            "self._gyration(y, -x, u, c) * lambda_x / lambda_y",
                            "BinOp"
                        ],
                        [
                            "2 * u / lambda_x",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(result)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norm_x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sub_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(u_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(p_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(denom)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(x_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mx_norm)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(lambda_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_52": {
                "x": {
                    "value": "lambda_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._lambda_x(p, c)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_62": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "tf.tile(cond, [1, 1, 1, x.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, 1, x.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, x.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [x.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(tf.equal(mx, 0), axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, res_c.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "mx",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_23": {
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_25": {
                "input_tensor": {
                    "value": "tf.multiply(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_34": {
                "t": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.minkowski_dot(u, u, c, keepdim=keepdim)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.eps[u.dtype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.reduce_max(dot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_45": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "tf.tile(cond, [1, 1, 1, x.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, 1, x.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, x.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [x.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(tf.equal(mx, 0), axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, res_c.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, x.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_121": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_122": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_144": {
                "x": {
                    "value": "mx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(x, m)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, m)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_151": {
                "x": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_152": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_17": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keep_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_21": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_24": {
                "input_tensor": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.norm(x, axis=-1), tf.norm(y, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(denominator, clip_value_min=self.eps[denominator.dtype], clip_value_max=tf.reduce_max(denominator))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_25": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tile_66": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "tf.tile(cond, [1, 1, 1, x.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, 1, x.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, x.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [x.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(tf.equal(mx, 0), axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, res_c.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, x.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "values": {
                    "value": "[K + sqnorm, 2 * sqrtK * x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_34": {
                "input_tensor": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.minkowski_dot(u, u, c, keepdim=keepdim)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_68": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "tf.tile(cond, [1, 1, 1, x.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, 1, x.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, x.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [x.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(tf.equal(mx, 0), axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(cond, [1, res_c.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "math_utils.py": {
        "tensorflow": {
            "reduce_max_19": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "asinh_32": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cosh_7": {
                "x": {
                    "value": "tf.clip_by_value(x, clip_value_min=-clamp, clip_value_max=clamp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sinh_11": {
                "x": {
                    "value": "tf.clip_by_value(x, clip_value_min=-clamp, clip_value_max=clamp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "x": {
                    "value": "tf.clip_by_value(x, clip_value_min=-clamp, clip_value_max=clamp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_21": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "max_value < 1.0 + 1e-07",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1.0 + 1e-07",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_value",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "acosh_22": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(x, clip_value_min=1.0 + 1e-07, clip_value_max=max_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atanh_38": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(x, clip_value_min=tf.constant([-1], dtype=tf.float32) + 1e-07, clip_value_max=tf.constant([1], dtype=tf.float32) - 1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_7": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clamp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ],
                        [
                            "15",
                            "MethodArgument"
                        ],
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_11": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clamp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ],
                        [
                            "15",
                            "MethodArgument"
                        ],
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_15": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clamp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ],
                        [
                            "15",
                            "MethodArgument"
                        ],
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cond_24": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "max_value < 1.0 + 1e-16",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1.0 + 1e-16",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_value",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "acosh_25": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(x, clip_value_min=1.0 + 1e-16, clip_value_max=max_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atanh_40": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(x, clip_value_min=tf.constant([-1], dtype=tf.float64) + 1e-16, clip_value_max=tf.constant([1], dtype=tf.float64) - 1e-16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_22": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0 + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(max_value < 1.0 + 1e-07, lambda : 1.0 + 1e-07, lambda : max_value)",
                            "Call"
                        ],
                        [
                            "tf.cond(max_value < 1.0 + 1e-16, lambda : 1.0 + 1e-16, lambda : max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_38": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "tf.constant([-1], dtype=tf.float32) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.constant([1], dtype=tf.float32) - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_25": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0 + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(max_value < 1.0 + 1e-07, lambda : 1.0 + 1e-07, lambda : max_value)",
                            "Call"
                        ],
                        [
                            "tf.cond(max_value < 1.0 + 1e-16, lambda : 1.0 + 1e-16, lambda : max_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_40": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "tf.constant([-1], dtype=tf.float64) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.constant([1], dtype=tf.float64) - 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_38": {
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_40": {
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}