{
    "monorun/apis/inference.py": {
        "torch": {
            "set_grad_enabled_146": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monorun/apis/test.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monorun/core/bbox_3d/coord_coder/noc_coder.py": {
        "torch": {}
    },
    "monorun/core/bbox_3d/iou_calculators/bbox3d_iou_calculator.py": {
        "torch": {
            "min_141": {
                "variable": {
                    "value": "min_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, z_axis] + boxes[:, z_axis + 3] * (1 - z_center)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_145": {
                "variable": {
                    "value": "max_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, z_axis] - boxes[:, z_axis + 3] * z_center",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_151": {
                "variable": {
                    "value": "volumn1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_152": {
                "variable": {
                    "value": "volumn2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qboxes[:, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_196": {
                "variable": {
                    "value": "vol_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_197": {
                "variable": {
                    "value": "vol_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_198": {
                "variable": {
                    "value": "dim_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "prod_199": {
                "variable": {
                    "value": "vol_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_inter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(dim_1, dim_2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monorun/core/bbox_3d/iou_calculators/rotate_iou_calculator.py": {
        "torch": {
            "current_stream_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monorun/core/bbox_3d/masked_dense_target.py": {
        "torch": {
            "cat_16": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(targets, dim=0)",
                            "Call"
                        ],
                        [
                            "roi_align(gt_dense, rois, dense_size, 1.0, 0, 'avg', True).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "targets.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros((0, 3) + dense_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "weights / weights_mean.clamp(min=eps)",
                            "BinOp"
                        ],
                        [
                            "mask.squeeze(-1) > eps",
                            "Compare"
                        ],
                        [
                            "weights.unsqueeze(1).to(targets.dtype)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros((0, 1) + dense_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_18": {
                "variable": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "weights / weights_mean.clamp(min=eps)",
                            "BinOp"
                        ],
                        [
                            "mask.squeeze(-1) > eps",
                            "Compare"
                        ],
                        [
                            "weights.unsqueeze(1).to(targets.dtype)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros((0, 1) + dense_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_31": {
                "variable": {
                    "value": "pos_proposals_clip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_proposals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_assigned_gt_inds[:, None].to(pos_proposals_clip.dtype), pos_proposals_clip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/core/bbox_3d/proj_error_coder/distance_invar_proj_error_coder.py": {
        "torch": {
            "log_54": {
                "input": {
                    "value": "coords_2d_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords_3d_var.new_empty((n, 2, h, w))",
                            "Call"
                        ],
                        [
                            "(coords_2d_var * (self.ref_focal_y * self.epistemic_std_gain) ** 2 + (2 * proj_logstd).exp() * self.scaling_denomitor ** 2) / distance_.square()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_57": {
                "input": {
                    "value": "self.scaling_denomitor / distance_",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/core/bbox_3d/rotation_coder/vec2d_rotation_coder.py": {
        "torch": {
            "cat_15": {
                "variable": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.cos(angles), torch.sin(angles))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_16": {
                "input": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_17": {
                "input": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/core/bbox_3d/samplers/iou3d_balanced_sampler.py": {
        "torch": {
            "sum_24": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ious >= self.pos_iou_thr",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_like_32": {
                "variable": {
                    "value": "sampling_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_42": {
                "variable": {
                    "value": "keeprate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "neg_keeprate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "num_neg_max / num_neg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_52": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/losses/kl_loss_mv.py": {
        "torch": {
            "logdet_18": {
                "variable": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_23": {
                "input": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logdet(inv_cov)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_23": {
                "input": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logdet(inv_cov)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "monorun/models/losses/robust_kl_loss.py": {
        "torch": {
            "exp_20": {
                "variable": {
                    "value": "inverse_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-logstd",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_20": {
                "variable": {
                    "value": "inverse_std",
                    "type": "variable",
                    "possible_values": []
                },
                "max": {
                    "value": "1 / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_19": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_13": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_22": {
                "condition": {
                    "value": "diff_weighted < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * torch.square(diff_weighted)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (diff_weighted - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_27": {
                "input": {
                    "value": "inverse_std.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_23": {
                "input": {
                    "value": "diff_weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff * inverse_std",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "monorun/models/losses/smooth_l1_loss.py": {
        "torch": {
            "where_19": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_18": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_11": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/necks/fpn_plus.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self.lower_fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_72": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "prev_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laterals[i - 1].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_81": {
                "input": {
                    "value": "laterals[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2 ** (self.num_lower_outs - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_102": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_116": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/roi_heads/bbox_3d_heads/dense_decoders/fcn_noc_decoder.py": {
        "torch": {
            "ModuleList_93": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.convs_upsampled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.latent_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout2d_156": {
                "variable": {
                    "value": "self.dropout2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout2d_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_256": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "all_noc_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_232": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "all_pred.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "all_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/roi_heads/bbox_3d_heads/global_extractors/fc_extractor.py": {
        "torch": {
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels * self.roi_feat_area",
                            "BinOp"
                        ],
                        [
                            "self.fc_out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim_dim + self.latent_channels",
                            "BinOp"
                        ],
                        [
                            "out_dim_reg * self.num_classes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_78": {
                "variable": {
                    "value": "self.dropout2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout2d_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_137": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "dim_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dim_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._get_dim_target_single(*args) for args in zip(pos_assigned_gt_inds, gt_bboxes_3d, gt_labels)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.cat(dim_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/roi_heads/bbox_3d_heads/global_extractors/fc_extractor_monte_carlo.py": {
        "torch": {
            "dropout2d_12": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_17": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "var_mean_53": {
                "variable": {
                    "value": "(dim_latent_var, dim_latent_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_latent_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_latent_pred.view(self.num_samples, -1, (self.dim_dim + self.latent_channels) * num_actual_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.repeat(self.num_samples, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "x.view(self.num_samples, -1, x.size(1))",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_68": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/roi_heads/bbox_3d_heads/optimizers/uncert_prop_pnp_optimizer.py": {
        "torch": {
            "Parameter_44": {
                "variable": {
                    "value": "self.cov_calib_logscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((4,), 0, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_96": {
                "variable": {
                    "value": "cov_calib_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cov_calib_logscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_45": {
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_73": {
                "input": {
                    "value": "-coords_2d_logstd",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_154": {
                "variable": {
                    "value": "pose_cov_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_cov + torch.eye(pose_cov.size(-1), dtype=pose_cov.dtype, device=pose_cov.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[yaw_diff, t_vec_diff]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_138": {
                "input": {
                    "value": "rot_pred - rot_targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "(t_vec_pred, dimensions_pred, yaw_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_154": {
                "n": {
                    "value": "pose_cov.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pose_cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pose_cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/roi_heads/bbox_3d_heads/reprojection_heads/uncert_projection_head.py": {
        "torch": {
            "sin_50": {
                "variable": {
                    "value": "sin_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose[..., 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_51": {
                "variable": {
                    "value": "cos_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose[..., 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_75": {
                "variable": {
                    "value": "coords_2d_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords_2d_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords_2d_proj / coord_z.clamp(min=self.z_min)",
                            "BinOp"
                        ],
                        [
                            "torch.min(coords_2d_proj, coords_2d_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_94": {
                "variable": {
                    "value": "pos_bboxes_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes_3d_single[pos_assigned_gt_inds_single] for (gt_bboxes_3d_single, pos_assigned_gt_inds_single) in zip(gt_bboxes_3d, pos_assigned_gt_inds)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "pos_cam_intrinsic",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_cam_intrinsic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pos_cam_intrinsic + [cam_intrinsic_single] * len(res.pos_inds)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(pos_cam_intrinsic, dim=0)",
                            "Call"
                        ],
                        [
                            "cam_intrinsic[0].new_zeros((0, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_101": {
                "variable": {
                    "value": "pos_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_bboxes_3d[:, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_108": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/roi_heads/bbox_3d_heads/score_heads/mlp_score_head.py": {
        "torch": {
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.pose_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.fused_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_indices_101": {
                "variable": {
                    "value": "(cov_x_inds, cov_y_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "row": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "col": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pose_cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[yaw, t_vec, pose_cov_tril, dimensions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, reg_fc_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "var_mean_171": {
                "variable": {
                    "value": "(var, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_last_layer_dim if i == 0 else self.pose_fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.pose_fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_last_layer_dim if i == 0 else self.pose_fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/models/roi_heads/monorun_roi_head.py": {
        "torch": {
            "cat_294": {
                "variable": {
                    "value": "pos_gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "bboxes_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dimensions, t_vec, yaw, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_667": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_xywhr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_146": {
                "variable": {
                    "value": "roi_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "roi_labels == self.bbox_head.num_classes",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "bbox_results['cls_score'][:, :-1].argmax(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "roi_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_results['bbox_targets'][0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(roi_labels == self.bbox_head.num_classes, bbox_results['cls_score'][:, :-1].argmax(1), roi_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_581": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection_head.proj_error_coder.decode_logstd(proj_logstd, coords_3d_var, distances)",
                            "Call"
                        ],
                        [
                            "self._projection_decode(noc_results['proj_logstd'], coords_3d_var, distance_pred)['proj_logstd']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monorun/ops/least_squares/hessian.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[yaw.detach(), t_vec.detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "jac_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(jac_yaw, jac_t_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "jt_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jac_pose.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "error.view(bn * 4, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diagonal_59": {
                "variable": {
                    "value": "sum_grad_jac",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jt_error.view(-1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_59": {
                "variable": {
                    "value": "sum_grad_jac",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "jac_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(jac_yaw, jac_t_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jac_pose.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "jac_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((jac_yaw, jac_t_vec), dim=3).view(bn * 4, -1, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat((jac_yaw, jac_t_vec), dim=3).view(bn, -1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_31": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_61": {
                "outputs": {
                    "value": "sum_grad_jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diagonal(jac, dim1=1, dim2=2).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([yaw.detach(), t_vec.detach()], dim=1).repeat(1, 4).view(bn * 4, 4).requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "monorun/ops/least_squares/jacobian.py": {
        "torch": {
            "sin_8": {
                "variable": {
                    "value": "sin_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_8": {
                "variable": {
                    "value": "sin_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_9": {
                "variable": {
                    "value": "cos_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_9": {
                "variable": {
                    "value": "cos_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "k_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam_mats",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_yaw.new_zeros((bn, 3, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_22": {
                "variable": {
                    "value": "k_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam_mats",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "t_vec.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_22": {
                "variable": {
                    "value": "k_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "uv_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u_range[..., 0], v_range[..., 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "uv_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u_range[..., 1], v_range[..., 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_39": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uv_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((u_range[..., 0], v_range[..., 0]), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "jac_t_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(jac_t_vec_xy, jac_t_vec_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "jac_yaw_m1_r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack([-sin_yaw, cos_yaw], dim=1), torch.stack([-cos_yaw, -sin_yaw], dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "variable": {
                    "value": "jac_yaw_m1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jac_yaw_m1_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cam_mats[:, 0:2, [0, 2]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "jac_yaw_m1_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.stack([-sin_yaw, cos_yaw], dim=1), torch.stack([-cos_yaw, -sin_yaw], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_80": {
                "variable": {
                    "value": "jac_yaw_m2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnu,bx->bnux",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uv / z",
                            "BinOp"
                        ],
                        [
                            "torch.max(uv_lb, torch.min(uv_ub, uv))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_24": {
                "equation": {
                    "value": "bux,bnx->bnu",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(cam_mats, rot_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_39": {
                "input": {
                    "value": "uv_ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((u_range[..., 1], v_range[..., 1]), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_83": {
                "tensors": {
                    "value": "[cos_yaw, sin_yaw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_88": {
                "equation": {
                    "value": "bnux,bnx->bnu",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "jac_yaw_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jac_yaw_m1.unsqueeze(1) + jac_yaw_m2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_125": {
                "equation": {
                    "value": "bnu,bx->bnux",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uv / z",
                            "BinOp"
                        ],
                        [
                            "torch.max(uv_lb, torch.min(uv_ub, uv))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_76": {
                "tensors": {
                    "value": "[-sin_yaw, cos_yaw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_77": {
                "tensors": {
                    "value": "[-cos_yaw, -sin_yaw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "monorun/ops/least_squares/pnp_uncert.py": {
        "torch": {
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords_2d_istd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords_2d_istd / mean.clamp(min=self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "inverse_78": {
                "variable": {
                    "value": "pose_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exact_hessian(coords_2d, coords_2d_istd, coords_3d, cam_mats, u_range, v_range, z_min, r_vec, t_vec, inlier_mask)",
                            "Call"
                        ],
                        [
                            "approx_hessian(coords_2d, coords_2d_istd, coords_3d, cam_mats, u_range, v_range, z_min, r_vec, t_vec, inlier_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "symeig_81": {
                "variable": {
                    "value": "(eigval, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exact_hessian(coords_2d, coords_2d_istd, coords_3d, cam_mats, u_range, v_range, z_min, r_vec, t_vec, inlier_mask)",
                            "Call"
                        ],
                        [
                            "approx_hessian(coords_2d, coords_2d_istd, coords_3d, cam_mats, u_range, v_range, z_min, r_vec, t_vec, inlier_mask)",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_84": {
                "variable": {
                    "value": "h[~ret_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_85": {
                "variable": {
                    "value": "pose_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exact_hessian(coords_2d, coords_2d_istd, coords_3d, cam_mats, u_range, v_range, z_min, r_vec, t_vec, inlier_mask)",
                            "Call"
                        ],
                        [
                            "approx_hessian(coords_2d, coords_2d_istd, coords_3d, cam_mats, u_range, v_range, z_min, r_vec, t_vec, inlier_mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "monorun/runner/hooks/optimizer.py": {
        "torch": {
            "norm_17": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([torch.norm(p.grad.detach(), norm_type).to(device) for p in parameters])",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(norm_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "var_mean_46": {
                "variable": {
                    "value": "(var, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "var_mean_54": {
                "variable": {
                    "value": "(var, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_18": {
                "tensors": {
                    "value": "[torch.norm(p.grad.detach(), norm_type).to(device) for p in parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_19": {
                "input": {
                    "value": "p.grad.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(norm_type)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "current_device_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {}
    }
}