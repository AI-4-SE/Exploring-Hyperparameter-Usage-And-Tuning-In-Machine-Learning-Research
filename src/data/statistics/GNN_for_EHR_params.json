{
    "data/eicu/preprocess_eicu.py": {
        "sklearn": {
            "train_test_split_267": {
                "variable": {
                    "value": "(train_id, val_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "key_list",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_269": {
                "variable": {
                    "value": "(test_id, val_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "val_id",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "enable_eager_execution_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_298": {
                "variable": {
                    "value": "(batch_context, batch_sequence)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "context_features": {
                    "value": "context_features_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'patientId': tf.VarLenFeature(tf.string), 'label': tf.FixedLenFeature([1], tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "sequence_features": {
                    "value": "sequence_features_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'dx_ints': tf.VarLenFeature(tf.int64), 'proc_ints': tf.VarLenFeature(tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "squeeze_302": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(batch_context['label'], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordDataset_309": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "output_path + partition + '.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SequenceExample_223": {
                "variable": {
                    "value": "seqex",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_dense_321": {
                "variable": {
                    "value": "dx_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "data[0]['dx_ints']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ravel_321": {
                "variable": {
                    "value": "dx_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarLenFeature_291": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_292": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_295": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_296": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_302": {
                "x": {
                    "value": "batch_context['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_376": {
                "path": {
                    "value": "output_path + '/train.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_380": {
                "path": {
                    "value": "output_path + '/validation.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_384": {
                "path": {
                    "value": "output_path + '/test.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_dense_322": {
                "sp_input": {
                    "value": "data[0]['proc_ints']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ravel_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/mimic/preprocess_mimic.py": {
        "sklearn": {
            "train_test_split_302": {
                "variable": {
                    "value": "(train_ids, test_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "patient_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_303": {
                "variable": {
                    "value": "(test_ids, val_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "enable_eager_execution_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_332": {
                "variable": {
                    "value": "(batch_context, batch_sequence)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "context_features": {
                    "value": "context_features_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'patientId': tf.VarLenFeature(tf.string), 'label': tf.FixedLenFeature([1], tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "sequence_features": {
                    "value": "sequence_features_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'dx_ints': tf.VarLenFeature(tf.int64), 'proc_ints': tf.VarLenFeature(tf.int64), 'lab_ints': tf.VarLenFeature(tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "squeeze_336": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(batch_context['label'], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordDataset_343": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "output_path + partition + '.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SequenceExample_249": {
                "variable": {
                    "value": "seqex",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_dense_355": {
                "variable": {
                    "value": "dx_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "data[0]['dx_ints']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ravel_355": {
                "variable": {
                    "value": "dx_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarLenFeature_324": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_325": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_328": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_329": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_330": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_336": {
                "x": {
                    "value": "batch_context['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_405": {
                "path": {
                    "value": "output_path + '/train.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_409": {
                "path": {
                    "value": "output_path + '/validation.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_413": {
                "path": {
                    "value": "output_path + '/test.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_dense_356": {
                "sp_input": {
                    "value": "data[0]['proc_ints']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ravel_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_dense_358": {
                "sp_input": {
                    "value": "data[0]['lab_ints']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ravel_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "precision_recall_curve_47": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(length)",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(length)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_48": {
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__24": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability.squeeze(-1).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "np.array(data_list)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader.py": {
        "torch": {
            "from_numpy_53": {
                "ndarray": {
                    "value": "np.array(data_list)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_18": {
                "parameters": {
                    "value": "[copy.deepcopy(param) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(out_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data[:, edge[0, :], :], data[:, edge[1, :], :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "edge_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h[0, :, :], h[1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "variable": {
                    "value": "edge_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_83": {
                "variable": {
                    "value": "edge_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.leakyrelu(a.mm(edge_h).squeeze()) / np.sqrt(self.hidden_features * self.num_of_heads)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_86": {
                "variable": {
                    "value": "edge_e",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.leakyrelu(a.mm(edge_h).squeeze()) / np.sqrt(self.hidden_features * self.num_of_heads))",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge, edge_e, torch.Size([N, N]))",
                            "Call"
                        ],
                        [
                            "edge_e.add(torch.sparse.FloatTensor(zero_idx.repeat(2, 1), torch.ones(len(zero_idx)).to(device), torch.Size([N, N])))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size([N, N])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_87": {
                "variable": {
                    "value": "e_rowsum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.leakyrelu(a.mm(edge_h).squeeze()) / np.sqrt(self.hidden_features * self.num_of_heads))",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge, edge_e, torch.Size([N, N]))",
                            "Call"
                        ],
                        [
                            "edge_e.add(torch.sparse.FloatTensor(zero_idx.repeat(2, 1), torch.ones(len(zero_idx)).to(device), torch.Size([N, N])))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(size=(N, 1)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_95": {
                "variable": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.leakyrelu(a.mm(edge_h).squeeze()) / np.sqrt(self.hidden_features * self.num_of_heads))",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge, edge_e, torch.Size([N, N]))",
                            "Call"
                        ],
                        [
                            "edge_e.add(torch.sparse.FloatTensor(zero_idx.repeat(2, 1), torch.ones(len(zero_idx)).to(device), torch.Size([N, N])))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(data).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "data.squeeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_124": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_of_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_132": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.parameterize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(out_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "input_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nonzero.repeat(1, lengths), nonzero.repeat(lengths, 1).transpose(0, 1).contiguous().view((1, lengths ** 2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "nonzero",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nonzero, torch.LongTensor([[length + 1]]).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "output_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nonzero.repeat(1, lengths), nonzero.repeat(lengths, 1).transpose(0, 1).contiguous().view((1, lengths ** 2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_of_heads * hidden_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.attention(l, a, N, data, edge) for (l, a) in zip(self.W, self.a)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.attention(l, a, N, data, edge) for (l, a) in zip(self.W, self.a)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_108": {
                "variable": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.features_ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(none_graph_features, out_features // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(out_features + out_features // 2, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_159": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nonzero.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "data": {
                    "value": "torch.rand(size=(1, 2 * hidden_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_74": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(data).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "data.squeeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "any_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_79": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((data[:, edge[0, :], :], data[:, edge[1, :], :]), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_84": {
                "input": {
                    "value": "edge_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.leakyrelu(a.mm(edge_h).squeeze()) / np.sqrt(self.hidden_features * self.num_of_heads))",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(edge, edge_e, torch.Size([N, N]))",
                            "Call"
                        ],
                        [
                            "edge_e.add(torch.sparse.FloatTensor(zero_idx.repeat(2, 1), torch.ones(len(zero_idx)).to(device), torch.Size([N, N])))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_87": {
                "size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_96": {
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_e, data)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.attention(l, a, N, data, edge) for (l, a) in zip(self.W, self.a)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([self.attention(l, a, N, data, edge) for (l, a) in zip(self.W, self.a)], dim=0).mean(dim=0)",
                            "Call"
                        ],
                        [
                            "self.dropout(h_prime)",
                            "Call"
                        ],
                        [
                            "self.embed(torch.arange(N).long().to(device))",
                            "Call"
                        ],
                        [
                            "attn(input_edges, h_prime)",
                            "Call"
                        ],
                        [
                            "self.parameterize(h_prime).view(-1, 2, self.out_features)",
                            "Call"
                        ],
                        [
                            "self.dropout(h_prime)",
                            "Call"
                        ],
                        [
                            "self.reparameterise(mu, logvar)",
                            "Call"
                        ],
                        [
                            "self.out_att(output_edges, h_prime)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_100": {
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(edge_e, data)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.attention(l, a, N, data, edge) for (l, a) in zip(self.W, self.a)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([self.attention(l, a, N, data, edge) for (l, a) in zip(self.W, self.a)], dim=0).mean(dim=0)",
                            "Call"
                        ],
                        [
                            "self.dropout(h_prime)",
                            "Call"
                        ],
                        [
                            "self.embed(torch.arange(N).long().to(device))",
                            "Call"
                        ],
                        [
                            "attn(input_edges, h_prime)",
                            "Call"
                        ],
                        [
                            "self.parameterize(h_prime).view(-1, 2, self.out_features)",
                            "Call"
                        ],
                        [
                            "self.dropout(h_prime)",
                            "Call"
                        ],
                        [
                            "self.reparameterise(mu, logvar)",
                            "Call"
                        ],
                        [
                            "self.out_att(output_edges, h_prime)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "elu_112": {
                "input": {
                    "value": "self.norm(h_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_137": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_188": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_of_nodes",
                            "Attribute"
                        ],
                        [
                            "self.num_of_nodes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_47": {
                "size": {
                    "value": "(1, 2 * hidden_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "len(zero_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_114": {
                "input": {
                    "value": "self.norm(h_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "none_graph_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "out_features + out_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_148": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "torch.stack([out[1] for out in outputs])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "torch.stack([out[1][1] for out in outputs])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_211": {
                "input": {
                    "value": "torch.stack([out[0] for out in outputs])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_212": {
                "tensors": {
                    "value": "[out[1] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_216": {
                "input": {
                    "value": "torch.stack([torch.cat((self.features_ffn(torch.FloatTensor([out[0]]).to(device)), out[1][0])) for out in outputs])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_219": {
                "tensors": {
                    "value": "[out[1][1] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "logvar.exp() - logvar - 1 + mu.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_211": {
                "tensors": {
                    "value": "[out[0] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_217": {
                "tensors": {
                    "value": "[torch.cat((self.features_ffn(torch.FloatTensor([out[0]]).to(device)), out[1][0])) for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_217": {
                "tensors": {
                    "value": "(self.features_ffn(torch.FloatTensor([out[0]]).to(device)), out[1][0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_73": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VariationalGNN(in_feature, out_feature, num_of_nodes, n_heads, n_layers, dropout=dropout, alpha=alpha, variational=args.reg, none_graph_features=0).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EHRData(val_x, val_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "torch.cuda.device_count()",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in model.parameters() if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_77": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([p for p in model.parameters() if p.requires_grad], lr=lr, weight_decay=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EHRData(train_x, train_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "torch.cuda.device_count()",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_86": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(1).float().to(device) * (ratio[True] / ratio[False])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_count_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/parameter{}_{}'.format(result_root, epoch, idx)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}