{
    "agent.py": {
        "torch": {
            "Adam_51": {
                "variable": {
                    "value": "self.optimiser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "adam_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(img, vec)",
                            "Call"
                        ],
                        [
                            "self.net(states, vecs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.random.choice(len(p), p=p) for p in probs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(img, vec)",
                            "Call"
                        ],
                        [
                            "self.net(states, vecs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "p_join(path, 'state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "p_join(path, f'state_{id_}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_72": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(states, (3,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p_join(path, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'optimizer': self.optimiser.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'optimizer': self.optimiser.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(p_join(path, 'state.pth'))",
                            "Call"
                        ],
                        [
                            "torch.load(p_join(path, f'state_{id_}.pth'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "p_join(path, 'state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p_join(path, f'model_{id_}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'optimizer': self.optimiser.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'optimizer': self.optimiser.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(p_join(path, 'state.pth'))",
                            "Call"
                        ],
                        [
                            "torch.load(p_join(path, f'state_{id_}.pth'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "p_join(path, f'state_{id_}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_100": {
                "f": {
                    "value": "p_join(path, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_104": {
                "f": {
                    "value": "p_join(path, f'model_{id_}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data_manager.py": {
        "torch": {
            "tensor_49": {
                "variable": {
                    "value": "img_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_49": {
                "variable": {
                    "value": "img_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "vec_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "vec_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "data": {
                    "value": "a_id_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "torch_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_103": {
                "variable": {
                    "value": "torch_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "torch_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_171": {
                "tensors": {
                    "value": "next_states",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "returns",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_172": {
                "tensors": {
                    "value": "nonterminals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "state_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "state_vec_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "state_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "[transition[0].action]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "[sum((self.discount ** n * self.reward_reshaping(transition[n].reward) for n in range(self.n)))]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "[transition[self.n].nonterminal]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_175": {
                "tensors": {
                    "value": "next_vecs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_130": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_167": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_125": {
                "seed": {
                    "value": "np.random.randint(1, 10000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_128": {
                "seed": {
                    "value": "np.random.randint(1, 10000)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.fc_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vec_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vec_channel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + vec_channel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((x, vec), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, 32, 8, stride=4, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc_h_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + vec_channel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.conv_output_size)",
                            "Call"
                        ],
                        [
                            "self.fc_im(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((x, vec), 1))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "x + self.bias1",
                            "BinOp"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "out + self.bias2",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out + self.bias3",
                            "BinOp"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out * self.scale",
                            "BinOp"
                        ],
                        [
                            "out + self.bias4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.bias1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.bias2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.bias3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.bias4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones([depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.conv_output_size)",
                            "Call"
                        ],
                        [
                            "self.fc_im(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat((x, vec), 1))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "x + self.bias1",
                            "BinOp"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "out + self.bias2",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out + self.bias3",
                            "BinOp"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out * self.scale",
                            "BinOp"
                        ],
                        [
                            "out + self.bias4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "(x, vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "self.fc_h_a(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_48": {
                "input": {
                    "value": "self.fc_h_v(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "[depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "*size": {
                    "value": "[depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "[depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "[depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "[depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "depth_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "depth_out",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "depth_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[32, 64, 64]",
                            "List"
                        ],
                        [
                            "channel_sizes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "depth_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "depth_out",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "depth_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[32, 64, 64]",
                            "List"
                        ],
                        [
                            "channel_sizes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_146": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}