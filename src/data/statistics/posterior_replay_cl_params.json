{
    "data/dataset.py": {
        "sklearn": {
            "OneHotEncoder_977": {
                "variable": {
                    "value": "self._one_hot_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "categories": {
                    "value": "[range(self.num_classes)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_772": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_789": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/special/gmm_data.py": {
        "sklearn": {
            "KernelDensity_552": {
                "variable": {
                    "value": "kde",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data/large_img_dataset.py": {
        "tensorflow": {
            "add_215": {
                "variable": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "base_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.imgs_path, '')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.squeeze(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "read_file_216": {
                "variable": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(base_path, tf.squeeze(inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_221": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_png(image_string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image_string)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, self.in_shape[:2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_png(image_string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image_string)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, self.in_shape[:2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_png_218": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_220": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_215": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/cifar10_data.py": {
        "torch": {
            "stack_545": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[transform(x[i, ...]) for i in range(x.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "data/ilsvrc2012_data.py": {
        "torch": {}
    },
    "data/sequential_dataset.py": {
        "torch": {
            "from_numpy_201": {
                "ndarray": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._flatten_array(x, ts_dim_first=True, reverse=True, feature_shape=self.in_shape)",
                            "Call"
                        ],
                        [
                            "self._flatten_array(y, ts_dim_first=True, reverse=True, feature_shape=self.out_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_228": {
                "ndarray": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._flatten_array(x, ts_dim_first=True, reverse=True, feature_shape=self.in_shape)",
                            "Call"
                        ],
                        [
                            "self._flatten_array(y, ts_dim_first=True, reverse=True, feature_shape=self.out_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/special/permuted_mnist.py": {
        "torch": {
            "stack_336": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._transform(x[i, ...]) for i in range(x.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/chunked_deconv_hnet.py": {
        "torch": {
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hnets/chunked_mlp_hnet.py": {
        "torch": {
            "ParameterList_178": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_180": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_159": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._hnet._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_185": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._hnet._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_356": {
                "variable": {
                    "value": "cond_chunk_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_chunk_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights['chunk_embs']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cond_chunk_embs, dim=0)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "uncond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[uncond_input, chunk_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_355": {
                "variable": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[] if self._cond_in_size > 0 else None",
                            "IfExp"
                        ],
                        [
                            "torch.stack(cond_input, dim=0)",
                            "Call"
                        ],
                        [
                            "cond_input.reshape(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "cond_input.expand(batch_size, self.num_chunks, self._cond_in_size)",
                            "Call"
                        ],
                        [
                            "cond_input.reshape(batch_size * self.num_chunks, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "data": {
                    "value": "torch.Tensor(*self._cemb_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/deconv_hnet.py": {
        "torch": {
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hnets/hnet_container.py": {
        "torch": {
            "ParameterList_236": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_237": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_611": {
                "tensors": {
                    "value": "flat_ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_261": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_316": {
                "parameters": {
                    "value": "hnet._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_318": {
                "parameters": {
                    "value": "hnet._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_321": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_326": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_609": {
                "variable": {
                    "value": "flat_ret[bind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_ret[bind], tensor.flatten()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_264": {
                "parameters": {
                    "value": "hnet._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_323": {
                "modules": {
                    "value": "hnet._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_328": {
                "modules": {
                    "value": "hnet._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_362": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/hnet_helpers.py": {
        "torch": {}
    },
    "hnets/hnet_interface.py": {
        "torch": {
            "stack_922": {
                "variable": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "kwargs['cond_input']",
                            "Subscript"
                        ],
                        [
                            "_parse_cond_id_fct(self, cond_ids, cond_weights)",
                            "Call"
                        ],
                        [
                            "cond_input.expand(batch_size, *cond_input.shape[1:])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cond_input, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1017": {
                "variable": {
                    "value": "W_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(W_b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_986": {
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[[] for _ in range(batch_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "split_1016": {
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_out[:, ind:ind + num]",
                            "Subscript"
                        ],
                        [
                            "W.view(batch_size, *s)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_985": {
                "tensors": {
                    "value": "[p.flatten() for p in w]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/hnet_perturbation_wrapper.py": {
        "torch": {
            "ParameterList_206": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet.layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_208": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet.layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_189": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet.internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._hnet.batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_213": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._hnet.context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/mlp_hnet.py": {
        "torch": {
            "ParameterList_166": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_167": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_172": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_274": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[uncond_input, cond_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_307": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncond_input",
                            "variable"
                        ],
                        [
                            "cond_input",
                            "variable"
                        ],
                        [
                            "torch.cat([uncond_input, cond_input], dim=1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, fc_weights[i], bias=fc_biases[i])",
                            "Call"
                        ],
                        [
                            "self.batchnorm_layers[i].forward(h, running_mean=None, running_var=None, weight=bn_scales[i], bias=bn_shifts[i], stats_id=condition)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ],
                        [
                            "self._act_fn(h)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fc_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc_biases[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[None] * len(fc_weights)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ParameterList_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "data": {
                    "value": "torch.Tensor(cond_in_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/structured_hmlp_examples.py": {
        "torch": {
            "cat_296": {
                "tensors": {
                    "value": "[c[0] for c in chunks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_670": {
                "tensors": {
                    "value": "[c[0] for c in chunks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "tensors": {
                    "value": "[c[1] for c in chunks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "tensors": {
                    "value": "[c[-2] for c in chunks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "tensors": {
                    "value": "[c[-1] for c in chunks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/structured_mlp_hnet.py": {
        "torch": {
            "ParameterList_350": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_351": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_825": {
                "tensors": {
                    "value": "flat_ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_671": {
                "variable": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[] if self._cond_in_size > 0 else None",
                            "IfExp"
                        ],
                        [
                            "torch.stack(cond_input, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_674": {
                "variable": {
                    "value": "cond_chunk_embs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_chunk_embs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_365": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_417": {
                "parameters": {
                    "value": "hnet._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_419": {
                "parameters": {
                    "value": "hnet._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_422": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_427": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_745": {
                "variable": {
                    "value": "hnet_uncond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hnet_uncond_input, curr_chunk_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_823": {
                "variable": {
                    "value": "flat_ret[bind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_ret[bind], tensor.flatten()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_368": {
                "parameters": {
                    "value": "hnet._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_424": {
                "modules": {
                    "value": "hnet._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_429": {
                "modules": {
                    "value": "hnet._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_487": {
                "data": {
                    "value": "torch.Tensor(*shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/bi_rnn.py": {
        "torch": {
            "ParameterList_199": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_200": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_543": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_f, h_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_510": {
                "variable": {
                    "value": "inp_back",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterList_220": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_262": {
                "parameters": {
                    "value": "net._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_264": {
                "parameters": {
                    "value": "net._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_267": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_272": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_508": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_513": {
                "variable": {
                    "value": "inp_back[:int(seq_lengths[ii]), ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inp[:int(seq_lengths[ii]), ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_223": {
                "parameters": {
                    "value": "net._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_269": {
                "modules": {
                    "value": "net._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "modules": {
                    "value": "net._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/bio_conv_net.py": {
        "torch": {
            "ParameterList_201": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_202": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_520": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer.forward(h, weights=[w_weights[layer_ind], b_weights[layer_ind]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, W, bias=b)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_shape[1]",
                            "Subscript"
                        ],
                        [
                            "self._conv_layer[-1].out_width",
                            "Attribute"
                        ],
                        [
                            "nn.Parameter(torch.Tensor(*W_shape), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "w_weights[layer_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.Tensor(*b_shape), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "b_weights[layer_ind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "ParameterList_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_264": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*W_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_265": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*b_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_305": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._context_mod_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_494": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer.forward(h, weights=[w_weights[layer_ind], b_weights[layer_ind]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, W, bias=b)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_505": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer.forward(h, weights=[w_weights[layer_ind], b_weights[layer_ind]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, W, bias=b)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_530": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer.forward(h, weights=[w_weights[layer_ind], b_weights[layer_ind]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, W, bias=b)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_542": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer.forward(h, weights=[w_weights[layer_ind], b_weights[layer_ind]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, W, bias=b)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnets/chunk_squeezer.py": {
        "torch": {
            "ParameterList_148": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_149": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_437": {
                "variable": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, self._pad))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self._inp_chunk_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_439": {
                "variable": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, self._inp_chunk_dim, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([chunks, cembs], dim=1)",
                            "Call"
                        ],
                        [
                            "self._reducer.forward(chunks, weights=red_weights, distilled_params=red_distilled_params, condition=condition)",
                            "Call"
                        ],
                        [
                            "torch.split(chunks, batch_size, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_460": {
                "variable": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, self._inp_chunk_dim, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([chunks, cembs], dim=1)",
                            "Call"
                        ],
                        [
                            "self._reducer.forward(chunks, weights=red_weights, distilled_params=red_distilled_params, condition=condition)",
                            "Call"
                        ],
                        [
                            "torch.split(chunks, batch_size, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "net_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, self._inp_chunk_dim, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([chunks, cembs], dim=1)",
                            "Call"
                        ],
                        [
                            "self._reducer.forward(chunks, weights=red_weights, distilled_params=red_distilled_params, condition=condition)",
                            "Call"
                        ],
                        [
                            "torch.split(chunks, batch_size, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self._cembs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*cemb_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "self._dyn_bias_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_427": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, self._pad))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self._pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_444": {
                "variable": {
                    "value": "cembs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cembs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.split(cembs, 1, dim=0)",
                            "Call"
                        ],
                        [
                            "[emb.expand(batch_size, -1) for emb in cembs]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cembs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "cembs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cembs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.split(cembs, 1, dim=0)",
                            "Call"
                        ],
                        [
                            "[emb.expand(batch_size, -1) for emb in cembs]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cembs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[chunks, cembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "data": {
                    "value": "torch.Tensor(*trgt_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/classifier_interface.py": {
        "torch": {
            "softmax_123": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_86": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.argmax(dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits / T, dim=1)",
                            "Call"
                        ],
                        [
                            "new_targets",
                            "variable"
                        ],
                        [
                            "t.argmax(dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_132": {
                "variable": {
                    "value": "new_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_164": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_146": {
                "input": {
                    "value": "logits / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/lenet.py": {
        "torch": {
            "ParameterList_197": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_198": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_457": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[0], bias=int_weights[1])",
                            "Call"
                        ],
                        [
                            "self._drop_conv1(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[2], bias=int_weights[3])",
                            "Call"
                        ],
                        [
                            "self._drop_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, int_weights[4].size()[1])",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[4], bias=int_weights[5])",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[6], bias=int_weights[7])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "int_weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "int_weights[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights[n_cm:]",
                            "Subscript"
                        ],
                        [
                            "weights",
                            "variable"
                        ],
                        [
                            "weights['internal_weights']",
                            "Subscript"
                        ],
                        [
                            "weights[n_cm:]",
                            "Subscript"
                        ],
                        [
                            "weights",
                            "variable"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "self.weights[n_cm:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_pool2d_460": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[0], bias=int_weights[1])",
                            "Call"
                        ],
                        [
                            "self._drop_conv1(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[2], bias=int_weights[3])",
                            "Call"
                        ],
                        [
                            "self._drop_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, int_weights[4].size()[1])",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[4], bias=int_weights[5])",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[6], bias=int_weights[7])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_463": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[0], bias=int_weights[1])",
                            "Call"
                        ],
                        [
                            "self._drop_conv1(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[2], bias=int_weights[3])",
                            "Call"
                        ],
                        [
                            "self._drop_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, int_weights[4].size()[1])",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[4], bias=int_weights[5])",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[6], bias=int_weights[7])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "int_weights[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "int_weights[3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights[n_cm:]",
                            "Subscript"
                        ],
                        [
                            "weights",
                            "variable"
                        ],
                        [
                            "weights['internal_weights']",
                            "Subscript"
                        ],
                        [
                            "weights[n_cm:]",
                            "Subscript"
                        ],
                        [
                            "weights",
                            "variable"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "self.weights[n_cm:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_pool2d_466": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[0], bias=int_weights[1])",
                            "Call"
                        ],
                        [
                            "self._drop_conv1(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[2], bias=int_weights[3])",
                            "Call"
                        ],
                        [
                            "self._drop_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, int_weights[4].size()[1])",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[4], bias=int_weights[5])",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[6], bias=int_weights[7])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_471": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[0], bias=int_weights[1])",
                            "Call"
                        ],
                        [
                            "self._drop_conv1(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[2], bias=int_weights[3])",
                            "Call"
                        ],
                        [
                            "self._drop_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, int_weights[4].size()[1])",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[4], bias=int_weights[5])",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[6], bias=int_weights[7])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "int_weights[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "int_weights[5]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights[n_cm:]",
                            "Subscript"
                        ],
                        [
                            "weights",
                            "variable"
                        ],
                        [
                            "weights['internal_weights']",
                            "Subscript"
                        ],
                        [
                            "weights[n_cm:]",
                            "Subscript"
                        ],
                        [
                            "weights",
                            "variable"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "self.weights[n_cm:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_478": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[0], bias=int_weights[1])",
                            "Call"
                        ],
                        [
                            "self._drop_conv1(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[2], bias=int_weights[3])",
                            "Call"
                        ],
                        [
                            "self._drop_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, int_weights[4].size()[1])",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[4], bias=int_weights[5])",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[6], bias=int_weights[7])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "int_weights[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "int_weights[7]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights[n_cm:]",
                            "Subscript"
                        ],
                        [
                            "weights",
                            "variable"
                        ],
                        [
                            "weights['internal_weights']",
                            "Subscript"
                        ],
                        [
                            "weights[n_cm:]",
                            "Subscript"
                        ],
                        [
                            "weights",
                            "variable"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "self.weights[n_cm:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout2d_204": {
                "variable": {
                    "value": "self._drop_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_205": {
                "variable": {
                    "value": "self._drop_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_206": {
                "variable": {
                    "value": "self._drop_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_437": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[0], bias=int_weights[1])",
                            "Call"
                        ],
                        [
                            "self._drop_conv1(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, int_weights[2], bias=int_weights[3])",
                            "Call"
                        ],
                        [
                            "self._drop_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, int_weights[4].size()[1])",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[4], bias=int_weights[5])",
                            "Call"
                        ],
                        [
                            "modulate_layer(h)",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, int_weights[6], bias=int_weights[7])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_244": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/mlp.py": {
        "torch": {
            "ParameterList_417": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_418": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_243": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterList_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_437": {
                "data": {
                    "value": "torch.Tensor(*dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_680": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(hidden, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(hidden, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._spec_norm(F.linear(hidden, W, bias=b))",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(hidden, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(hidden, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_weights[2 * bn_ind], bias=bn_weights[2 * bn_ind + 1], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "self._dropout(hidden)",
                            "Call"
                        ],
                        [
                            "self._a_fun(hidden)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(hidden, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_weights[l]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_weights[l]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "mnets/mnet_interface.py": {
        "torch": {
            "ones_718": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[oweights_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_721": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[oweights_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_873": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_951": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_953": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_706": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[obias_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_709": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[obias_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_970": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/resnet.py": {
        "torch": {
            "ParameterList_314": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_315": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_734": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, 1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, w_weights[layer_ind], bias=b_weights[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, w_weights[layer_ind], bias=b_weights[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_weights[2 * bn_ind], bias=bn_weights[2 * bn_ind + 1], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[h.size()[2], h.size()[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_738": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, 1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, w_weights[layer_ind], bias=b_weights[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, w_weights[layer_ind], bias=b_weights[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_weights[2 * bn_ind], bias=bn_weights[2 * bn_ind + 1], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[] if self.has_bias else [None] * len(layer_weights)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "conv2d_643": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, 1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, w_weights[layer_ind], bias=b_weights[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, w_weights[layer_ind], bias=b_weights[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_weights[2 * bn_ind], bias=bn_weights[2 * bn_ind + 1], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[] if self.has_bias else [None] * len(layer_weights)",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_670": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, 1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, w_weights[layer_ind], bias=b_weights[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, w_weights[layer_ind], bias=b_weights[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_weights[2 * bn_ind], bias=bn_weights[2 * bn_ind + 1], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_373": {
                "data": {
                    "value": "torch.Tensor(self._filter_sizes[0], self._in_shape[2], *self._kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_398": {
                "data": {
                    "value": "torch.Tensor(num_classes, self._filter_sizes[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_378": {
                "data": {
                    "value": "torch.Tensor(self._filter_sizes[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_402": {
                "data": {
                    "value": "torch.Tensor(num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_723": {
                "variable": {
                    "value": "shortcut_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shortcut_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "h[:, :, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "F.pad(shortcut_h, (0, 0, 0, 0, pad_left, pad_right), 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, pad_left, pad_right)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_387": {
                "data": {
                    "value": "torch.Tensor(out_filters, in_filters, *self._kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_391": {
                "data": {
                    "value": "torch.Tensor(out_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/resnet_imgnet.py": {
        "torch": {
            "ParameterList_225": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_226": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_792": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, self._init_stride, padding=self._init_padding, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=(3, 3), stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[h.size()[2], h.size()[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_796": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, self._init_stride, padding=self._init_padding, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=(3, 3), stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "layer_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer_biases[layer_ind]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * (self._num_main_conv_layers + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_712": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, self._init_stride, padding=self._init_padding, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=(3, 3), stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_739": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, self._init_stride, padding=self._init_padding, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=(3, 3), stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_685": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, self._init_stride, padding=self._init_padding, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=(3, 3), stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "layer_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer_biases[layer_ind]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * (self._num_main_conv_layers + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if i > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_758": {
                "variable": {
                    "value": "shortcut_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, self._init_stride, padding=self._init_padding, shortcut=None)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=(3, 3), stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=0, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=None)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, padding=1, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "skip_1x1_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if i > 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_775": {
                "variable": {
                    "value": "shortcut_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shortcut_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "F.conv2d(h, skip_1x1_weights[i], bias=None, stride=stride, padding=0)",
                            "Call"
                        ],
                        [
                            "h[:, :, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "F.pad(shortcut_h, (0, 0, 0, 0, pad_left, pad_right), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_short].forward(shortcut_h, running_mean=running_means[bn_short], running_var=running_vars[bn_short], weight=bn_scales[bn_short], bias=bn_shifts[bn_short], stats_id=bn_cond)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, pad_left, pad_right)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_313": {
                "data": {
                    "value": "torch.Tensor(*skip_1x1_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_392": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/simple_rnn.py": {
        "torch": {
            "ParameterList_239": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_240": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_1308": {
                "variable": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, :HS]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(i_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1309": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, HS:HS * 2]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(f_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_1310": {
                "variable": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, HS * 2:HS * 3]",
                            "Subscript"
                        ],
                        [
                            "torch.tanh(g_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1311": {
                "variable": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, HS * 3:]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(o_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_972": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[0].forward(h, weights=cm_inputs_weights, ckpt_id=cmod_cond, bs_dim=1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, fc_w_weights[d], bias=fc_b_weights[d])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_offset + d].forward(h, weights=cm_fc_layer_weights[d], ckpt_id=cmod_cond, bs_dim=1)",
                            "Call"
                        ],
                        [
                            "self._a_fun(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_offset + d].forward(h, weights=cm_fc_layer_weights[d], ckpt_id=cmod_cond, bs_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fc_w_weights[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc_b_weights[d]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[None] * len(fc_w_weights)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_1041": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._rnn_layers[layer_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1043": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._rnn_layers[layer_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1087": {
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "chunk_627": {
                "variable": {
                    "value": "cm_w_chunked[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cm_w",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "num_ts_cm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "cm_rnn_weights[j].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_450": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_387": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/wide_resnet.py": {
        "torch": {
            "ParameterList_235": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_236": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_700": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=self._strides[0], padding=1)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, None, shortcut=None, no_conv=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "layer_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer_biases[layer_ind]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * (6 * self._n + 2)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self._strides[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_732": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=self._strides[0], padding=1)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, None, shortcut=None, no_conv=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[h.size()[2], h.size()[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_736": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=self._strides[0], padding=1)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, None, shortcut=None, no_conv=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "layer_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer_biases[layer_ind]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * (6 * self._n + 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_240": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_670": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=self._strides[0], padding=1)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, None, shortcut=None, no_conv=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_879": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[oweights_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_882": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[oweights_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_679": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=self._strides[0], padding=1)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, None, shortcut=None, no_conv=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "layer_weights[layer_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer_biases[layer_ind]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * (6 * self._n + 2)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._strides[i + 1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_867": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[obias_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_870": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[obias_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_713": {
                "variable": {
                    "value": "shortcut_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=self._strides[0], padding=1)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, None, shortcut=None, no_conv=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, [h.size()[2], h.size()[3]])",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, layer_weights[layer_ind], bias=layer_biases[layer_ind])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=None)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ],
                        [
                            "conv_layer(h, stride, shortcut=shortcut_h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(h, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_scales[bn_ind], bias=bn_shifts[bn_ind], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(h, weights=cm_weights_layer[cm_ind], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, layer_weights[layer_ind], bias=layer_biases[layer_ind], stride=stride, padding=1)",
                            "Call"
                        ],
                        [
                            "h + shortcut",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "skip_1x1_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._strides[i + 1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_313": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_358": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/zenkenet.py": {
        "torch": {
            "ParameterList_134": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_135": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_148": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_217": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, *self._in_shape)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_218": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_219": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_220": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_225": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[5]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_226": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_227": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[7]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_228": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_234": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(h, weights[8], bias=weights[9])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_237": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[11]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_131": {
                "variable": {
                    "value": "self._drop_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_132": {
                "variable": {
                    "value": "self._drop_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate * 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_220": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_228": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_234": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, weights[0], bias=weights[1], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[2], bias=weights[3], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[4], bias=weights[5], padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, weights[6], bias=weights[7], padding=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(h), 2)",
                            "Call"
                        ],
                        [
                            "self._drop_conv(h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, weights[8].size()[1])",
                            "Call"
                        ],
                        [
                            "F.relu(F.linear(h, weights[8], bias=weights[9]))",
                            "Call"
                        ],
                        [
                            "self._drop_fc1(h)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[10], bias=weights[11])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[8]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[9]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._weights",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_151": {
                "data": {
                    "value": "torch.Tensor(*dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/ewc_utils.py": {
        "torch": {
            "ReduceLROnPlateau_335": {
                "variable": {
                    "value": "plateau_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tutils.get_optimizer(mnet.internal_params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min if is_regression else max",
                    "type": "IfExp",
                    "possible_values": []
                },
                "factor": {
                    "value": "np.sqrt(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "5e-07",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_342": {
                "variable": {
                    "value": "lambda_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tutils.get_optimizer(mnet.internal_params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "tutils.lambda_lr_schedule",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "diag_fisher",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in diag_fisher]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_385": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='train')",
                            "Call"
                        ],
                        [
                            "pmutils.fit_targets_to_softmax(config, shared, device, data, task_id, T)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_399": {
                "variable": {
                    "value": "loss_nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.detach()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_403": {
                "variable": {
                    "value": "(_, pred_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_115": {
                "variable": {
                    "value": "curr_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(mnet, buff_w_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_value__430": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.clip_grad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_545": {
                "input": {
                    "value": "diag_fisher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in diag_fisher])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_546": {
                "input": {
                    "value": "diag_fisher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in diag_fisher])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_619": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_135": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_396": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='train')",
                            "Call"
                        ],
                        [
                            "pmutils.fit_targets_to_softmax(config, shared, device, data, task_id, T)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__433": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_489": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_549": {
                "input": {
                    "value": "diag_fisher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in diag_fisher])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_116": {
                "input": {
                    "value": "getattr(mnet, buff_w_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_404": {
                "input": {
                    "value": "pred_labels == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_481": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_482": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/gauss_hnet_init.py": {
        "torch": {}
    },
    "probabilistic/gauss_mlp.py": {
        "torch": {
            "ReLU_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_203": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "gamma",
                            "variable"
                        ],
                        [
                            "Normal(gamma, delta.sqrt()).rsample()",
                            "Call"
                        ],
                        [
                            "gamma + eps * delta.sqrt()",
                            "BinOp"
                        ],
                        [
                            "self._a_fun(hidden)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_means[l]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "mu_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_means[l]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "linear_208": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "sigma2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_vars[l]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "sigma2_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_vars[l]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "Normal_212": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, mu, bias=mu_hat)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "delta.sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_214": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros_like(gamma)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_214": {
                "input": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, mu, bias=mu_hat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "probabilistic/gauss_mnet_interface.py": {
        "torch": {
            "ParameterList_162": {
                "variable": {
                    "value": "self._rho_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_181": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "data": {
                    "value": "torch.Tensor(p.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/multitask_utils.py": {
        "torch": {
            "ReduceLROnPlateau_124": {
                "variable": {
                    "value": "plateau_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tutils.get_optimizer(mnet.internal_params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min if is_regression else max",
                    "type": "IfExp",
                    "possible_values": []
                },
                "factor": {
                    "value": "np.sqrt(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "5e-07",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_131": {
                "variable": {
                    "value": "lambda_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tutils.get_optimizer(mnet.internal_params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "tutils.lambda_lr_schedule",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_195": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='train')",
                            "Call"
                        ],
                        [
                            "pmutils.fit_targets_to_softmax(config, shared, device, data, task_id, T)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_211": {
                "variable": {
                    "value": "(_, pred_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, **mnet_kwargs[task_id])",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs[task_id]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_value__222": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.clip_grad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_304": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_207": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, **mnet_kwargs[task_id])",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs[task_id]]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.detach()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "pred_labels == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clip_grad_norm__225": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_204": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, **mnet_kwargs[task_id])",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs[task_id]]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='train')",
                            "Call"
                        ],
                        [
                            "pmutils.fit_targets_to_softmax(config, shared, device, data, task_id, T)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/prob_cifar/train_avb.py": {
        "torch": {
            "zeros_144": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/prob_cifar/train_utils.py": {
        "torch": {
            "empty_795": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples, hnet.num_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_907": {
                "variable": {
                    "value": "w_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, hnet.num_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_1158": {
                "variable": {
                    "value": "temp_param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "shared.softmax_temp[task_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Generator_607": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_798": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_803": {
                "variable": {
                    "value": "samples[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten() for p in weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "normal_846": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(batch_size, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_911": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_916": {
                "variable": {
                    "value": "w_samples[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.flatten() for p in weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_1230": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_samples",
                            "variable"
                        ],
                        [
                            "data.get_train_outputs()",
                            "Call"
                        ],
                        [
                            "pmutils.fit_targets_to_softmax(config, shared, device, data, task_id, T)",
                            "Call"
                        ],
                        [
                            "data.get_test_outputs()",
                            "Call"
                        ],
                        [
                            "data.get_val_outputs()",
                            "Call"
                        ],
                        [
                            "data.output_to_torch_tensor(targets, device, mode='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_1235": {
                "variable": {
                    "value": "logit_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_w_samples, num_samples, T.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_1298": {
                "variable": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((num_w_samples, num_samples, T.shape[1])).to(device)",
                            "Call"
                        ],
                        [
                            "logit_outputs[:, pred_labels == labels, :]",
                            "Subscript"
                        ],
                        [
                            "logit_outputs.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1298": {
                "variable": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1300": {
                "variable": {
                    "value": "(_, pred_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ],
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit_outputs, dim=2).mean(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit_outputs, dim=2).mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1305": {
                "variable": {
                    "value": "log_pred_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(pred_dists, min=1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_704": {
                "variable": {
                    "value": "return_vals.samples[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten() for p in weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_723": {
                "variable": {
                    "value": "softmax_outputs[j, sind:eind, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "Y / ST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_980": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1004": {
                "variable": {
                    "value": "softmax_outputs[j, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "Y / ST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_1174": {
                "variable": {
                    "value": "temp_param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(torch.ones(1)) - torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_1191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_1325": {
                "variable": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_labels == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_1339": {
                "variable": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((num_w_samples, num_samples, T.shape[1])).to(device)",
                            "Call"
                        ],
                        [
                            "logit_outputs[:, pred_labels == labels, :]",
                            "Subscript"
                        ],
                        [
                            "logit_outputs.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1339": {
                "variable": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1340": {
                "variable": {
                    "value": "(_, pred_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ],
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit_outputs, dim=2).mean(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit_outputs, dim=2).mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1378": {
                "variable": {
                    "value": "batch_pred_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_logits / ttf(temp_param)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1378": {
                "variable": {
                    "value": "batch_pred_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_1386": {
                "variable": {
                    "value": "batch_log_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_pred_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(batch_logits / ttf(temp_param), dim=2).mean(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_1387": {
                "variable": {
                    "value": "batch_log_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_log_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(batch_pred_dist, min=1e-05)",
                            "Call"
                        ],
                        [
                            "torch.log(batch_log_pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_1410": {
                "variable": {
                    "value": "temp_param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(shared.softmax_temp[task_id], requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_696": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_996": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_1305": {
                "input": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ],
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit_outputs, dim=2).mean(dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit_outputs, dim=2).mean(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_1306": {
                "input": {
                    "value": "pred_dists * log_pred_dists",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_1395": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_log_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(batch_pred_dist, min=1e-05)",
                            "Call"
                        ],
                        [
                            "torch.log(batch_log_pd)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[batch_inds]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_value__1399": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.clip_grad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_1301": {
                "input": {
                    "value": "pred_labels == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_1341": {
                "input": {
                    "value": "pred_labels == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_1360": {
                "variable": {
                    "value": "batch_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_logits[j, :, :] / ttf(temp_param)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_1363": {
                "variable": {
                    "value": "batch_log_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(batch_sm, min=1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__1402": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_798": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_846": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_911": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_1259": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_1372": {
                "input": {
                    "value": "batch_logits[j, :, :] / ttf(temp_param)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[batch_inds]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_1390": {
                "input": {
                    "value": "batch_pred_dist * batch_log_pd",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_1363": {
                "input": {
                    "value": "batch_sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(batch_logits[j, :, :] / ttf(temp_param), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_1366": {
                "input": {
                    "value": "batch_sm * batch_log_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_696": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_996": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_1174": {
                "input": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1175": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1174": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1259": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/prob_gmm/train_utils.py": {
        "torch": {
            "normal_390": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/prob_mnist/train_bbb.py": {
        "torch": {
            "cat_183": {
                "variable": {
                    "value": "mnet_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().clone().flatten() for p in mnet.weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "hnet_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().clone().flatten() for p in hnet.unconditional_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_541": {
                "variable": {
                    "value": "plateau_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tutils.get_optimizer(params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ],
                        [
                            "tutils.get_optimizer(params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ],
                        [
                            "tutils.get_optimizer(params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "np.sqrt(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "5e-07",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_548": {
                "variable": {
                    "value": "lambda_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tutils.get_optimizer(params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ],
                        [
                            "tutils.get_optimizer(params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ],
                        [
                            "tutils.get_optimizer(params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "tutils.lambda_lr_schedule",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_593": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='train')",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.zeros((config.batch_size, task_id * data.num_classes)).to(device), T), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "distilled_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.flatten() for w in hnet_out]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_589": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros((config.batch_size, task_id * data.num_classes)).to(device), T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_650": {
                "variable": {
                    "value": "(_, pred_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=w_mean, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=None, mean_only=False, extracted_mean=w_mean, extracted_rho=w_rho, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_826": {
                "variable": {
                    "value": "mean_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.clone().view(-1) for d in w_mean]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_1218": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_value__351": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.clip_grad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_646": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=w_mean, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=None, mean_only=False, extracted_mean=w_mean, extracted_rho=w_rho, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.detach()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_value__797": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.clip_grad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_830": {
                "variable": {
                    "value": "std_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.clone().view(-1) for d in w_std]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "clip_grad_value__1133": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.clip_grad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1195": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__354": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_701": {
                "*size": {
                    "value": "config.coreset_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(allowed_outputs) if config.cl_scenario != 2 else data.num_classes",
                            "IfExp"
                        ],
                        [
                            "cs_trgts.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_norm__800": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_1098": {
                "variable": {
                    "value": "other_rnd_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(allowed_outputs) if config.cl_scenario != 2 else data.num_classes",
                            "IfExp"
                        ],
                        [
                            "cs_trgts.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_other,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1100": {
                "variable": {
                    "value": "other_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_batch_inds.size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(allowed_outputs) if config.cl_scenario != 2 else data.num_classes",
                            "IfExp"
                        ],
                        [
                            "cs_trgts.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_norm__1136": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1197": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_1199": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_589": {
                "*size": {
                    "value": "(config.batch_size, task_id * data.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_651": {
                "input": {
                    "value": "pred_labels == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_751": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_1105": {
                "*size": {
                    "value": "num_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_batch_inds.size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(allowed_outputs) if config.cl_scenario != 2 else data.num_classes",
                            "IfExp"
                        ],
                        [
                            "cs_trgts.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "probabilistic/prob_mnist/train_utils.py": {
        "torch": {
            "empty_685": {
                "variable": {
                    "value": "softmax_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_w_samples, X.shape[0], softmax_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_749": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_outputs.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_566": {
                "variable": {
                    "value": "task_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hnet.conditional_params[:shared.num_trained]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Generator_584": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_676": {
                "variable": {
                    "value": "return_vals.samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_w_samples, num_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_782": {
                "variable": {
                    "value": "(return_vals.confidence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_outputs.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_737": {
                "variable": {
                    "value": "softmax_outputs[j, sind:eind, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "Y / ST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1510": {
                "variable": {
                    "value": "softmax_outputs[j, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "Y / ST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1588": {
                "variable": {
                    "value": "shared.coreset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shared.coreset, new_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1589": {
                "variable": {
                    "value": "shared.coreset_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shared.coreset_targets, new_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1700": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples, config.num_tasks * data.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mv_569": {
                "input": {
                    "value": "task_embeddings.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_743": {
                "variable": {
                    "value": "return_vals.samples[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten() for p in W]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_766": {
                "input": {
                    "value": "pred_dists * torch.log(torch.where(pred_dists > 1e-05, pred_dists, 1e-05 * torch.ones_like(pred_dists)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1712": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples, shared.num_trained * data.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_1012": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1724": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros((num_samples, task_id * data.num_classes)).to(device), T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_766": {
                "input": {
                    "value": "torch.where(pred_dists > 1e-05, pred_dists, 1e-05 * torch.ones_like(pred_dists))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_702": {
                "mean": {
                    "value": "pmean",
                    "type": "variable",
                    "possible_values": []
                },
                "std": {
                    "value": "pstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_post[1][ii]",
                            "Subscript"
                        ]
                    ]
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.Generator(device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_767": {
                "condition": {
                    "value": "pred_dists > 1e-05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_outputs.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05 * torch.ones_like(pred_dists)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1724": {
                "*size": {
                    "value": "(num_samples, task_id * data.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_768": {
                "input": {
                    "value": "pred_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_outputs.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "softmax_outputs.mean(axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "probabilistic/prob_utils.py": {
        "torch": {
            "cat_215": {
                "variable": {
                    "value": "mean_a_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in mean_a]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "logvar_a_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in logvar_a]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "mean_b_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in mean_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "logvar_b_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in logvar_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "mean_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in mean]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "logvar_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in logvar]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "mean_a_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in mean_a]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "var_a_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in logvar_a]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "exp_263": {
                "variable": {
                    "value": "var_a_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "mean_b_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in mean_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "var_b_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in logvar_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "exp_265": {
                "variable": {
                    "value": "var_b_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_95": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros_like(std)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_187": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros_like(m)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_387": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * rho[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_93": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normal_99": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_137": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * rho[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_140": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normal_192": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_221": {
                "input": {
                    "value": "-1 + (logvar_a_flat.exp() + (mean_b_flat - mean_a_flat).pow(2)) / logvar_b_flat.exp() + logvar_b_flat - logvar_a_flat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_244": {
                "input": {
                    "value": "1 + logvar_flat - mean_flat.pow(2) - var_flat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_332": {
                "input": {
                    "value": "torch.cat([t.view(-1) for t in std_a])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_342": {
                "variable": {
                    "value": "p_b",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_b[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "std_b[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_421": {
                "input": {
                    "value": "0.5 * logvar[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_95": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * rho[i])",
                            "Call"
                        ],
                        [
                            "F.softplus(rho[i])",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * rho[i])",
                            "Call"
                        ],
                        [
                            "F.softplus(rho[i])",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * logvar[i])",
                            "Call"
                        ],
                        [
                            "[torch.exp(0.5 * logvar[i]) for i in range(n)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_like_187": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_267": {
                "input": {
                    "value": "mean_a_flat - mean_b_flat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_388": {
                "loc": {
                    "value": "mu[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * rho[i])",
                            "Call"
                        ],
                        [
                            "F.softplus(rho[i])",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * rho[i])",
                            "Call"
                        ],
                        [
                            "F.softplus(rho[i])",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * logvar[i])",
                            "Call"
                        ],
                        [
                            "[torch.exp(0.5 * logvar[i]) for i in range(n)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_99": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_141": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * rho[i])",
                            "Call"
                        ],
                        [
                            "F.softplus(rho[i])",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * rho[i])",
                            "Call"
                        ],
                        [
                            "F.softplus(rho[i])",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * logvar[i])",
                            "Call"
                        ],
                        [
                            "[torch.exp(0.5 * logvar[i]) for i in range(n)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_192": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_332": {
                "tensors": {
                    "value": "[t.view(-1) for t in std_a]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_101": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.normal(torch.zeros_like(std), 1.0, generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.normal(torch.zeros_like(m), 1.0, generator=generator)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_194": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.normal(torch.zeros_like(std), 1.0, generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.normal(torch.zeros_like(m), 1.0, generator=generator)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_268": {
                "input": {
                    "value": "var_a_flat * var_b_flat",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/regression/train_avb.py": {
        "torch": {
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_213": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_215": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/regression/train_bbb.py": {
        "torch": {
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_732": {
                "variable": {
                    "value": "mean_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.clone().view(-1) for d in w_mean]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "W_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.clone().view(-1) for d in w_all]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mse_loss_673": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=w_mean)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=None, mean_only=False, extracted_mean=w_mean, extracted_rho=w_rho)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_value__717": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.clip_grad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_736": {
                "variable": {
                    "value": "rho_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.clone().view(-1) for d in w_rho]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_737": {
                "variable": {
                    "value": "std_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.clone().view(-1) for d in w_std]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_784": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "norm_325": {
                "variable": {
                    "value": "W_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_curr - W_during",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__720": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_786": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_788": {
                "*size": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/regression/train_utils.py": {
        "torch": {
            "mse_loss_791": {
                "variable": {
                    "value": "mse_vals[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=None, mean_only=False, extracted_mean=w_mean, extracted_rho=w_rho, disable_lrt=disable_lrt)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=w_mean)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "mnet.forward(inputs, weights=None, mean_only=False, extracted_mean=w_mean, extracted_rho=w_rho)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get_train_outputs()",
                            "Call"
                        ],
                        [
                            "data.get_test_outputs()",
                            "Call"
                        ],
                        [
                            "data.get_val_outputs()",
                            "Call"
                        ],
                        [
                            "data.output_to_torch_tensor(T, device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_346": {
                "variable": {
                    "value": "mask_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_964": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_799": {
                "variable": {
                    "value": "return_vals.samples[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten() for p in weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_356": {
                "variable": {
                    "value": "layer_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_shapes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_359": {
                "variable": {
                    "value": "layer_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "generator": {
                    "value": "mask_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "mask_gen.manual_seed(42)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_769": {
                "mean": {
                    "value": "pmean",
                    "type": "variable",
                    "possible_values": []
                },
                "std": {
                    "value": "pstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_post[1][ii]",
                            "Subscript"
                        ]
                    ]
                },
                "generator": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normal_780": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_780": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/ssge_utils.py": {
        "torch": {
            "normal_444": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(num_samples, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "symeig_153": {
                "variable": {
                    "value": "(lamb, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rbf_kernel(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.rbf_kernel(x_est, x_est)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flip_156": {
                "variable": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(lamb, [0])",
                            "Call"
                        ],
                        [
                            "lamb[:J]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_157": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(u, [1])",
                            "Call"
                        ],
                        [
                            "u[:, :J]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_365": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(M) / lamb * torch.mm(self.rbf_kernel(x, x_est), u)",
                            "BinOp"
                        ],
                        [
                            "self.compute_eigenfunctions(x, x_est, lamb, u)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_395": {
                "variable": {
                    "value": "dist_x1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_399": {
                "variable": {
                    "value": "dist_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_401": {
                "variable": {
                    "value": "dist_x1x2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dist_x1, dist_x2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pairwise_dist, dist_x1x2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_415": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pairwise_dist, dist_x1x2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_420": {
                "variable": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_95": {
                "input": {
                    "value": "-squared_norm / (2 * self._sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_596": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_635": {
                "input": {
                    "value": "thetai",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_195": {
                "input": {
                    "value": "self.rbf_kernel(x, x_est)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(u, [1])",
                            "Call"
                        ],
                        [
                            "u[:, :J]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_229": {
                "equation": {
                    "value": "abc,cd->bd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_K, u)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "x_est",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_sup)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_641": {
                "outputs": {
                    "value": "samples_post",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_weight_sample(config, shared, device, hnet, theta, num_samples=config.train_sample_size, ret_format='flattened')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "thetai",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ssge.estimate_gradient(samples_eval, x_est=samples_est, x_sup=samples_est_sup, max_m=config.ssge_sample_size, J=config.num_ssge_eigenvals, J_thr=config.thr_ssge_eigenvals)",
                            "Call"
                        ],
                        [
                            "torch.matmul(psi, beta.t())",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "retain_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False if i == len(theta) - 1 else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cumsum_265": {
                "input": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(lamb, [0])",
                            "Call"
                        ],
                        [
                            "lamb[:J]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_444": {
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cdist_395": {
                "x1": {
                    "value": "x1[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "x1[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_399": {
                "x1": {
                    "value": "x2[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "x2[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_401": {
                "x1": {
                    "value": "x1[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "x2[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_420": {
                "x1": {
                    "value": "x1[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "x1[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "probabilistic/train_vi.py": {
        "torch": {
            "ReduceLROnPlateau_1051": {
                "variable": {
                    "value": "plateau_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "hoptimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tutils.get_optimizer(params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min if is_regression else max",
                    "type": "IfExp",
                    "possible_values": []
                },
                "factor": {
                    "value": "np.sqrt(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "5e-07",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_1058": {
                "variable": {
                    "value": "lambda_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "hoptimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tutils.get_optimizer(params, config.lr, momentum=config.momentum, weight_decay=config.weight_decay, use_adam=config.use_adam, adam_beta1=config.adam_beta1, use_rmsprop=config.use_rmsprop, use_adadelta=config.use_adadelta, use_adagrad=config.use_adagrad)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "tutils.lambda_lr_schedule",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_725": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_935": {
                "variable": {
                    "value": "prior_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.flatten() for p in shared.prior_mean]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_936": {
                "variable": {
                    "value": "prior_std",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.flatten() for p in shared.prior_std]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Normal_938": {
                "variable": {
                    "value": "prior_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "prior_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([p.flatten() for p in shared.prior_mean])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "prior_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([p.flatten() for p in shared.prior_std])",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_1098": {
                "variable": {
                    "value": "ac_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "ac_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "ac_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1121": {
                "variable": {
                    "value": "dis_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(config.dis_batch_size), torch.ones(config.dis_batch_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_1213": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='train')",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.zeros((config.batch_size, task_id * data.num_classes)).to(device), T), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_490": {
                "variable": {
                    "value": "W_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.clone().view(-1) for d in current_weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_566": {
                "variable": {
                    "value": "alphas_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "all_ent_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_566": {
                "variable": {
                    "value": "alphas_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_1138": {
                "variable": {
                    "value": "loss_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([real, fake], dim=0).squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "dis_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros(config.dis_batch_size), torch.ones(config.dis_batch_size)]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1210": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros((config.batch_size, task_id * data.num_classes)).to(device), T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1243": {
                "variable": {
                    "value": "(_, pred_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=weights, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_value__1318": {
                "parameters": {
                    "value": "hoptimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "config.clip_grad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1341": {
                "variable": {
                    "value": "theta_curr_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.flatten() for p in theta_current]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_1343": {
                "variable": {
                    "value": "theta_curr_grad_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.flatten() for p in theta_current_ssge_grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_500": {
                "variable": {
                    "value": "W_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_curr - W_during",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_531": {
                "*size": {
                    "value": "shared.num_trained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmin_562": {
                "variable": {
                    "value": "inferred_task_ids_ent[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(entropy[b], alphas, only_inputs=True, retain_graph=retain_graph)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normal_1222": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_1239": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=weights, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(data.num_test_samples)",
                            "Call"
                        ],
                        [
                            "labels + label_offset",
                            "BinOp"
                        ],
                        [
                            "ret_vals.labels",
                            "Attribute"
                        ],
                        [
                            "labels.detach()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_1286": {
                "*size": {
                    "value": "config.coreset_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(allowed_outputs) if config.cl_scenario != 2 else data.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "normal_1292": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(1, shared.noise_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__1321": {
                "parameters": {
                    "value": "hoptimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1139": {
                "tensors": {
                    "value": "[real, fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_1236": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=weights, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='train')",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.zeros((config.batch_size, task_id * data.num_classes)).to(device), T), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_1346": {
                "tensors": {
                    "value": "[p.flatten() for p in grad_prior_ssge]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "grad_559": {
                "outputs": {
                    "value": "entropy[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / shared.num_trained * torch.ones(shared.num_trained, requires_grad=True, device=device)",
                            "BinOp"
                        ],
                        [
                            "alphas.detach().clone() - config.supsup_lr * alphas_grad",
                            "BinOp"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "retain_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if b < len(entropy) - 1 else False",
                            "IfExp"
                        ],
                        [
                            "False if ii == last_grad_ind else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_1210": {
                "*size": {
                    "value": "(config.batch_size, task_id * data.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1244": {
                "input": {
                    "value": "pred_labels == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "grad_1369": {
                "outputs": {
                    "value": "theta_curr_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([p.flatten() for p in theta_current])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "psi_ii",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "theta_curr_grad_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([p.flatten() for p in theta_current_ssge_grad])",
                            "Call"
                        ],
                        [
                            "theta_curr_grad_flat * kl_scale",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "retain_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if b < len(entropy) - 1 else False",
                            "IfExp"
                        ],
                        [
                            "False if ii == last_grad_ind else True",
                            "IfExp"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1121": {
                "*size": {
                    "value": "config.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1122": {
                "*size": {
                    "value": "config.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1222": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1292": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shared.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/batchnorm_layer.py": {
        "torch": {
            "ParameterList_202": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_431": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rm",
                            "variable"
                        ],
                        [
                            "getattr(self, mname)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rv",
                            "variable"
                        ],
                        [
                            "getattr(self, vname)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._momentum",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_norm_439": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rm",
                            "variable"
                        ],
                        [
                            "getattr(self, mname)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rv",
                            "variable"
                        ],
                        [
                            "getattr(self, vname)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_norm_460": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "running_var": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._momentum",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_488": {
                "*size": {
                    "value": "self._num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, mname_old).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_490": {
                "*size": {
                    "value": "self._num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, mname_old).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_207": {
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/context_mod_layer.py": {
        "torch": {
            "ParameterList_195": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_579": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(self.gain.numel(), dtype=bool)",
                            "Call"
                        ],
                        [
                            "inds.reshape(-1)",
                            "Call"
                        ],
                        [
                            "inds.reshape(*self.gain.shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inds).to(self.gain.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_192": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_407": {
                "input": {
                    "value": "gain * self._sps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_450": {
                "input": {
                    "value": "self.gain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gain.device",
                            "Attribute"
                        ],
                        [
                            "self.shift.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_462": {
                "input": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gain.device",
                            "Attribute"
                        ],
                        [
                            "self.shift.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_198": {
                "data": {
                    "value": "torch.Tensor(*num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "data": {
                    "value": "torch.Tensor(*num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/ewc_regularizer.py": {
        "torch": {
            "backward_504": {
                "tensors": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "custom_nll(Y, T, data, allowed_outputs, empirical_fisher, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_nll(Y, T, data, allowed_outputs, empirical_fisher)",
                            "Call"
                        ],
                        [
                            "0.5 / regression_lvar * (Y - T).pow(2).sum()",
                            "BinOp"
                        ],
                        [
                            "F.nll_loss(F.log_softmax(Y, dim=1), torch.tensor([T]).to(device))",
                            "Call"
                        ],
                        [
                            "F.nll_loss(ll, T, reduction='none')",
                            "Call"
                        ],
                        [
                            "nll.mean(dim=1).sum()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_507": {
                "input": {
                    "value": "p.grad.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_381": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_473": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='inference')",
                            "Call"
                        ],
                        [
                            "target_manipulator(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_477": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='inference')",
                            "Call"
                        ],
                        [
                            "target_manipulator(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_484": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(Y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor([T]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_487": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=params)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, params, X, data, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, params, X)",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, hnet, task_id, params, X, data, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, hnet, task_id, params, X)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "Y[:, :, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_491": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(Y, dim=2)",
                            "Call"
                        ],
                        [
                            "ll.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='inference')",
                            "Call"
                        ],
                        [
                            "target_manipulator(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T, 2)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_387": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_484": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=params)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, params, X, data, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, params, X)",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, hnet, task_id, params, X, data, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, hnet, task_id, params, X)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "Y[:, :, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_485": {
                "data": {
                    "value": "[T]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/gan_helpers.py": {
        "torch": {
            "mean_161": {
                "variable": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_71": {
                "variable": {
                    "value": "r_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logit_real)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "0.9 * torch.ones_like(real)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_72": {
                "variable": {
                    "value": "f_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logit_fake)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logit_fake)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros_like(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_98": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "[stats, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_75": {
                "variable": {
                    "value": "r_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_real",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones_like(logit_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_76": {
                "variable": {
                    "value": "f_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.zeros_like(logit_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_99": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logit_fake)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logit_fake)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones_like(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logit_fake)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logit_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_79": {
                "variable": {
                    "value": "r_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_real",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones_like(logit_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_80": {
                "variable": {
                    "value": "f_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "-torch.ones_like(logit_fake)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_99": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logit_fake)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logit_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_102": {
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones_like(logit_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_71": {
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logit_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "logit_real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_102": {
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_105": {
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.zeros_like(logit_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_79": {
                "input": {
                    "value": "logit_real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_80": {
                "input": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/hnet_regularizer.py": {
        "torch": {
            "cat_135": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in hnet.forward(task_id=i)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "W_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in hnet.forward(task_id=i)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "W_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in hnet.forward(task_id=i, dTheta=dTheta)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "W_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in target]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "W_predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in weights_predicted]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_466": {
                "tensors": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_491": {
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[[p.detach() for p in W_tid] for W_tid in W]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_553": {
                "variable": {
                    "value": "W_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in target]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "W_predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in weights_predicted]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pow_169": {
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tmp + torch.mul(partial, dTheta[tind]).sum()",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "FI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in fisher_estimates[i]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "FI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in fisher_estimates[i]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mul_163": {
                "input": {
                    "value": "partial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(w, t, grad_outputs=None, retain_graph=True, create_graph=True, only_inputs=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "dTheta[tind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_154": {
                "outputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/init_utils.py": {
        "torch": {}
    },
    "utils/local_conv2d_layer.py": {
        "torch": {
            "unfold_274": {
                "variable": {
                    "value": "F_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_187": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "data": {
                    "value": "torch.Tensor(*self._param_shapes[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "data": {
                    "value": "torch.Tensor(*self._param_shapes[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc.py": {
        "torch": {
            "Sigmoid_134": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_138": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_140": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/optim_step.py": {
        "torch": {
            "zeros_like_268": {
                "variable": {
                    "value": "orig_state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_270": {
                "variable": {
                    "value": "orig_state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_365": {
                "variable": {
                    "value": "orig_state[square_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_203": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.detach().clone()",
                            "Call"
                        ],
                        [
                            "p.grad.clone()",
                            "Call"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_like_273": {
                "variable": {
                    "value": "orig_state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_303": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_367": {
                "variable": {
                    "value": "orig_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_369": {
                "variable": {
                    "value": "orig_state[grad_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/self_attention_layer.py": {
        "torch": {
            "Conv2d_55": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_78": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_102": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[0], bias=weights[1]).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[2], bias=weights[3]).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[4], bias=weights[5]).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_169": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ParameterList_189": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_265": {
                "variable": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "new_weights",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_265": {
                "variable": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_268": {
                "variable": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "new_weights",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_270": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[0], bias=weights[1]).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[2], bias=weights[3]).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_275": {
                "variable": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[5]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "new_weights",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_281": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[4], bias=weights[5]).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_74": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_75": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_76": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_192": {
                "data": {
                    "value": "torch.Tensor(*dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/si_regularizer.py": {
        "torch": {
            "zeros_like_204": {
                "variable": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_213": {
                "input": {
                    "value": "omega_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "running_omega / (total_change ** 2 + epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/sim_utils.py": {
        "torch": {
            "device_160": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_138": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/torch_ckpts.py": {
        "torch": {
            "load_129": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_fns",
                            "variable"
                        ],
                        [
                            "kept_ckpts[i][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_202": {
                "obj": {
                    "value": "ckpt_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_path + '_%d' % train_iter",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_225": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_228": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_265": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_307": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_181": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_tup[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "torch.load(ckpt_tup[0])",
                            "Call"
                        ],
                        [
                            "torch.load(ckpt_path)",
                            "Call"
                        ],
                        [
                            "torch.load(ckpt_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "torch.load(fpath)",
                            "Call"
                        ],
                        [
                            "torch.load(fpath)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_tup[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/torch_utils.py": {
        "torch": {
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Adadelta_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Adagrad_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "SGD_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}