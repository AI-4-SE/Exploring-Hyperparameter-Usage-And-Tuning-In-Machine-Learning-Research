{
    "ivpgan/metrics/all_metrics.py": {
        "sklearn": {
            "precision_recall_curve_89": {
                "variable": {
                    "value": "(precision, recall, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_63": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(np.squeeze(y_pred[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples,))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "from_one_hot(y_pred)",
                            "Call"
                        ],
                        [
                            "np.greater(y_pred, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_pred).astype(int)",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_tasks, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_tasks))",
                            "Call"
                        ],
                        [
                            "np.array(np.squeeze(y_pred[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples,))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "from_one_hot(y_pred)",
                            "Call"
                        ],
                        [
                            "np.greater(y_pred, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_pred).astype(int)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_77": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(np.squeeze(y_pred[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples,))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "from_one_hot(y_pred)",
                            "Call"
                        ],
                        [
                            "np.greater(y_pred, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_pred).astype(int)",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_tasks, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_tasks))",
                            "Call"
                        ],
                        [
                            "np.array(np.squeeze(y_pred[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples,))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "from_one_hot(y_pred)",
                            "Call"
                        ],
                        [
                            "np.greater(y_pred, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_pred).astype(int)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones_like(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_90": {
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(y[:, 1], y_pred[:, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(y[:, 1], y_pred[:, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_error_100": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(np.squeeze(y_true[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_true, (n_samples,))",
                            "Call"
                        ],
                        [
                            "to_one_hot(y_true).astype(int)",
                            "Call"
                        ],
                        [
                            "y_true.astype(int)",
                            "Call"
                        ],
                        [
                            "np.greater(y_true, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_true).astype(int)",
                            "Call"
                        ],
                        [
                            "np.reshape(y_true, (n_samples, n_tasks))",
                            "Call"
                        ],
                        [
                            "np.array(np.squeeze(y_true[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_true, (n_samples,))",
                            "Call"
                        ],
                        [
                            "to_one_hot(y_true).astype(int)",
                            "Call"
                        ],
                        [
                            "y_true.astype(int)",
                            "Call"
                        ],
                        [
                            "np.greater(y_true, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_true).astype(int)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(np.squeeze(y_pred[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples,))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "from_one_hot(y_pred)",
                            "Call"
                        ],
                        [
                            "np.greater(y_pred, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_pred).astype(int)",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_tasks, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_tasks))",
                            "Call"
                        ],
                        [
                            "np.array(np.squeeze(y_pred[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples,))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "from_one_hot(y_pred)",
                            "Call"
                        ],
                        [
                            "np.greater(y_pred, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_pred).astype(int)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_95": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(np.squeeze(y_true[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_true, (n_samples,))",
                            "Call"
                        ],
                        [
                            "to_one_hot(y_true).astype(int)",
                            "Call"
                        ],
                        [
                            "y_true.astype(int)",
                            "Call"
                        ],
                        [
                            "np.greater(y_true, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_true).astype(int)",
                            "Call"
                        ],
                        [
                            "np.reshape(y_true, (n_samples, n_tasks))",
                            "Call"
                        ],
                        [
                            "np.array(np.squeeze(y_true[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_true, (n_samples,))",
                            "Call"
                        ],
                        [
                            "to_one_hot(y_true).astype(int)",
                            "Call"
                        ],
                        [
                            "y_true.astype(int)",
                            "Call"
                        ],
                        [
                            "np.greater(y_true, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_true).astype(int)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(np.squeeze(y_pred[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples,))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "from_one_hot(y_pred)",
                            "Call"
                        ],
                        [
                            "np.greater(y_pred, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_pred).astype(int)",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_tasks, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_tasks))",
                            "Call"
                        ],
                        [
                            "np.array(np.squeeze(y_pred[w != 0]))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples,))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "np.reshape(y_pred, (n_samples, n_classes))",
                            "Call"
                        ],
                        [
                            "from_one_hot(y_pred)",
                            "Call"
                        ],
                        [
                            "np.greater(y_pred, self.threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "to_one_hot(y_pred).astype(int)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ivpgan/utils/train_helpers.py": {
        "sklearn": {
            "LinearSVC_45": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "accuracy_score_50": {
                "variable": {
                    "value": "san_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(train_x)",
                            "Call"
                        ],
                        [
                            "clf.predict(train_data)",
                            "Call"
                        ],
                        [
                            "clf.predict(test_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "LinearSVC_64": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "accuracy_score_69": {
                "variable": {
                    "value": "san_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(train_x)",
                            "Call"
                        ],
                        [
                            "clf.predict(train_data)",
                            "Call"
                        ],
                        [
                            "clf.predict(test_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_72": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(train_x)",
                            "Call"
                        ],
                        [
                            "clf.predict(train_data)",
                            "Call"
                        ],
                        [
                            "clf.predict(test_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "StandardScaler_102": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_236": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name + '.mod')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_247": {
                "f": {
                    "value": "os.path.join(path, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_159": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[view_idx][0]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(X, dim=1)",
                            "Call"
                        ],
                        [
                            "X.cuda()",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/KIBA_data/add_source.py": {
        "tensorflow": {}
    },
    "data/KIBA_data/preprocess.py": {
        "tensorflow": {}
    },
    "data/NCI60_data/preprocess.py": {
        "tensorflow": {}
    },
    "data/full_toxcast/change_nm.py": {
        "tensorflow": {}
    },
    "data/metz_data/add_source.py": {
        "tensorflow": {}
    },
    "data/metz_data/preprocess.py": {
        "tensorflow": {}
    },
    "ivpgan/__init__.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ivpgan/data/data.py": {
        "torch": {
            "from_numpy_247": {
                "variable": {
                    "value": "prots_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(prot_descriptor, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "mols_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([mol.get_array() for mol in mols])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "variable": {
                    "value": "prots_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "prot_desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[prot_desc_dict[prot_name] for prot_name in prot_names]",
                            "ListComp"
                        ],
                        [
                            "np.array(prot_desc)",
                            "Call"
                        ],
                        [
                            "prot_desc.reshape(prot_desc.shape[0], prot_desc.shape[2])",
                            "Call"
                        ],
                        [
                            "[prot_desc_dict[prot_name] for prot_name in prot_names]",
                            "ListComp"
                        ],
                        [
                            "np.array(prot_desc)",
                            "Call"
                        ],
                        [
                            "prot_desc.reshape(prot_desc.shape[0], prot_desc.shape[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_282": {
                "ndarray": {
                    "value": "prot_desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[prot_desc_dict[prot_name] for prot_name in prot_names]",
                            "ListComp"
                        ],
                        [
                            "np.array(prot_desc)",
                            "Call"
                        ],
                        [
                            "prot_desc.reshape(prot_desc.shape[0], prot_desc.shape[2])",
                            "Call"
                        ],
                        [
                            "[prot_desc_dict[prot_name] for prot_name in prot_names]",
                            "ListComp"
                        ],
                        [
                            "np.array(prot_desc)",
                            "Call"
                        ],
                        [
                            "prot_desc.reshape(prot_desc.shape[0], prot_desc.shape[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "data": {
                    "value": "np.concatenate(atom_feat, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "data": {
                    "value": "np.concatenate(pair_feat, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "data": {
                    "value": "np.array(pair_split)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "data": {
                    "value": "np.array(atom_split)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "data": {
                    "value": "np.concatenate(atom_to_pair, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_270": {
                "ndarray": {
                    "value": "multiConvMol.get_atom_features()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "ndarray": {
                    "value": "multiConvMol.deg_slice",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "data": {
                    "value": "multiConvMol.membership",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "ndarray": {
                    "value": "multiConvMol.get_deg_adjacency_lists()[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_list[i][index]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ivpgan/nn/layers.py": {
        "torch": {
            "prod_25": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(data.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gaussian_histogram(outputs)",
                            "Call"
                        ],
                        [
                            "[dist[i].log_prob(x) / dist_max[i] for i in range(len(self.gaussian_memberships))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outputs, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.add(outputs, torch.tensor(self.epsilon)) / torch.add(torch.sum(outputs, dim=2, keepdim=True), self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "outputs.view(-1, self.conv_out_depth * len(self.gaussian_memberships))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_206": {
                "variable": {
                    "value": "self.atom_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_207": {
                "variable": {
                    "value": "self.pair_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_217": {
                "variable": {
                    "value": "self.a_batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "atom_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atom_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_218": {
                "variable": {
                    "value": "self.p_batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "pair_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pair_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_234": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "atom_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_rel_atoms_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.max_degree + 1 - self.min_degree) * [None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "mol_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sparse_reps, max_reps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_487": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "sub_lyr",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_251": {
                "variable": {
                    "value": "summed_atoms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atoms[idx.long()]",
                            "Subscript"
                        ],
                        [
                            "atom_features[deg_adj_lists[deg - 1].long()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([self_atoms, gathered_atoms], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_331": {
                "variable": {
                    "value": "self_atoms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atom_features[begin:begin + size, :]",
                            "Subscript"
                        ],
                        [
                            "atom_features[begin:begin + size, :]",
                            "Subscript"
                        ],
                        [
                            "atom_features[begin:begin + size, :]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(self_atoms, 1)",
                            "Call"
                        ],
                        [
                            "atom_features[begin:begin + size, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "gathered_atoms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_atoms, gathered_atoms]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[AA, PA]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_188": {
                "loc": {
                    "value": "torch.tensor(m)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_193": {
                "input": {
                    "value": "torch.sum(outputs, dim=2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "[AP_ij + AP_ji, PP]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.prod(torch.tensor(data.shape[1:])).long()",
                            "Call"
                        ],
                        [
                            "check_cuda(s)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_193": {
                "data": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gaussian_histogram(outputs)",
                            "Call"
                        ],
                        [
                            "[dist[i].log_prob(x) / dist_max[i] for i in range(len(self.gaussian_memberships))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(outputs, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.add(outputs, torch.tensor(self.epsilon)) / torch.add(torch.sum(outputs, dim=2, keepdim=True), self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "outputs.view(-1, self.conv_out_depth * len(self.gaussian_memberships))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_337": {
                "input": {
                    "value": "gathered_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atoms[idx.long()]",
                            "Subscript"
                        ],
                        [
                            "atom_features[deg_adj_lists[deg - 1].long()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([self_atoms, gathered_atoms], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_51": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ivpgan/nn/models.py": {
        "torch": {
            "cat_319": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "list(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_328": {
                "variable": {
                    "value": "self.comp_tup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "mod1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_329": {
                "variable": {
                    "value": "self.prot_tup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "mod2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_138": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fcn_arg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_157": {
                "variable": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "fcn_arg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_188": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "gc_arg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_193": {
                "variable": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "gc_arg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_arg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "conv_arg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "in_features": {
                    "value": "gc_arg[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gc_arg.dense_layer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_203": {
                "num_features": {
                    "value": "gc_arg.dense_layer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_arg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout2d_115": {
                "variable": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "conv_arg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_205": {
                "p": {
                    "value": "gc_arg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_376": {
                "input": {
                    "value": "torch.abs(y_ - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_376": {
                "input": {
                    "value": "y_ - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ivpgan/nn/tests/test_layers.py": {
        "torch": {
            "Dropout_65": {
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_66": {
                "num_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_89": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_115": {
                "input": {
                    "value": "out_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gconv_gather(input_data, len(mols))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ivpgan/nn/tests/test_models.py": {
        "torch": {
            "randn_31": {
                "variable": {
                    "value": "self.data_1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "self.data_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ivpgan/utils/args.py": {
        "torch": {
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_36": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ivpgan/utils/io.py": {
        "torch": {
            "save_66": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name + '.mod')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_77": {
                "f": {
                    "value": "os.path.join(path, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_77": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ivpgan/utils/math.py": {
        "torch": {
            "stack_107": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(t_grp.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_72": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(data.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_47": {
                "input": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_ids.repeat_interleave(s).view(segment_ids.shape[0], *data.shape[1:])",
                            "Call"
                        ],
                        [
                            "segment_ids",
                            "Method Argument"
                        ],
                        [
                            "segment_ids",
                            "Method Argument"
                        ],
                        [
                            "segment_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_101": {
                "variable": {
                    "value": "t_grp[s_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "t_grp[s_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ivpgan/utils/mols.py": {
        "torch": {
            "tensor_46": {
                "data": {
                    "value": "np.concatenate(atom_feat, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "np.concatenate(pair_feat, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "np.array(pair_split)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "np.array(atom_split)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "np.concatenate(atom_to_pair, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "multiConvMol.get_atom_features()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "multiConvMol.deg_slice",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "multiConvMol.membership",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "multiConvMol.get_deg_adjacency_lists()[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "proj/dti/singleview.py": {
        "torch": {
            "set_device_47": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "PairSequential(mod1=(weave_model,), mod2=(nn.Identity(),))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "PairSequential(mod1=(gconv_model,), mod2=(nn.Identity(),))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DtiDataset(x_s=[data[1][0].X for data in data_dict.values()], y_s=[data[1][0].y for data in data_dict.values()], w_s=[data[1][0].w for data in data_dict.values()])",
                            "Call"
                        ],
                        [
                            "DtiDataset(x_s=[data[1][fold][0].X for data in data_dict.values()], y_s=[data[1][fold][0].y for data in data_dict.values()], w_s=[data[1][fold][0].w for data in data_dict.values()])",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hparams['tr_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hparams['val_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "StepLR_277": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainer.initialize(hparams=hyper_params, train_dataset=data['train'], val_dataset=data['val'], test_dataset=data['test'])",
                            "Call"
                        ],
                        [
                            "{'adadelta': torch.optim.Adadelta, 'adagrad': torch.optim.Adagrad, 'adam': torch.optim.Adam, 'adamax': torch.optim.Adamax, 'asgd': torch.optim.ASGD, 'rmsprop': torch.optim.RMSprop, 'Rprop': torch.optim.Rprop, 'sgd': torch.optim.SGD}.get(hparams['optimizer'].lower(), None)",
                            "Call"
                        ],
                        [
                            "optimizer(model.parameters(), **optim_kwargs)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_278": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_494": {
                "variable": {
                    "value": "num_cuda_dvcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_128": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_133": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_138": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "p": {
                    "value": "hparams['dprob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "DtiDataset(x_s=[data[1][fold][2].X for data in data_dict.values()], y_s=[data[1][fold][2].y for data in data_dict.values()], w_s=[data[1][fold][2].w for data in data_dict.values()])",
                            "Call"
                        ],
                        [
                            "DtiDataset(x_s=[data[1][2].X for data in data_dict.values()], y_s=[data[1][2].y for data in data_dict.values()], w_s=[data[1][2].w for data in data_dict.values()])",
                            "Call"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hparams['test_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_509": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seeds",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_all_510": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seeds",
                            "variable"
                        ]
                    ]
                }
            },
            "Identity_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[view][1]",
                            "Subscript"
                        ],
                        [
                            "np.array([k for k in y], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "data[view][1]",
                            "Subscript"
                        ],
                        [
                            "np.array([k for k in y], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_330": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[view][2]",
                            "Subscript"
                        ],
                        [
                            "np.array([k for k in w], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "data[view][2]",
                            "Subscript"
                        ],
                        [
                            "np.array([k for k in w], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_439": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[view][2]",
                            "Subscript"
                        ],
                        [
                            "np.array([k for k in w], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "data[view][2]",
                            "Subscript"
                        ],
                        [
                            "np.array([k for k in w], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_327": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_437": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "proj/dti/train_joint_gan.py": {
        "torch": {
            "set_device_50": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_72": {
                "variable": {
                    "value": "fp_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_75": {
                "variable": {
                    "value": "prot_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "civ_net",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_count_521": {
                "variable": {
                    "value": "num_cuda_dvcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DtiDataset(x_s=[data[1][0].X for data in data_dict.values()], y_s=[data[1][0].y for data in data_dict.values()], w_s=[data[1][0].w for data in data_dict.values()])",
                            "Call"
                        ],
                        [
                            "DtiDataset(x_s=[data[1][fold][0].X for data in data_dict.values()], y_s=[data[1][fold][0].y for data in data_dict.values()], w_s=[data[1][fold][0].w for data in data_dict.values()])",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hparams['tr_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hparams['val_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "StepLR_244": {
                "variable": {
                    "value": "scheduler_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer(generator.parameters(), **optim_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_245": {
                "variable": {
                    "value": "scheduler_disc",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer(discriminator.parameters(), **optim_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_248": {
                "variable": {
                    "value": "prediction_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_249": {
                "variable": {
                    "value": "adversarial_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams['gconv_dim']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_66": {
                "num_features": {
                    "value": "hparams['gconv_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "p": {
                    "value": "hparams['dprob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "DtiDataset(x_s=[data[1][fold][2].X for data in data_dict.values()], y_s=[data[1][fold][2].y for data in data_dict.values()], w_s=[data[1][fold][2].w for data in data_dict.values()])",
                            "Call"
                        ],
                        [
                            "DtiDataset(x_s=[data[1][2].X for data in data_dict.values()], y_s=[data[1][2].y for data in data_dict.values()], w_s=[data[1][2].w for data in data_dict.values()])",
                            "Call"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "hparams['test_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ],
                        [
                            "hparams",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_536": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seeds",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_all_537": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seeds",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_321": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1, 1).astype(np.float)",
                            "Call"
                        ],
                        [
                            "Ys[list(Xs.keys())[0]]",
                            "Subscript"
                        ],
                        [
                            "Ys[list(Xs.keys())[0]]",
                            "Subscript"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_322": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws[list(Xs.keys())[0]]",
                            "Subscript"
                        ],
                        [
                            "Ws[list(Xs.keys())[0]]",
                            "Subscript"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_323": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y).float()",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_324": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y).float()",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_336": {
                "variable": {
                    "value": "(f_xx, f_yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "outputs.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "outputs.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_338": {
                "variable": {
                    "value": "(r_xx, r_yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "target.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "target.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_471": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ws[list(Xs.keys())[0]]",
                            "Subscript"
                        ],
                        [
                            "Ws[list(Xs.keys())[0]]",
                            "Subscript"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_310": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_461": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_337": {
                "input": {
                    "value": "f_xx - f_yy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_337": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_339": {
                "input": {
                    "value": "r_xx - r_yy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_339": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}