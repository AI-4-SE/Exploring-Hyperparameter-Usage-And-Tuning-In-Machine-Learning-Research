{
    "src/data/__init__.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "self.loader_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MyConcatDataset(datasets)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "not args.cpu",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(m, 'Benchmark')(args, train=False, name=d)",
                            "Call"
                        ],
                        [
                            "getattr(m, module_name)(args, train=False, name=d)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "not args.cpu",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/benchmark.py": {
        "torch": {}
    },
    "src/data/common.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(img.transpose((2, 0, 1)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/demo.py": {
        "torch": {}
    },
    "src/data/srdata.py": {
        "torch": {}
    },
    "src/data/video.py": {
        "torch": {}
    },
    "src/dataloader.py": {
        "torch": {
            "set_num_threads_27": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Event_93": {
                "variable": {
                    "value": "self.done_event",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/__init__.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.log, torch.zeros(1, len(self.loss)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_191": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_178": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_26": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_187": {
                "f": {
                    "value": "os.path.join(apath, 'loss.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_28": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_30": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/adversarial.py": {
        "torch": {
            "ones_like_102": {
                "variable": {
                    "value": "label_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_103": {
                "variable": {
                    "value": "label_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_104": {
                "variable": {
                    "value": "bce_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(d_fake_bp)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(real)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_105": {
                "variable": {
                    "value": "bce_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_83": {
                "variable": {
                    "value": "label_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_bp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_84": {
                "variable": {
                    "value": "loss_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_bp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(d_fake_bp)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(real)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_50": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_54": {
                "outputs": {
                    "value": "d_hat.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_detach.mul(1 - epsilon) + real.mul(epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/discriminator.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_classifier",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "*args": {
                    "value": "nn.Conv2d(_in_channels, _out_channels, 3, padding=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "out_channels * patch_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_43": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "_in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "_out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/vgg.py": {
        "torch": {
            "mse_loss_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vgg_sr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_forward(sr)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "vgg_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_forward(hr.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules[:8]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules[:35]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_47": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/__init__.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_102": {
                "variable": {
                    "value": "load_from",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'model_latest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_199": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_dirs",
                            "Name"
                        ],
                        [
                            "save_dirs",
                            "Name"
                        ]
                    ]
                }
            },
            "save_93": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_dirs",
                            "Name"
                        ],
                        [
                            "save_dirs",
                            "Name"
                        ]
                    ]
                }
            },
            "load_120": {
                "variable": {
                    "value": "load_from",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'model_{}.pt'.format(resume))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "[a[..., top, left], a[..., top, right], a[..., bottom, left], a[..., bottom, right]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_229": {
                "tensors": {
                    "value": "_y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_229": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_118": {
                "variable": {
                    "value": "load_from",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/common.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size + (kernel_size - 1) * (dilation - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size + (kernel_size - 1) * (dilation - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "set_padding_size(kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_25": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.cafms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(out_channels, 1) for _ in range(args.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_26": {},
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.cafms1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(n_feats, 1) for _ in range(args.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.cafms2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(n_feats, 1) for _ in range(args.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.cafms1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(n_feats, 1) for _ in range(args.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.cafms2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(n_feats, 1) for _ in range(args.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "PixelShuffle_189": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_199": {
                "upscale_factor": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "num_features": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_201": {
                "num_features": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_203": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_195": {
                "num_parameters": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_205": {
                "num_parameters": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/ddbpn.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(inter_channels, nr, scale, up), nn.PReLU(nr)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(nr, inter_channels, scale, not up), nn.PReLU(inter_channels)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(inter_channels, nr, scale, up), nn.PReLU(nr)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.initial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*initial",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.upmodules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.downmodules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reconstruction",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(in_channels, nr, 1), nn.PReLU(nr)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_82": {
                "num_parameters": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_84": {
                "num_parameters": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.depth * nr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "l_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_44": {
                "num_parameters": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "PReLU_48": {
                "num_parameters": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "PReLU_52": {
                "num_parameters": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_35": {
                "num_parameters": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/edsr.py": {
        "torch": {
            "ReLU_33": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "m_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[common.ResBlock(conv, n_feats, kernel_size, args, bn=True, act=act, res_scale=args.res_scale) for _ in range(n_resblocks)]",
                            "ListComp"
                        ],
                        [
                            "[common.ResBlock_org(conv, n_feats, kernel_size, args, act=act, res_scale=args.res_scale) for _ in range(n_resblocks)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/espcn.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size + (kernel_size - 1) * (dilation - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "set_padding_size(kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.act_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3 * self.scale ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PixelShuffle_45": {
                "variable": {
                    "value": "self.pixel_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.cafms1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(64, 1) for _ in range(self.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.cafms2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(64, 1) for _ in range(self.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.cafms3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(32, 1) for _ in range(self.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/mdconv.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.depthwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernal_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernal_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_61": {
                "variable": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.split_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer(s) for (layer, s) in zip(self.layers, split)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.group_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * idx + 3",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.group_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_44": {
                "variable": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.split_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer(s) for (layer, s) in zip(self.group_layers, split)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "self.split_in_channels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "split_out_channels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * idx + 3",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/mdsr.py": {
        "torch": {
            "ReLU_19": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.pre_process",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(common.ResBlock(conv, n_feats, 5, act=act), common.ResBlock(conv, n_feats, 5, act=act)) for _ in args.scale]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[common.Upsampler(conv, s, n_feats, act=False) for s in args.scale]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "*args": {
                    "value": "common.ResBlock(conv, n_feats, 5, act=act)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/rcan.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size + (kernel_size - 1) * (dilation - 1)",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "get_valid_padding(kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_33": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.conv_du",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel, channel // reduction, 1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[RCAB(args, conv, n_feat, kernel_size, reduction, bias=True, bn=False, act=nn.ReLU(True), res_scale=1, segnum=segnum) for _ in range(n_resblocks)]",
                            "ListComp"
                        ],
                        [
                            "[ResidualGroup(self.args, conv, n_feats, kernel_size, reduction, act=act, res_scale=args.res_scale, n_resblocks=n_resblocks, segnum=args.segnum) for _ in range(n_resgroups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[RCAB(args, conv, n_feat, kernel_size, reduction, bias=True, bn=False, act=nn.ReLU(True), res_scale=1, segnum=segnum) for _ in range(n_resblocks)]",
                            "ListComp"
                        ],
                        [
                            "[ResidualGroup(self.args, conv, n_feats, kernel_size, reduction, act=act, res_scale=args.res_scale, n_resblocks=n_resblocks, segnum=args.segnum) for _ in range(n_resgroups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/rdn.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(Cin, G, kSize, padding=(kSize - 1) // 2, stride=1), nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.LFF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0 + C * G",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.SFENet1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.SFENet2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.RDBs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.GFF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(self.D * G0, G0, 1, padding=0, stride=1), nn.Conv2d(G0, G0, kSize, padding=(kSize - 1) // 2, stride=1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.UPNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(G0, G * r * r, kSize, padding=(kSize - 1) // 2, stride=1), nn.PixelShuffle(r), nn.Conv2d(G, args.n_colors, kSize, padding=(kSize - 1) // 2, stride=1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.UPNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(G0, G * 4, kSize, padding=(kSize - 1) // 2, stride=1), nn.PixelShuffle(2), nn.Conv2d(G, G * 4, kSize, padding=(kSize - 1) // 2, stride=1), nn.PixelShuffle(2), nn.Conv2d(G, args.n_colors, kSize, padding=(kSize - 1) // 2, stride=1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "RDBs_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "Cin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChannels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "Name"
                        ],
                        [
                            "growRate",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "self.D * G0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G * r * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_79": {
                "upscale_factor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.scale[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "Name"
                        ],
                        [
                            "growRate",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "Name"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_85": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "Name"
                        ],
                        [
                            "growRate",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_87": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "Name"
                        ],
                        [
                            "growRate",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/srcnn.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size + (kernel_size - 1) * (dilation - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "set_padding_size(kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_39": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "args.n_colors",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "9 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "args.n_colors",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.cafms1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(64, 1) for _ in range(self.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.cafms2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ContentAwareFM(32, 1) for _ in range(self.segnum)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/vdsrr.py": {
        "torch": {
            "Upsample_23": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "m_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer_cafm.py": {
        "torch": {
            "device_163": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_98": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_160": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.loader_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(self.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_value__74": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "self.args.gclip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utility.py": {
        "torch": {
            "Tensor_47": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.log, log]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.get_path('psnr_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.get_path('psnr_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_227": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.get_dir(save_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_230": {
                "f": {
                    "value": "self.get_dir(load_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/videotester.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_23": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_63": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}