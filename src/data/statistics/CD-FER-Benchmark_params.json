{
    "AGRA/Utils.py": {
        "sklearn": {
            "KMeans_1179": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_1203": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TSNE_1244": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1335": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_1181": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1205": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_78": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_163": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_170": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IR(18, args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "IR_onlyGlobal(18)",
                            "Call"
                        ],
                        [
                            "IR(50, args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "IR_onlyGlobal(50)",
                            "Call"
                        ],
                        [
                            "VGG(args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "VGG_onlyGlobal()",
                            "Call"
                        ],
                        [
                            "MobileNetV2(args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "MobileNetV2_onlyGlobal()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_1019": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1021": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_1088": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1106": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1131": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1151": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1084": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_1132": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1152": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_1090": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1108": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1134": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1154": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1135": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1155": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/Utils.py": {
        "sklearn": {
            "KMeans_1179": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_1203": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TSNE_1244": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1335": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_1181": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1205": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_78": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_163": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_170": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IR(18, args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "IR_onlyGlobal(18)",
                            "Call"
                        ],
                        [
                            "IR(50, args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "IR_onlyGlobal(50)",
                            "Call"
                        ],
                        [
                            "VGG(args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "VGG_onlyGlobal()",
                            "Call"
                        ],
                        [
                            "MobileNetV2(args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "MobileNetV2_onlyGlobal()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_1019": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1021": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_1088": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1106": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1131": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1151": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1084": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_1132": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1152": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_1090": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1108": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1134": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1154": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1135": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1155": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DETN/Utils.py": {
        "sklearn": {
            "KMeans_1174": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_1198": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TSNE_1229": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1292": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_1176": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1200": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1381": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1382": {
                "variable": {
                    "value": "landmark",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "landmark",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Train/CK+_Train_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Train/CK+_Train_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Train/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Val/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Val/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(landmark, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1383": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_75": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_1014": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1016": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_1083": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1101": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1126": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1146": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1079": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1097": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_1353": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, axis=1)",
                            "Call"
                        ],
                        [
                            "pred.astype(np.int32).reshape(pred.shape[0])",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred, dim=1).cpu().data",
                            "Attribute"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1127": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1147": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_1085": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1103": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1129": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1149": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1130": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1150": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DFA/Utils.py": {
        "sklearn": {
            "KMeans_1173": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_1197": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TSNE_1228": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1291": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_1175": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1199": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1363": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1364": {
                "variable": {
                    "value": "landmark",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "landmark",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Train/CK+_Train_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Train/CK+_Train_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Train/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Val/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Val/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(landmark, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1365": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_75": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_150": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_1013": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1015": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_1082": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1100": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1125": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1145": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1078": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1096": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_1126": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1146": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_1084": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1102": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1128": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1148": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1129": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1149": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/Utils.py": {
        "sklearn": {
            "KMeans_1174": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_1198": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TSNE_1229": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1292": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_1176": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1200": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1381": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1382": {
                "variable": {
                    "value": "landmark",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "landmark",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Train/CK+_Train_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Train/CK+_Train_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/CK+_Emotion/Val/CK+_Val_crop/landmark_5/', expression, imgFile[:-3] + 'txt')).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/JAFFE/annos/landmark_5/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Train/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Val/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/MMI/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Oulu-CASIA/annos/landmark_5/VL_Acropped/Strong/' + list_patition_label[index, 0][:-4] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(os.path.join(dataPath_prefix + '/SFEW/Val/Annotations/Landmarks_5/', expression, bboxName)).astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/FER2013/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.array(list_patition_label[index, 7:]).astype(np.int).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Asian_Facial_Expression/AsianMovie_0725_0730/annos/landmark_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/Western_Films_Expression_Datasets/annos/5_landmarks/' + list_patition_label[index, 0] + '.txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(dataPath_prefix + '/RAF/basic/Annotation/Landmarks_5/' + list_patition_label[index, 0][:-3] + 'txt').astype(np.int)",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "landmark.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(landmark, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1383": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_75": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_1014": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1016": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_1083": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1101": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1126": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1146": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1079": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1097": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_1353": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, axis=1)",
                            "Call"
                        ],
                        [
                            "pred.astype(np.int32).reshape(pred.shape[0])",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred, dim=1).cpu().data",
                            "Attribute"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1127": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1147": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_1085": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1103": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1129": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1149": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, False, 'Target')",
                            "Call"
                        ],
                        [
                            "model(trans_img.unsqueeze(0), landmark.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1130": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1150": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/Utils.py": {
        "sklearn": {
            "TSNE_1087": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1150": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_75": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_150": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_1014": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1016": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_1077": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ICID/Utils.py": {
        "sklearn": {
            "TSNE_1087": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1150": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_75": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_1014": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1016": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_1077": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LPL/Utils.py": {
        "sklearn": {
            "TSNE_1086": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1149": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_75": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_150": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_1013": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1015": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_1076": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/Utils.py": {
        "sklearn": {
            "KMeans_1179": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_1203": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TSNE_1244": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1335": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_1181": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1205": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_78": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_163": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_170": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IR(18, args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "IR_onlyGlobal(18)",
                            "Call"
                        ],
                        [
                            "IR(50, args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "IR_onlyGlobal(50)",
                            "Call"
                        ],
                        [
                            "VGG(args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "VGG_onlyGlobal()",
                            "Call"
                        ],
                        [
                            "MobileNetV2(args.useIntraGCN, args.useInterGCN, args.useRandomMatrix, args.useAllOneMatrix, args.useCov, args.useCluster)",
                            "Call"
                        ],
                        [
                            "MobileNetV2_onlyGlobal()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_1019": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1021": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_1088": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1106": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1131": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1151": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1084": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_1132": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1152": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_1090": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1108": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1134": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1154": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, 'Target')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain)",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Source')",
                            "Call"
                        ],
                        [
                            "model(input, landmark, useClassify, domain='Target')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_1135": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_1155": {
                "input": {
                    "value": "(feature - mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SWD/Utils.py": {
        "sklearn": {
            "TSNE_1086": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_1149": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_75": {
                "params": {
                    "value": "parameter_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameter_list",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * (1 + gamma * iter_num) ** (-power)",
                            "BinOp"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ],
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_150": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.Resume_Model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_1013": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1015": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data_imgs, data_labels, data_bboxs, data_landmarks, flag1, trans, target_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_1076": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/AdversarialNetwork.py": {
        "torch": {
            "Sequential_71": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 96, kernel_size=11, stride=4, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 6 * 6, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./alexnet.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.conv_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.fc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 4 * 4, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_314": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "self.conv_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 20, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "self.fc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50 * 4 * 4, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "variable": {
                    "value": "self.ad_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_368": {
                "variable": {
                    "value": "self.ad_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.ad_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_371": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_372": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_374": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_375": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_377": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_33": {
                "variable": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[0] / math.pow(float(self.output_dim), 1.0 / len(return_list))",
                            "BinOp"
                        ],
                        [
                            "torch.mul(return_tensor, single)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "AvgPool3d_45": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(local_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int((local_size - 1.0) / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((local_size - 1.0) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "input_dim_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_30": {
                "input": {
                    "value": "input_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.random_matrix[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_86": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_293": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_294": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_295": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_297": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_298": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_299": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_302": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_303": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_308": {
                "in_features": {
                    "value": "256 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_309": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_331": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_332": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_335": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_336": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_340": {
                "in_features": {
                    "value": "50 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/Dataset.py": {
        "torch": {}
    },
    "AGRA/GraphConvolutionNetwork.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.repeat(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.Dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_181": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "self.IntraAdjMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.InterAdjMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_240": {
                "variable": {
                    "value": "InterMaskMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "Feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_191": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_212": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_214": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/Loss.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "-input_ * torch.log(input_ + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_63": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCELoss_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_9": {
                "input": {
                    "value": "input_ + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_68": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_70": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/MobileNet.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7], *features[8], nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_101": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_111": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_112": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_290": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_338": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_340": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_342": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_280": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_94": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_342": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_344": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_96": {
                "*args": {
                    "value": "*features[7]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/Model.py": {
        "torch": {
            "PairwiseDistance_156": {
                "variable": {
                    "value": "pairwiseDistance",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "self.temple_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.temple_batch, input.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "input": {
                    "value": "self.running_mean[self.findClusterIndex(input[index])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_30": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_76": {
                "input": {
                    "value": "(self.temple_batch - self.running_mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.temple_batch - self.running_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "torch.cat(self.temple_cluster[index], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "self.temple_cluster[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/ResNet.py": {
        "torch": {
            "norm_19": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_20": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_27": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_37": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_181": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_191": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_192": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_375": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_395": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_72": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_365": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_59": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_80": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_152": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_162": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_387": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_388": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_389": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_399": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/TrainOnSourceDomain.py": {
        "torch": {
            "SummaryWriter_423": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_72": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_178": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_241": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/TransferToTargetDomain.py": {
        "torch": {
            "SummaryWriter_479": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_70": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_231": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_346": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(landmark_source, landmark_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_326": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_328": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_335": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_337": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_130": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_157": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_152": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/VGG.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_45": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_264": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_224": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_34": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_245": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_245": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_246": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_247": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_248": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_248": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_249": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_250": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_251": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_251": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_252": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_253": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_253": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_254": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_255": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_255": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_256": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_257": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_259": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_260": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_261": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_261": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_262": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_268": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_22": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet_GCNwithIntraMatrixAndInterMatrix_useCluster.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_11": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet_GCNwithIntraMatrixAndInterMatrix_useCluster.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet_GCNwithIntraMatrixAndInterMatrix_useCluster.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AGRA/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_22": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet_GCNwithIntraMatrixAndInterMatrix_useCluster.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/AdversarialNetwork.py": {
        "torch": {
            "Sequential_71": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 96, kernel_size=11, stride=4, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 6 * 6, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./alexnet.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.conv_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.fc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 4 * 4, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_314": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "self.conv_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 20, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "self.fc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50 * 4 * 4, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "variable": {
                    "value": "self.ad_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_368": {
                "variable": {
                    "value": "self.ad_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.ad_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_371": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_372": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_374": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_375": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_377": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_33": {
                "variable": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[0] / math.pow(float(self.output_dim), 1.0 / len(return_list))",
                            "BinOp"
                        ],
                        [
                            "torch.mul(return_tensor, single)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "AvgPool3d_45": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(local_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int((local_size - 1.0) / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((local_size - 1.0) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "input_dim_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_30": {
                "input": {
                    "value": "input_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.random_matrix[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_86": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_293": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_294": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_295": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_297": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_298": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_299": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_302": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_303": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_308": {
                "in_features": {
                    "value": "256 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_309": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_331": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_332": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_335": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_336": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_340": {
                "in_features": {
                    "value": "50 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/Dataset.py": {
        "torch": {}
    },
    "CADA/GraphConvolutionNetwork.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.repeat(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.Dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_181": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "self.IntraAdjMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.InterAdjMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_240": {
                "variable": {
                    "value": "InterMaskMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "Feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_191": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_212": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_214": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/Loss.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "-input_ * torch.log(input_ + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_63": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCELoss_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_9": {
                "input": {
                    "value": "input_ + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_68": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_70": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/MobileNet.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7], *features[8], nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_101": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_111": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_112": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_290": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_338": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_340": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_342": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_280": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_94": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_342": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_344": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_96": {
                "*args": {
                    "value": "*features[7]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CADA/Model.py": {
        "torch": {
            "PairwiseDistance_156": {
                "variable": {
                    "value": "pairwiseDistance",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "self.temple_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.temple_batch, input.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "input": {
                    "value": "self.running_mean[self.findClusterIndex(input[index])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_30": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_76": {
                "input": {
                    "value": "(self.temple_batch - self.running_mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.temple_batch - self.running_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "torch.cat(self.temple_cluster[index], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "self.temple_cluster[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/ResNet.py": {
        "torch": {
            "norm_19": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_20": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_27": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_37": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_181": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_191": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_192": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_375": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_395": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_72": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_365": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_59": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_80": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_152": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_162": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_387": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_388": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_389": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_399": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/TrainOnSourceDomain.py": {
        "torch": {
            "SummaryWriter_423": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_72": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_178": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_241": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CADA/TransferToTargetDomain.py": {
        "torch": {
            "SummaryWriter_479": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_70": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_231": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_346": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(landmark_source, landmark_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_326": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_328": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_335": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_337": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_130": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_157": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_152": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/VGG.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_45": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_264": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_224": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_34": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_245": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_245": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_246": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_247": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_248": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_248": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_249": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_250": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_251": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_251": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_252": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_253": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_253": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_254": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_255": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_255": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_256": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_257": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_259": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_260": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_261": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_261": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_262": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_268": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CADA/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_22": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_11": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CADA/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_22": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DETN/Dataset.py": {
        "torch": {
            "tensor_98": {
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.labels[index])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DETN/Loss.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "-input_ * torch.log(input_ + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_63": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.PairwiseDistance(p=2.0, eps=1e-06, keepdim=False)(x.unsqueeze(0), y.unsqueeze(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "-distance / (2 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_9": {
                "input": {
                    "value": "input_ + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_68": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PairwiseDistance_103": {
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_70": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DETN/MobileNet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7], *features[8], nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_91": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*features[7]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DETN/ResNet.py": {
        "torch": {
            "norm_16": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_17": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_24": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_34": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PairwiseDistance_289": {
                "variable": {
                    "value": "pairwiseDistance",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_309": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_324": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_332": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_345": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_414": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_426": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_431": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_432": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_434": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_436": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_69": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_layer(x)",
                            "Call"
                        ],
                        [
                            "self.res_layer(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_404": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_56": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_77": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_149": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "self.temple_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.temple_batch, input.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_240": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_302": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_303": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_311": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_313": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_323": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_426": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_427": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_428": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_436": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_438": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_278": {
                "input": {
                    "value": "self.running_mean[self.findClusterIndex(input[index])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_163": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_200": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_209": {
                "input": {
                    "value": "(self.temple_batch - self.running_mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.temple_batch - self.running_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_263": {
                "input": {
                    "value": "torch.cat(self.temple_cluster[index], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "self.temple_cluster[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DETN/TrainOnSourceDomain.py": {
        "torch": {
            "SummaryWriter_337": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_54": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_156": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_276": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DETN/TransferToTargetDomain.py": {
        "torch": {
            "SummaryWriter_331": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_49": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_149": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_264": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "(landmark_source, landmark_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DETN/VGG.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_31": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DETN/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DETN/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DETN/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DFA/Dataset.py": {
        "torch": {
            "tensor_98": {
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.labels[index])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DFA/Loss.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "-input_ * torch.log(input_ + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_63": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.PairwiseDistance(p=2.0, eps=1e-06, keepdim=False)(x.unsqueeze(0), y.unsqueeze(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_104": {
                "input": {
                    "value": "-distance / (2 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_109": {
                "input": {
                    "value": "feature[N_s:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_9": {
                "input": {
                    "value": "input_ + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_68": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PairwiseDistance_103": {
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_70": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DFA/MobileNet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7], *features[8], nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_264": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_254": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_91": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*features[7]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DFA/ResNet.py": {
        "torch": {
            "norm_12": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_13": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_72": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_178": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_260": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_104": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_125": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_149": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "DFA/Train.py": {
        "torch": {
            "SummaryWriter_353": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_49": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_173": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_290": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "(landmark_source, landmark_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_268": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DFA/VGG.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_31": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DFA/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "../preTrainedModel/MobileNetV2_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DFA/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DFA/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/Dataset.py": {
        "torch": {
            "tensor_98": {
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.labels[index])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ECAN/Loss.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "-input_ * torch.log(input_ + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_63": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.PairwiseDistance(p=2.0, eps=1e-06, keepdim=False)(x.unsqueeze(0), y.unsqueeze(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "-distance / (2 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_9": {
                "input": {
                    "value": "input_ + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_68": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PairwiseDistance_103": {
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_70": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/MobileNet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7], *features[8], nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_91": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*features[7]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/ResNet.py": {
        "torch": {
            "norm_16": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_17": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_24": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_34": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PairwiseDistance_289": {
                "variable": {
                    "value": "pairwiseDistance",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_309": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_324": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_332": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_345": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_414": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_426": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_431": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_432": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_434": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_436": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_69": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_layer(x)",
                            "Call"
                        ],
                        [
                            "self.res_layer(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_404": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_56": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_77": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_149": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "self.temple_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.temple_batch, input.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_240": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_302": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_303": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_311": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_313": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_323": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_426": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_427": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_428": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_436": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_438": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_278": {
                "input": {
                    "value": "self.running_mean[self.findClusterIndex(input[index])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_163": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_200": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_209": {
                "input": {
                    "value": "(self.temple_batch - self.running_mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.temple_batch - self.running_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_263": {
                "input": {
                    "value": "torch.cat(self.temple_cluster[index], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "self.temple_cluster[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/TrainOnSourceDomain.py": {
        "torch": {
            "SummaryWriter_337": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_54": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_156": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_276": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/TransferToTargetDomain.py": {
        "torch": {
            "SummaryWriter_331": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_49": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_149": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_264": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "(landmark_source, landmark_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Recall.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}_Accuracy.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/VGG.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_31": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ECAN/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/Dataset.py": {
        "torch": {}
    },
    "FTDNN/Loss.py": {
        "torch": {
            "mean_31": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(dis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "torch.stack(features[index])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "torch.pow(feature - center[label[index]], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_16": {
                "tensors": {
                    "value": "features[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "feature - center[label[index]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/MobileNet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7] + features[8] + [nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()]) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_91": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*features[7] + features[8] + [nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/ResNet.py": {
        "torch": {
            "norm_12": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_13": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_72": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_178": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_260": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_104": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_125": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_149": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/Train.py": {
        "torch": {
            "SummaryWriter_319": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_54": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_154": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_261": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_209": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/VGG.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_31": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FTDNN/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ICID/Dataset.py": {
        "torch": {}
    },
    "ICID/Loss.py": {
        "torch": {
            "mean_31": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(dis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "torch.stack(features[index])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "torch.pow(feature - center[label[index]], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_16": {
                "tensors": {
                    "value": "features[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "feature - center[label[index]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ICID/MobileNet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7] + features[8] + [nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()]) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.IC_Channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.ID_Channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.IC_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100 + 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.ID_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.fusion_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(100, 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_107": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "IC_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IC_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.IC_fc(torch.cat((IC_feature, torch.cat((IC_feature[1:], IC_feature[0].unsqueeze(0)), 0)), 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(IC_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_199": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_91": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_102": {
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "(IC_feature[1:], IC_feature[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*features[7] + features[8] + [nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ICID/ResNet.py": {
        "torch": {
            "norm_12": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_13": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_72": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.IC_Channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.ID_Channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.IC_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100 + 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.ID_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.fusion_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(100, 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_185": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "variable": {
                    "value": "IC_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IC_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.IC_fc(torch.cat((IC_feature, torch.cat((IC_feature[1:], IC_feature[0].unsqueeze(0)), 0)), 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(IC_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_280": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_270": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_104": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_125": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_149": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_179": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_182": {
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "tensors": {
                    "value": "(IC_feature[1:], IC_feature[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "ICID/Train.py": {
        "torch": {}
    },
    "ICID/VGG.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.IC_Channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.ID_Channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.IC_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100 + 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.ID_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.fusion_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(100, 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_51": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "IC_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IC_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.IC_fc(torch.cat((IC_feature, torch.cat((IC_feature[1:], IC_feature[0].unsqueeze(0)), 0)), 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(IC_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_143": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_31": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "(IC_feature[1:], IC_feature[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ICID/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ICID/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_47": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ICID/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "LPL/Dataset.py": {
        "torch": {}
    },
    "LPL/Loss.py": {
        "torch": {
            "mean_31": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(dis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "torch.stack(features[index])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "torch.pow(feature - center[label[index]], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_16": {
                "tensors": {
                    "value": "features[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "feature - center[label[index]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "LPL/MobileNet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7] + features[8] + [nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()]) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_91": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*features[7] + features[8] + [nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LPL/ResNet.py": {
        "torch": {
            "norm_12": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_13": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_72": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_178": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_260": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_104": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_125": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_149": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "LPL/Train.py": {
        "torch": {
            "SummaryWriter_327": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_57": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_162": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_269": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LPL/VGG.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_31": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LPL/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "LPL/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "LPL/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/AdversarialNetwork.py": {
        "torch": {
            "Sequential_71": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 96, kernel_size=11, stride=4, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 6 * 6, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./alexnet.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.conv_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.fc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 4 * 4, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_314": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "self.conv_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 20, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "self.fc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50 * 4 * 4, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "variable": {
                    "value": "self.ad_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_368": {
                "variable": {
                    "value": "self.ad_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.ad_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_371": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_372": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_374": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_375": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_377": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_33": {
                "variable": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[0] / math.pow(float(self.output_dim), 1.0 / len(return_list))",
                            "BinOp"
                        ],
                        [
                            "torch.mul(return_tensor, single)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "AvgPool3d_45": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(local_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int((local_size - 1.0) / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((local_size - 1.0) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "input_dim_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_30": {
                "input": {
                    "value": "input_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.random_matrix[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_86": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_293": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_294": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_295": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_297": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_298": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_299": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_302": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_303": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_308": {
                "in_features": {
                    "value": "256 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_309": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_331": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_332": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_335": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_336": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_340": {
                "in_features": {
                    "value": "50 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/Dataset.py": {
        "torch": {}
    },
    "SAFN/GraphConvolutionNetwork.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.repeat(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.Dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_181": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "self.IntraAdjMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros((6, 6), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.InterAdjMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros((12, 12), dtype=torch.float, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_240": {
                "variable": {
                    "value": "InterMaskMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "Feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_191": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_212": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "IntraAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_214": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "InterAdjMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/Loss.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "-input_ * torch.log(input_ + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_63": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCELoss_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_9": {
                "input": {
                    "value": "input_ + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_68": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_70": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/MobileNet.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7], *features[8], nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_101": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_111": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_112": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_290": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_338": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_340": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_342": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_280": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_94": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_342": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_344": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_96": {
                "*args": {
                    "value": "*features[7]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/Model.py": {
        "torch": {
            "PairwiseDistance_156": {
                "variable": {
                    "value": "pairwiseDistance",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_51": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "self.temple_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.temple_batch, input.clone().detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "input": {
                    "value": "self.running_mean[self.findClusterIndex(input[index])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_30": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_67": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_76": {
                "input": {
                    "value": "(self.temple_batch - self.running_mean).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.temple_batch - self.running_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "torch.cat(self.temple_cluster[index], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "self.temple_cluster[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/ResNet.py": {
        "torch": {
            "norm_19": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_20": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_27": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_37": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_181": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_191": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_192": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_375": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_395": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_72": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_365": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_59": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_80": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_152": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_162": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_387": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_388": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_389": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_399": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/TrainOnSourceDomain.py": {
        "torch": {
            "SummaryWriter_423": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_72": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_178": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_241": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/VGG.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_45": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "variable": {
                    "value": "self.SourceBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "variable": {
                    "value": "self.TargetBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.SourceBN(feature), self.TargetBN(self.TargetMean.getSample(feature.detach())))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_264": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature.narrow(0, 0, feature.size(0) // 2).narrow(1, 0, 64 + 320), feature.narrow(0, feature.size(0) // 2, feature.size(0) // 2).narrow(1, 64 + 320, 64 + 320))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceFeature, TargetMean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_224": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_34": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SourceMean, TargetFeature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_245": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_245": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_246": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_247": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_248": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_248": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_249": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_250": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_251": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_251": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_252": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_253": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_253": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_254": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_255": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_255": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_256": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_257": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_259": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_260": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_261": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_261": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_262": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_268": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_22": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_11": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SAFN/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_22": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet_GCNwithIntraMatrixAndInterMatrix_useCluster.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SWD/Dataset.py": {
        "torch": {}
    },
    "SWD/Loss.py": {
        "torch": {
            "mean_21": {
                "variable": {
                    "value": "sliced_wasserstein_discrepancy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(p1 - p2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_13": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p1.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_15": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(p1, proj.to(p1.device))",
                            "Call"
                        ],
                        [
                            "torch.topk(p1, p1.size(0), dim=0, largest=True, sorted=True, out=None)[0]",
                            "Subscript"
                        ],
                        [
                            "p1",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj.to(p1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_16": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(p2, proj.to(p2.device))",
                            "Call"
                        ],
                        [
                            "torch.topk(p2, p2.size(0), dim=0, largest=True, sorted=True, out=None)[0]",
                            "Subscript"
                        ],
                        [
                            "p2",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj.to(p2.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_14": {
                "input": {
                    "value": "torch.sum(torch.pow(proj, 2), 0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_18": {
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(p1, proj.to(p1.device))",
                            "Call"
                        ],
                        [
                            "torch.topk(p1, p1.size(0), dim=0, largest=True, sorted=True, out=None)[0]",
                            "Subscript"
                        ],
                        [
                            "p1",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "p1.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "topk_19": {
                "input": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(p2, proj.to(p2.device))",
                            "Call"
                        ],
                        [
                            "torch.topk(p2, p2.size(0), dim=0, largest=True, sorted=True, out=None)[0]",
                            "Subscript"
                        ],
                        [
                            "p2",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "p2.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "pow_21": {
                "input": {
                    "value": "p1 - p2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_14": {
                "input": {
                    "value": "torch.pow(proj, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_14": {
                "input": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(p1.size(1), 128)",
                            "Call"
                        ],
                        [
                            "proj * torch.rsqrt(torch.sum(torch.pow(proj, 2), 0, keepdim=True))",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SWD/MobileNet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[0] + features[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[3] + features[4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features[5] + features[6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(*features[7] + features[8] + [nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()]) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_91": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*features[7] + features[8] + [nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SWD/ResNet.py": {
        "torch": {
            "norm_12": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_13": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_72": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[0]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[1]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[2]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unit_module(bottleneck.in_channel, bottleneck.depth, bottleneck.stride) for bottleneck in blocks[3]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(nn.Sequential(*cropNet_modules)) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_178": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_260": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_104": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_125": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_149": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*cropNet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "SWD/Train.py": {
        "torch": {
            "SummaryWriter_360": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.OutputPath, args.Log_Name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_55": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_207": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_299": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.OutputPath, '{}.pkl'.format(args.Log_Name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_123": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SWD/VGG.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(64, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(256, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.Crop_Net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Sequential(Conv2d(128, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 256, kernel_size=3, padding=1), BatchNorm2d(256), ReLU(inplace=True), Conv2d(256, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), Conv2d(512, 512, kernel_size=3, padding=1), BatchNorm2d(512), ReLU(inplace=True), nn.Conv2d(in_channels=512, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), nn.ReLU()) for i in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 + 320",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_feature, loc_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_31": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_ch",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "Conv2d(128, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SWD/getPreTrainedModel_MobileNet.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../preTrainedModel/MobileNetV2.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/mobilenetv2_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SWD/getPreTrainedModel_ResNet.py": {
        "torch": {
            "load_9": {
                "f": {
                    "value": "../preTrainedModel/backbone_ir50_ms1m_epoch120.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_10": {
                "f": {
                    "value": "../preTrainedModel/backbone_IR_18_HeadFC_Softmax_112_512_1.0_Epoch_156_lfw_112_0.994_X4_112_0.990_agedb_30_112_0.949.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir18_lfw_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/ir50_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SWD/getPreTrainedModel_VGG.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./preTrainedModel/vgg_ms1m_112_CropNet.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "../preTrainedModel/VGGNet_Checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}