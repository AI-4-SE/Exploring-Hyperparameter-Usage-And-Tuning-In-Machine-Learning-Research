{
    "mvn/datasets/human36m.py": {
        "torch": {}
    },
    "mvn/datasets/human36m_preprocessing/undistort-h36m.py": {
        "torch": {}
    },
    "mvn/datasets/human36m_preprocessing/view-dataset.py": {
        "torch": {}
    },
    "mvn/datasets/utils.py": {
        "torch": {
            "stack_53": {
                "variable": {
                    "value": "images_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images_batch, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "keypoints_3d_batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(batch['keypoints_3d'], axis=0)[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "keypoints_3d_validity_batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(batch['keypoints_3d'], axis=0)[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_62": {
                "tensors": {
                    "value": "[torch.from_numpy(camera.projection) for camera in camera_batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "variable": {
                    "value": "proj_matricies_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "camera.projection",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mvn/models/loss.py": {
        "torch": {
            "sum_13": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(keypoints_gt - keypoints_pred) ** 2 * keypoints_binary_validity",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(keypoints_gt - keypoints_pred) * keypoints_binary_validity",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "(keypoints_gt - keypoints_pred) ** 2 * keypoints_binary_validity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((coord_volume_unsq - keypoints_gt_i_unsq) ** 2).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_71": {
                "variable": {
                    "value": "min_indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(((coord_volume_unsq - keypoints_gt_i_unsq) ** 2).sum(-1))",
                            "Call"
                        ],
                        [
                            "dists.view(dists.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_26": {
                "input": {
                    "value": "diff[diff > self.threshold]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "keypoints_binary_validity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_47": {
                "input": {
                    "value": "torch.sum((keypoints_gt - keypoints_pred) ** 2 * keypoints_binary_validity, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "keypoints_gt - keypoints_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "keypoints_binary_validity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_14": {
                "input": {
                    "value": "keypoints_binary_validity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_38": {
                "input": {
                    "value": "keypoints_binary_validity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ],
                        [
                            "keypoints_binary_validity",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_76": {
                "input": {
                    "value": "volumes_batch_pred[batch_i, joint_i, index[0], index[1], index[2]] + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mvn/models/pose_resnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 512, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_207": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "ReLU_208": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_209": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_deconv_filters[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_joints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.final_conv_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1 if self.final_conv_kernel == 3 else 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_341": {
                "variable": {
                    "value": "pretrained_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "MaxPool2d_147": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "MaxPool2d_152": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_279": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_deconv_cfg(num_kernels[i], i)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self._get_deconv_cfg(num_kernels[i], i)",
                            "Call"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self._get_deconv_cfg(num_kernels[i], i)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.deconv_with_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_287": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[i]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "ReLU_288": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_355": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_state_dict[k.replace(prefix, '')][:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_363": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_state_dict[k.replace(prefix, '')][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mvn/models/triangulation.py": {
        "torch": {
            "max_45": {
                "variable": {
                    "value": "(_, max_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps.view(batch_size, n_views, n_joints, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "keypoints_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_indicies % heatmap_shape[1], max_indicies // heatmap_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "variable": {
                    "value": "keypoints_2d_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoints_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([max_indicies % heatmap_shape[1], max_indicies // heatmap_shape[1]], dim=-1).to(images.device)",
                            "Call"
                        ],
                        [
                            "keypoints_2d_transformed",
                            "variable"
                        ],
                        [
                            "op.integrate_tensor_2d(heatmaps * self.heatmap_multiplier, self.heatmap_softmax)",
                            "Call"
                        ],
                        [
                            "keypoints_2d.view(batch_size, n_views, *keypoints_2d.shape[1:])",
                            "Call"
                        ],
                        [
                            "keypoints_2d_transformed",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "keypoints_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "keypoints_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, n_joints, 3))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(keypoints_3d).type(torch.float).to(images.device)",
                            "Call"
                        ],
                        [
                            "multiview.triangulate_batch_of_points(proj_matricies, keypoints_2d, confidences_batch=alg_confidences)",
                            "Call"
                        ],
                        [
                            "batch['keypoints_3d'][batch_i]",
                            "Subscript"
                        ],
                        [
                            "batch['pred_keypoints_3d'][batch_i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "confidences",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "confidences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, n_views, n_joints))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(confidences).type(torch.float).to(images.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_181": {
                "variable": {
                    "value": "keypoints_2d_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoints_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([max_indicies % heatmap_shape[1], max_indicies // heatmap_shape[1]], dim=-1).to(images.device)",
                            "Call"
                        ],
                        [
                            "keypoints_2d_transformed",
                            "variable"
                        ],
                        [
                            "op.integrate_tensor_2d(heatmaps * self.heatmap_multiplier, self.heatmap_softmax)",
                            "Call"
                        ],
                        [
                            "keypoints_2d.view(batch_size, n_views, *keypoints_2d.shape[1:])",
                            "Call"
                        ],
                        [
                            "keypoints_2d_transformed",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.process_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 32, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_277": {
                "tensors": {
                    "value": "[torch.from_numpy(camera.projection) for camera in camera_batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_277": {
                "variable": {
                    "value": "proj_matricies",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "base_points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.shape[0]",
                            "Subscript"
                        ],
                        [
                            "heatmaps.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_283": {
                "variable": {
                    "value": "coord_volumes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.shape[0]",
                            "Subscript"
                        ],
                        [
                            "heatmaps.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.volume_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.volume_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.volume_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_161": {
                "variable": {
                    "value": "alg_confidences",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * n_views",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "heatmaps.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_296": {
                "variable": {
                    "value": "base_points[batch_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "base_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(keypoints_3d[11, :3] + keypoints_3d[12, :3]) / 2",
                            "BinOp"
                        ],
                        [
                            "keypoints_3d[6, :3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "meshgrid_306": {
                "variable": {
                    "value": "(xxx, yyy, zzz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(self.volume_size, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(self.volume_size, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_307": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xxx, yyy, zzz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_310": {
                "variable": {
                    "value": "grid_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([xxx, yyy, zzz], dim=-1).type(torch.float)",
                            "Call"
                        ],
                        [
                            "grid.reshape((-1, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "base_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(keypoints_3d[11, :3] + keypoints_3d[12, :3]) / 2",
                            "BinOp"
                        ],
                        [
                            "keypoints_3d[6, :3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_239": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_338": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "coord_volume.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_306": {
                "start": {
                    "value": "self.volume_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_277": {
                "ndarray": {
                    "value": "camera.projection",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mvn/models/v2v.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, stride=1, padding=(kernel_size - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.res_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_planes, out_planes, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=0, output_padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.front_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Basic3DBlock(input_channels, 16, 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.back_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Res3DBlock(32, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_160": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.skip_con",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.skip_con",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_planes, out_planes, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "input": {
                    "value": "res + skip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_pool1(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_res1(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_pool2(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_res2(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_pool3(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_res3(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_pool4(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_res4(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_pool5(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_res5(x)",
                            "Call"
                        ],
                        [
                            "self.mid_res(x)",
                            "Call"
                        ],
                        [
                            "self.decoder_res5(x)",
                            "Call"
                        ],
                        [
                            "self.decoder_upsample5(x)",
                            "Call"
                        ],
                        [
                            "x + skip_x5",
                            "BinOp"
                        ],
                        [
                            "self.decoder_res4(x)",
                            "Call"
                        ],
                        [
                            "self.decoder_upsample4(x)",
                            "Call"
                        ],
                        [
                            "x + skip_x4",
                            "BinOp"
                        ],
                        [
                            "self.decoder_res3(x)",
                            "Call"
                        ],
                        [
                            "self.decoder_upsample3(x)",
                            "Call"
                        ],
                        [
                            "x + skip_x3",
                            "BinOp"
                        ],
                        [
                            "self.decoder_res2(x)",
                            "Call"
                        ],
                        [
                            "self.decoder_upsample2(x)",
                            "Call"
                        ],
                        [
                            "x + skip_x2",
                            "BinOp"
                        ],
                        [
                            "self.decoder_res1(x)",
                            "Call"
                        ],
                        [
                            "self.decoder_upsample1(x)",
                            "Call"
                        ],
                        [
                            "x + skip_x1",
                            "BinOp"
                        ],
                        [
                            "self.front_layers(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_decoder(x)",
                            "Call"
                        ],
                        [
                            "self.back_layers(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm3d_12": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_25": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_27": {
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_28": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_60": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_61": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_36": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mvn/utils/img.py": {
        "torch": {
            "is_tensor_73": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndarray",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_84": {
                "obj": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndarray",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mvn/utils/misc.py": {
        "torch": {}
    },
    "mvn/utils/multiview.py": {
        "torch": {
            "svd_163": {
                "variable": {
                    "value": "(u, s, vh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A.view(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "point_3d_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_joints",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "points_batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "confidences",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(proj_matricies)",
                            "Call"
                        ],
                        [
                            "len(proj_matricies)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_66": {
                "obj": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_batch[batch_i, :, joint_i, :]",
                            "Subscript"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_83": {
                "obj": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_batch[batch_i, :, joint_i, :]",
                            "Subscript"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "[points, torch.ones((points.shape[0], 1), dtype=points.dtype, device=points.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_104": {
                "obj": {
                    "value": "points_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_3d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_67": {
                "*size": {
                    "value": "(points.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mvn/utils/op.py": {
        "torch": {
            "cat_44": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_94": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnxyz, bxyzc -> bnc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "volume_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*volume_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.device",
                            "Attribute"
                        ],
                        [
                            "points.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_174": {
                "variable": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-((coords[:, 0] - means[:, 0]) ** 2 / sigmas[:, 0] ** 2 + (coords[:, 1] - means[:, 1]) ** 2 / sigmas[:, 1] ** 2) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "meshgrid_182": {
                "variable": {
                    "value": "(yy, xx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(image_shape[0]).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(image_shape[1]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx, yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.reshape((batch_size, n_heatmaps, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(heatmaps, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(heatmaps)",
                            "Call"
                        ],
                        [
                            "heatmaps.reshape((batch_size, n_heatmaps, h, w))",
                            "Call"
                        ],
                        [
                            "heatmaps",
                            "Method Argument"
                        ],
                        [
                            "heatmaps",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.reshape((batch_size, n_heatmaps, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(heatmaps, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(heatmaps)",
                            "Call"
                        ],
                        [
                            "heatmaps.reshape((batch_size, n_heatmaps, h, w))",
                            "Call"
                        ],
                        [
                            "heatmaps",
                            "Method Argument"
                        ],
                        [
                            "heatmaps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volumes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, -1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volumes, dim=2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.reshape((batch_size, n_volumes, x_size, y_size, z_size))",
                            "Call"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ],
                        [
                            "volumes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "volume_batch_to_aggregate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*volume_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps.device",
                            "Attribute"
                        ],
                        [
                            "points.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_34": {
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_65": {
                "start": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_66": {
                "start": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_67": {
                "start": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "grid_coord_proj_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_coord_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiview.project_3d_points_to_image_plane_without_distortion(proj_matricies[batch_i, view_i], grid_coord, convert_back_to_euclidean=False)",
                            "Call"
                        ],
                        [
                            "multiview.homogeneous_to_euclidean(grid_coord_proj)",
                            "Call"
                        ],
                        [
                            "grid_coord_proj_transformed",
                            "variable"
                        ],
                        [
                            "grid_coord_proj.unsqueeze(1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_182": {
                "start": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grid_sample_135": {
                "variable": {
                    "value": "current_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps[batch_i, view_i]",
                            "Subscript"
                        ],
                        [
                            "heatmap.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_coord_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiview.project_3d_points_to_image_plane_without_distortion(proj_matricies[batch_i, view_i], grid_coord, convert_back_to_euclidean=False)",
                            "Call"
                        ],
                        [
                            "multiview.homogeneous_to_euclidean(grid_coord_proj)",
                            "Call"
                        ],
                        [
                            "grid_coord_proj_transformed",
                            "variable"
                        ],
                        [
                            "grid_coord_proj.unsqueeze(1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_137": {
                "variable": {
                    "value": "current_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmaps[batch_i, view_i]",
                            "Subscript"
                        ],
                        [
                            "heatmap.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_coord_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiview.project_3d_points_to_image_plane_without_distortion(proj_matricies[batch_i, view_i], grid_coord, convert_back_to_euclidean=False)",
                            "Call"
                        ],
                        [
                            "multiview.homogeneous_to_euclidean(grid_coord_proj)",
                            "Call"
                        ],
                        [
                            "grid_coord_proj_transformed",
                            "variable"
                        ],
                        [
                            "grid_coord_proj.unsqueeze(1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "volume_batch_to_aggregate_softmin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volume_batch_to_aggregate_softmin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_batch_to_aggregate.clone()",
                            "Call"
                        ],
                        [
                            "volume_batch_to_aggregate_softmin.view(n_views, -1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(volume_batch_to_aggregate_softmin, dim=0)",
                            "Call"
                        ],
                        [
                            "volume_batch_to_aggregate_softmin.view(n_views, n_joints, *volume_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mvn/utils/vis.py": {
        "torch": {
            "max_170": {
                "input": {
                    "value": "confidences_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mvn/utils/volumetric.py": {
        "torch": {
            "from_numpy_107": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_rotation_matrix(axis, theta)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rot).type(torch.float).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "human36m.Human36MMultiViewDataset(h36m_root=config.dataset.val.h36m_root, pred_results_path=config.dataset.val.pred_results_path if hasattr(config.dataset.val, 'pred_results_path') else None, train=False, test=True, image_shape=config.image_shape if hasattr(config, 'image_shape') else (256, 256), labels_path=config.dataset.val.labels_path, with_damaged_actions=config.dataset.val.with_damaged_actions, retain_every_n_frames_in_test=config.dataset.val.retain_every_n_frames_in_test, scale_bbox=config.dataset.val.scale_bbox, kind=config.kind, undistort_images=config.dataset.val.undistort_images, ignore_cameras=config.dataset.val.ignore_cameras if hasattr(config.dataset.val, 'ignore_cameras') else [], crop=config.dataset.val.crop if hasattr(config.dataset.val, 'crop') else True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.opt.val_batch_size if hasattr(config.opt, 'val_batch_size') else config.opt.batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.dataset.val.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset_utils.make_collate_fn(randomize_n_views=config.dataset.val.randomize_n_views, min_n_views=config.dataset.val.min_n_views, max_n_views=config.dataset.val.max_n_views)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.dataset.val.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "dataset_utils.worker_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "human36m.Human36MMultiViewDataset(h36m_root=config.dataset.train.h36m_root, pred_results_path=config.dataset.train.pred_results_path if hasattr(config.dataset.train, 'pred_results_path') else None, train=True, test=False, image_shape=config.image_shape if hasattr(config, 'image_shape') else (256, 256), labels_path=config.dataset.train.labels_path, with_damaged_actions=config.dataset.train.with_damaged_actions, scale_bbox=config.dataset.train.scale_bbox, kind=config.kind, undistort_images=config.dataset.train.undistort_images, ignore_cameras=config.dataset.train.ignore_cameras if hasattr(config.dataset.train, 'ignore_cameras') else [], crop=config.dataset.train.crop if hasattr(config.dataset.train, 'crop') else True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.dataset.train.shuffle and train_sampler is None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset) if distributed_train else None",
                            "IfExp"
                        ],
                        [
                            "setup_human36m_dataloaders(config, is_train, distributed_train)",
                            "Call"
                        ],
                        [
                            "setup_dataloaders(config, distributed_train=is_distributed)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset_utils.make_collate_fn(randomize_n_views=config.dataset.train.randomize_n_views, min_n_views=config.dataset.train.min_n_views, max_n_views=config.dataset.train.max_n_views)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.dataset.train.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "dataset_utils.worker_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_372": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_377": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_392": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_394": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_407": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.model.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_453": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'ransac': RANSACTriangulationNet, 'alg': AlgebraicTriangulationNet, 'vol': VolumetricTriangulationNet}[config.model.name](config, device=device).to(device)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[device])",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[device]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_431": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.backbone.parameters()}, {'params': model.process_features.parameters(), 'lr': config.opt.process_features_lr if hasattr(config.opt, 'process_features_lr') else config.opt.lr}, {'params': model.volume_net.parameters(), 'lr': config.opt.volume_net_lr if hasattr(config.opt, 'volume_net_lr') else config.opt.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_439": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_68": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "human36m.Human36MMultiViewDataset(h36m_root=config.dataset.train.h36m_root, pred_results_path=config.dataset.train.pred_results_path if hasattr(config.dataset.train, 'pred_results_path') else None, train=True, test=False, image_shape=config.image_shape if hasattr(config, 'image_shape') else (256, 256), labels_path=config.dataset.train.labels_path, with_damaged_actions=config.dataset.train.with_damaged_actions, scale_bbox=config.dataset.train.scale_bbox, kind=config.kind, undistort_images=config.dataset.train.undistort_images, ignore_cameras=config.dataset.train.ignore_cameras if hasattr(config.dataset.train, 'ignore_cameras') else [], crop=config.dataset.train.crop if hasattr(config.dataset.train, 'crop') else True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_469": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'weights.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__239": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.opt.grad_clip / config.opt.lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_260": {
                "input": {
                    "value": "torch.sum((base_point_pred * scale_keypoints_3d - base_point_gt * scale_keypoints_3d) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_208": {
                "start": {
                    "value": "n_joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints_3d_pred.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_212": {
                "start": {
                    "value": "n_joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints_3d_pred.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_260": {
                "input": {
                    "value": "(base_point_pred * scale_keypoints_3d - base_point_gt * scale_keypoints_3d) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}