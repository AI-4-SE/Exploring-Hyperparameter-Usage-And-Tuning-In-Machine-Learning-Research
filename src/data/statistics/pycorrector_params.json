{
    "pycorrector/macbert/preprocess.py": {
        "sklearn": {
            "train_test_split_194": {
                "variable": {
                    "value": "(train_lst, dev_lst)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "rst_items",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/seq2seq/preprocess.py": {
        "sklearn": {
            "train_test_split_72": {
                "variable": {
                    "value": "(train_lst, test_lst)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data_list",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/seq2seq/train.py": {
        "sklearn": {
            "train_test_split_66": {
                "variable": {
                    "value": "(train_data, dev_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_140": {
                "variable": {
                    "value": "(train_data, dev_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_273": {
                "variable": {
                    "value": "(train_data, dev_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mb_x).to(device).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mb_x).to(device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "mb_x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mb_x_len).to(device).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mb_x_len).to(device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "mb_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_y[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "mb_output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_y[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "mb_y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_y_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mb_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mb_y_len - 1).to(device).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mb_y_len - 1).to(device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mb_x).to(device).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mb_x).to(device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "mb_x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mb_x_len).to(device).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mb_x_len).to(device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "mb_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_y[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "mb_output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_y[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "mb_y_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_y_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mb_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mb_y_len - 1).to(device).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mb_y_len - 1).to(device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mb_x).to(device).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mb_x).to(device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "trg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mb_x).to(device).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mb_x).to(device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "trg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_223": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_239": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "trg_pad_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg_2_ids[PAD_TOKEN]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_240": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__94": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'seq2seq.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'convseq2seq.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_181": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'seq2seq.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'convseq2seq.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_52": {
                "start": {
                    "value": "mb_y_len.max().item()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_82": {
                "start": {
                    "value": "mb_y_len.max().item()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pycorrector/transformer/preprocess.py": {
        "sklearn": {
            "train_test_split_85": {
                "variable": {
                    "value": "(train_lst, val_lst)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data_list",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/gradio_demo.py": {
        "torch": {
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_38": {
                "input": {
                    "value": "outputs.logits[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/macbert_demo.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_49": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(outputs.logits, enumerate(texts))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/bert/bert_corrector.py": {
        "torch": {
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/bert/bert_generate.py": {
        "torch": {
            "Adamax_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_91": {
                "variable": {
                    "value": "predicted_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[0, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[indexed_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "loss_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[loss_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_53": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "input_size": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "768 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bert.config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/deepcontext/infer.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config_dict['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._read_model(model_dir)",
                            "Call"
                        ],
                        [
                            "read_config(config_file)",
                            "Call"
                        ],
                        [
                            "config_dict",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "input_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indexed_sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.stoi[token] if token in self.stoi else self.stoi[self.unk_token] for token in tokens]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "input_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_60": {
                "f": {
                    "value": "os.path.join(model_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "os.path.join(model_dir, 'model_optimizer.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/deepcontext/loss.py": {
        "torch": {
            "Embedding_26": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(counter)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ignore_index",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSigmoid_30": {
                "variable": {
                    "value": "self.logsigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "self.sampler.sample(shape=shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/deepcontext/model.py": {
        "torch": {
            "Dropout_36": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_37": {
                "variable": {
                    "value": "self.l2r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "word_embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_index",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_40": {
                "variable": {
                    "value": "self.l2r_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_layers",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_44": {
                "variable": {
                    "value": "self.r2l_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "word_embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_index",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_47": {
                "variable": {
                    "value": "self.r2l_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_layers",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_157": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_138": {
                "input": {
                    "value": "embedding_module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_169": {
                "variable": {
                    "value": "self.activation_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "s_task",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_131": {
                "input": {
                    "value": "context_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(input_tokens, target=None, target_pos=target_pos)",
                            "Call"
                        ],
                        [
                            "context_vector / torch.norm(context_vector, p=2)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_133": {
                "input": {
                    "value": "target_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.criterion.W.weight[target]",
                            "Subscript"
                        ],
                        [
                            "target_vector / torch.norm(target_vector, p=2)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "variable": {
                    "value": "self.activation_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_163": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_166": {
                "in_features": {
                    "value": "mid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "(output_l2r, output_r2l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(output_l2r, output_r2l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_114": {
                "tensors": {
                    "value": "(output_l2r, output_r2l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "mid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pycorrector/deepcontext/train.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mb_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_125": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'model_optimizer.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/electra/electra_corrector.py": {
        "torch": {
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_45": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.sign(discriminator_outputs[0]) + 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_45": {
                "input": {
                    "value": "discriminator_outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/electra/predict_mask.py": {
        "torch": {
            "round_44": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.sign(discriminator_outputs[0]) + 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_44": {
                "input": {
                    "value": "discriminator_outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/macbert/base_model.py": {
        "torch": {
            "argmax_137": {
                "variable": {
                    "value": "cor_y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "one_hot_key",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "idx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_186": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "inputs['attention_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_45": {
                "input": {
                    "value": "1 - logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_51": {
                "input": {
                    "value": "1 - logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_52": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(input, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(input)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/macbert/infer.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/macbert/lr_scheduler.py": {
        "torch": {}
    },
    "pycorrector/macbert/macbert4csc.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.detection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/macbert/macbert_corrector.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_74": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(outputs.logits, blocks)",
                            "Call"
                        ],
                        [
                            "zip(outputs.logits, enumerate(texts))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_97": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(outputs.logits, blocks)",
                            "Call"
                        ],
                        [
                            "zip(outputs.logits, enumerate(texts))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/macbert/reader.py": {
        "torch": {
            "zeros_22": {
                "variable": {
                    "value": "det_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(ori_texts)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(t) for t in encoded_texts]) + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CscDataset(train_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CscDataset(valid_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CscDataset(test_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pycorrector/macbert/softmaskedbert4csc.py": {
        "torch": {
            "GRU_21": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_29": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_91": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_133": {
                "variable": {
                    "value": "det_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_64": {
                "input": {
                    "value": "prob.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/macbert/train.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_94": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "new_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "state_dict",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(cfg.OUTPUT_DIR, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_callback.best_model_path",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.WEIGHTS",
                            "Attribute"
                        ],
                        [
                            "''",
                            "str"
                        ]
                    ]
                }
            },
            "load_110": {
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_callback.best_model_path",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.WEIGHTS",
                            "Attribute"
                        ],
                        [
                            "''",
                            "str"
                        ]
                    ]
                }
            },
            "device_89": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/seq2seq/convseq2seq.py": {
        "torch": {
            "sqrt_25": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=hid_dim, out_channels=2 * hid_dim, kernel_size=kernel_size, padding=(kernel_size - 1) // 2) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_42": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_96": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_97": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_98": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.attn_hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.attn_emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=hid_dim, out_channels=2 * hid_dim, kernel_size=kernel_size) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(conved + embedded) * self.scale",
                            "BinOp"
                        ],
                        [
                            "(conved_emb + embedded) * self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "encoder_conved.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(combined, encoder_conved.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "attended_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(energy, dim=2)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "self.decoder(trg, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "self.decoder(trg_tensor, encoder_conved, encoder_combined)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "encoder_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(src)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "encoder_combined",
                            "Method Argument"
                        ],
                        [
                            "encoder_combined",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_148": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "glu_64": {
                "variable": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(self.dropout(conv_input))",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conv(padded_conv_input)",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conved",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[0]",
                            "Subscript"
                        ],
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ],
                        [
                            "conv_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.kernel_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "padded_conv_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(padding, conv_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_179": {
                "variable": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(self.dropout(conv_input))",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conv(padded_conv_input)",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conved",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_266": {
                "variable": {
                    "value": "trg_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_30": {
                "in_channels": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_104": {
                "in_channels": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pycorrector/seq2seq/infer.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(src_ids).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "src_tensor_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([len(src_ids)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "sos_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(src_ids).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'seq2seq.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'convseq2seq.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_76": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'seq2seq.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'convseq2seq.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/seq2seq/model_args.py": {
        "torch": {}
    },
    "pycorrector/seq2seq/seq2seq.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_16": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_25": {
                "variable": {
                    "value": "packed_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.embed(x_sorted))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_len.long().cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_28": {
                "variable": {
                    "value": "(out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(packed_embedded)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid[-2], hid[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_34": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(hid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hidden_size * 2 + dec_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_66": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((context, output), dim=2)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size * output_len, -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.linear_out(output))",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, output_len, -1)",
                            "Call"
                        ],
                        [
                            "self.attention(output_seq, ctx, mask)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.out(output), -1)",
                            "Call"
                        ],
                        [
                            "self.decoder(ctx=encoder_out, ctx_lengths=x_lengths, y=y, y_lengths=y_lengths, hid=hid)",
                            "Call"
                        ],
                        [
                            "self.decoder(ctx=encoder_out, ctx_lengths=x_lengths, y=y, y_lengths=torch.ones(batch_size).long().to(y.device), hid=hid)",
                            "Call"
                        ],
                        [
                            "-input.gather(1, target) * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(output) / torch.sum(mask)",
                            "BinOp"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context_in.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(output, context_in.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "self.attention(output_seq, ctx, mask)",
                            "Call"
                        ],
                        [
                            "self.decoder(ctx=encoder_out, ctx_lengths=x_lengths, y=y, y_lengths=y_lengths, hid=hid)",
                            "Call"
                        ],
                        [
                            "self.decoder(ctx=encoder_out, ctx_lengths=x_lengths, y=y, y_lengths=torch.ones(batch_size).long().to(y.device), hid=hid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_74": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(output, context_in.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "self.attention(output_seq, ctx, mask)",
                            "Call"
                        ],
                        [
                            "self.decoder(ctx=encoder_out, ctx_lengths=x_lengths, y=y, y_lengths=y_lengths, hid=hid)",
                            "Call"
                        ],
                        [
                            "self.decoder(ctx=encoder_out, ctx_lengths=x_lengths, y=y, y_lengths=torch.ones(batch_size).long().to(y.device), hid=hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn, context)",
                            "Call"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_80": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_out(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_92": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_94": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "dec_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_96": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_114": {
                "variable": {
                    "value": "packed_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[sorted_idx.long()]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(self.embed(y_sorted))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_len.long().cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_116": {
                "variable": {
                    "value": "(unpacked, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_out, batch_first=True)",
                            "Call"
                        ],
                        [
                            "out[original_idx.long()].contiguous()",
                            "Call"
                        ],
                        [
                            "self.rnn(packed_seq, hid)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_124": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_195": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~x_mask[:, :, None] * y_mask[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "self.create_mask(y_lengths, ctx_lengths)",
                            "Call"
                        ],
                        [
                            "mask.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_102": {
                "start": {
                    "value": "max_x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_len.max()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x_len.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_103": {
                "start": {
                    "value": "max_y_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_len.max()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x_len.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size(0)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pycorrector/seq2seq/seq2seq_model.py": {
        "torch": {
            "RandomSampler_325": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.load_and_cache_examples(train_data, verbose=verbose)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_326": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.load_and_cache_examples(train_data, verbose=verbose)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.dataloader_num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_834": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.load_and_cache_examples(eval_data, evaluate=True, verbose=verbose, silent=silent)",
                            "Call"
                        ],
                        [
                            "eval_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_835": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.load_and_cache_examples(eval_data, evaluate=True, verbose=verbose, silent=silent)",
                            "Call"
                        ],
                        [
                            "eval_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_466": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradScaler_512": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_838": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_845": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "self.args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1059": {
                "obj": {
                    "value": "self.args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_139": {
                "seed": {
                    "value": "self.args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_144": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_146": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{cuda_device}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_462": {
                "f": {
                    "value": "os.path.join(args.model_name, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_463": {
                "f": {
                    "value": "os.path.join(args.model_name, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_852": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1061": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1062": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "autocast_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__566": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_854": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/seq2seq/seq2seq_utils.py": {
        "torch": {
            "flatten_83": {
                "input": {
                    "value": "target_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_tokenizer.encode(target_text, max_length=args.max_seq_length, padding='max_length', return_tensors='pt', truncation=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pycorrector/t5/copyt5_corrector.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/t5/infer.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pycorrector/t5/t5_corrector.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}