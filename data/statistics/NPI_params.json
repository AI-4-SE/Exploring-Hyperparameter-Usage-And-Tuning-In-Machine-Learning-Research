{
    "NPI.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.vector_shape + table_shape[0] * table_shape[1] + 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "self.lstm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(M_prog) + s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_29": {
                "variable": {
                    "value": "self.lstm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.arg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10 + table_shape[0] * table_shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.prog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(table_shape[0] * table_shape[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x.reshape(1, x.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "linear1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "linear2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_2(linear1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(linear2, p)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "lstm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_step_1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "variable": {
                    "value": "lstm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_step_2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(e.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "e2.reshape((1, e.size))",
                            "Call"
                        ],
                        [
                            "np.zeros(e.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "e2.reshape((1, e.size))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "args3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(args.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "args3.reshape((1, args3.size))",
                            "Call"
                        ],
                        [
                            "np.zeros(args.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "args3.reshape((1, args3.size))",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_102": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "np.append(elementOne, elementTwo)",
                            "Call"
                        ],
                        [
                            "np.append(elementOne, elementTwo)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_130": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "p_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.M_prog), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "input": {
                    "value": "self.arg(lstm)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "input": {
                    "value": "self.prog(lstm)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_73": {
                "input": {
                    "value": "self.r(lstm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2, out3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "np.append(elementOne, elementTwo)",
                            "Call"
                        ],
                        [
                            "np.append(elementOne, elementTwo)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(e.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "e2.reshape((1, e.size))",
                            "Call"
                        ],
                        [
                            "np.zeros(e.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "e2.reshape((1, e.size))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "args3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(args.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "args3.reshape((1, args3.size))",
                            "Call"
                        ],
                        [
                            "np.zeros(args.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "args3.reshape((1, args3.size))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_123": {
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tr.cat((out1, out2, out3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "card.py": {
        "torch": {
            "from_numpy_199": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "th.vectorize_card(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_321": {
                "variable": {
                    "value": "x_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x.reshape((batch_size * len(M_prog), len(M_prog)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_322": {
                "variable": {
                    "value": "y_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y.reshape(batch_size * len(M_prog), len(M_prog))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.append(th.vectorize(y), Y)",
                            "Call"
                        ],
                        [
                            "Y.reshape((y_shape, i + 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}