{
    "saliency_detector/__init__.py": {
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "saliency_detector/dataset/dataset.py": {
        "torch": {
            "ImageDataTrain_12": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.sal_root": {
                    "value": "data_root",
                    "possible_values": []
                },
                "self.sal_source": {
                    "value": "data_list",
                    "possible_values": []
                }
            },
            "ImageDataTest_39": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.data_root": {
                    "value": "data_root",
                    "possible_values": []
                },
                "self.data_list": {
                    "value": "data_list",
                    "possible_values": []
                }
            },
            "Tensor_30": {
                "variable": {
                    "value": "sal_image",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "sal_label",
                    "possible_values": []
                }
            },
            "Tensor_50": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageDataTrain(config.train_root, config.train_list)",
                            "Call"
                        ],
                        [
                            "ImageDataTest(config.test_root, config.test_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageDataTrain(config.train_root, config.train_list)",
                            "Call"
                        ],
                        [
                            "ImageDataTest(config.test_root, config.test_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "saliency_detector/dataset/joint_dataset.py": {
        "torch": {
            "ImageDataTrain_12": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.sal_root": {
                    "value": "sal_data_root",
                    "possible_values": []
                },
                "self.sal_source": {
                    "value": "sal_data_list",
                    "possible_values": []
                },
                "self.edge_root": {
                    "value": "edge_data_root",
                    "possible_values": []
                },
                "self.edge_source": {
                    "value": "edge_data_list",
                    "possible_values": []
                }
            },
            "ImageDataTest_53": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.input_image_paths": {
                    "value": "input_image_paths",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "edge_image",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "edge_label",
                    "possible_values": []
                }
            },
            "Tensor_43": {
                "variable": {
                    "value": "sal_image",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "sal_label",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageDataTrain(config.train_root, config.train_list, config.train_edge_root, config.train_edge_list)",
                            "Call"
                        ],
                        [
                            "ImageDataTest(config.image_paths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ImageDataTrain(config.train_root, config.train_list, config.train_edge_root, config.train_edge_list)",
                            "Call"
                        ],
                        [
                            "ImageDataTest(config.image_paths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.num_thread",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "saliency_detector/joint_solver.py": {
        "torch": {
            "eq_234": {
                "variable": {
                    "value": "pos",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "eq_235": {
                "variable": {
                    "value": "neg",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_237": {
                "variable": {
                    "value": "num_pos",
                    "possible_values": []
                },
                "input": {
                    "value": "pos",
                    "possible_values": [
                        [
                            "torch.eq(target, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_238": {
                "variable": {
                    "value": "num_neg",
                    "possible_values": []
                },
                "input": {
                    "value": "neg",
                    "possible_values": [
                        [
                            "torch.eq(target, 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_247": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "alpha * pos + beta * neg",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "in_",
                    "possible_values": [
                        [
                            "np.array(im, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "in_ - np.array((104.00699, 116.66877, 122.67892))",
                            "BinOp"
                        ],
                        [
                            "in_.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_91": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/models/final.pth' % self.config.save_folder",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_198": {
                "variable": {
                    "value": "sal_loss_fuse",
                    "possible_values": []
                },
                "input": {
                    "value": "sal_pred",
                    "possible_values": [
                        [
                            "self.net(sal_image, mode=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sal_label",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "Adam_228": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.net.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.wd",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "self.config.pretrained_model",
                    "possible_values": []
                }
            },
            "load_67": {
                "f": {
                    "value": "self.config.load",
                    "possible_values": []
                }
            },
            "Tensor_135": {
                "variable": {
                    "value": "im_",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/models/epoch_%d.pth' % (self.config.save_folder, epoch + 1)",
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "self.config.model",
                    "possible_values": []
                }
            },
            "load_36": {
                "f": {
                    "value": "self.config.model",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "self.net(images, mode=test_mode)",
                            "Call"
                        ],
                        [
                            "self.net(images, mode=test_mode)",
                            "Call"
                        ],
                        [
                            "self.net(im_, mode=test_mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_142": {
                "input": {
                    "value": "preds[1][0]",
                    "possible_values": []
                }
            },
            "sigmoid_143": {
                "input": {
                    "value": "preds[1][1]",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "input": {
                    "value": "preds[1][2]",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "input": {
                    "value": "preds[0]",
                    "possible_values": []
                }
            },
            "sigmoid_162": {
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "self.net(images, mode=test_mode)",
                            "Call"
                        ],
                        [
                            "self.net(images, mode=test_mode)",
                            "Call"
                        ],
                        [
                            "self.net(im_, mode=test_mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "saliency_detector/networks/deeplab_resnet.py": {
        "torch": {
            "BasicBlock_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_19": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "ReLU_20": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_22": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion, affine=affine_par))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_45": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_50": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_51": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "Conv2d_59": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": [
                            [
                                "1",
                                "Constant"
                            ],
                            [
                                "2",
                                "Constant"
                            ],
                            [
                                "4",
                                "Constant"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "dilation": {
                        "value": "dilation_",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "BatchNorm2d_61": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "Conv2d_64": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_65": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "ReLU_68": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion, affine=affine_par))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_94": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_98": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_100": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    },
                    "affine": {
                        "value": "affine_par",
                        "possible_values": [
                            [
                                "True",
                                "Constant"
                            ]
                        ]
                    }
                },
                "ReLU_103": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_104": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "ceil_mode": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "ResNet_locate_156": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_163": {
                    "variable": {
                        "value": "self.ppms_pre",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "2048",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.in_planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ModuleList_167": {
                    "variable": {
                        "value": "self.ppms",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "ppms",
                        "possible_values": []
                    }
                },
                "Sequential_169": {
                    "variable": {
                        "value": "self.ppm_cat",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(self.in_planes * 4, self.in_planes, 3, 1, 1, bias=False)",
                        "possible_values": []
                    }
                },
                "ModuleList_172": {
                    "variable": {
                        "value": "self.infos",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "infos",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "self.in_planes * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "xls",
                    "possible_values": [
                        [
                            "[xs_1]",
                            "List"
                        ],
                        [
                            "self.ppm_cat(torch.cat(xls, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_166": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(ii)",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "*args": {
                    "value": "nn.Conv2d(self.in_planes, ii, 3, 1, 1, bias=False)",
                    "possible_values": []
                }
            },
            "interpolate_192": {
                "input": {
                    "value": "self.ppms[k](xs_1)",
                    "possible_values": []
                },
                "size": {
                    "value": "xs_1.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_166": {
                "output_size": {
                    "value": "ii",
                    "possible_values": [
                        [
                            "[1, 3, 5]",
                            "List"
                        ],
                        [
                            "self.out_planes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "self.in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "self.in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ii",
                    "possible_values": [
                        [
                            "[1, 3, 5]",
                            "List"
                        ],
                        [
                            "self.out_planes",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_197": {
                "input": {
                    "value": "xls",
                    "possible_values": [
                        [
                            "[xs_1]",
                            "List"
                        ],
                        [
                            "self.ppm_cat(torch.cat(xls, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "xs[len(self.infos) - 1 - k].size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "saliency_detector/networks/joint_poolnet.py": {
        "torch": {
            "ConvertLayer_17": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_23": {
                    "variable": {
                        "value": "self.convert0",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "up",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ],
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "DeepPoolLayer_31": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.need_x2": {
                    "value": "need_x2",
                    "possible_values": []
                },
                "self.need_fuse": {
                    "value": "need_fuse",
                    "possible_values": []
                },
                "ModuleList_41": {
                    "variable": {
                        "value": "self.pools",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "pools",
                        "possible_values": []
                    }
                },
                "ModuleList_42": {
                    "variable": {
                        "value": "self.convs",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "convs",
                        "possible_values": []
                    }
                },
                "ReLU_43": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Conv2d_44": {
                    "variable": {
                        "value": "self.conv_sum",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "k",
                        "possible_values": [
                            [
                                "config['block']",
                                "Subscript"
                            ],
                            [
                                "k_out_list",
                                "Name"
                            ],
                            [
                                "range(1, len(conv2merge) - 1)",
                                "Call"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "k_out",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "BlockLayer_62": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_74": {
                    "variable": {
                        "value": "self.block_in1",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "up_in1",
                        "possible_values": []
                    }
                },
                "ModuleList_75": {
                    "variable": {
                        "value": "self.block_in2",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "up_in2",
                        "possible_values": []
                    }
                },
                "ModuleList_76": {
                    "variable": {
                        "value": "self.block_mid1",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "up_mid1",
                        "possible_values": []
                    }
                },
                "ModuleList_77": {
                    "variable": {
                        "value": "self.block_mid2",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "up_mid2",
                        "possible_values": []
                    }
                },
                "ModuleList_78": {
                    "variable": {
                        "value": "self.block_out",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "up_out",
                        "possible_values": []
                    }
                },
                "ReLU_79": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "EdgeInfoLayerC_89": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_92": {
                    "variable": {
                        "value": "self.trans",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(k_in, k_in, 3, 1, 1, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "FuseLayer1_104": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_110": {
                    "variable": {
                        "value": "self.trans",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "up",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ],
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "Conv2d_111": {
                    "variable": {
                        "value": "self.fuse",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "len(list_k)",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "self.deep_sup": {
                    "value": "deep_sup",
                    "possible_values": []
                }
            },
            "ScoreLayer_127": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_130": {
                    "variable": {
                        "value": "self.score",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "k",
                        "possible_values": [
                            [
                                "config['block']",
                                "Subscript"
                            ],
                            [
                                "k_out_list",
                                "Name"
                            ],
                            [
                                "range(1, len(conv2merge) - 1)",
                                "Call"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "PoolNet_159": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.base_model_cfg": {
                    "value": "base_model_cfg",
                    "possible_values": [
                        [
                            "'vgg'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.base": {
                    "value": "base",
                    "possible_values": []
                },
                "ModuleList_164": {
                    "variable": {
                        "value": "self.block",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "block_layers",
                        "possible_values": [
                            [
                                "block_layers + [BlockLayer(k[0], k[1])]",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "ModuleList_165": {
                    "variable": {
                        "value": "self.deep_pool",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "deep_pool_layers",
                        "possible_values": [
                            [
                                "deep_pool_layers + [DeepPoolLayer(config['deep_pool'][0][i], config['deep_pool'][1][i], config['deep_pool'][2][i], config['deep_pool'][3][i])]",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "self.fuse": {
                    "value": "fuse_layers",
                    "possible_values": [
                        [
                            "FuseLayer1(config['fuse'][0], config['fuse'][1])",
                            "Call"
                        ]
                    ]
                },
                "self.edgeinfo": {
                    "value": "edgeinfo_layers",
                    "possible_values": [
                        [
                            "EdgeInfoLayerC(config['edgeinfoc'][0], config['edgeinfoc'][1])",
                            "Call"
                        ]
                    ]
                },
                "self.score": {
                    "value": "score_layers",
                    "possible_values": [
                        [
                            "ScoreLayer(config['score'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv_sum_c",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "add_53": {
                "variable": {
                    "value": "resl",
                    "possible_values": []
                },
                "input": {
                    "value": "resl",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.add(resl, F.interpolate(y, x_size[2:], mode='bilinear', align_corners=True))",
                            "Call"
                        ],
                        [
                            "self.relu(resl)",
                            "Call"
                        ],
                        [
                            "F.interpolate(resl, x2.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv_sum(resl)",
                            "Call"
                        ],
                        [
                            "self.conv_sum_c(torch.add(torch.add(resl, x2), x3))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.interpolate(y, x_size[2:], mode='bilinear', align_corners=True)",
                    "possible_values": []
                }
            },
            "interpolate_56": {
                "variable": {
                    "value": "resl",
                    "possible_values": []
                },
                "input": {
                    "value": "resl",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.add(resl, F.interpolate(y, x_size[2:], mode='bilinear', align_corners=True))",
                            "Call"
                        ],
                        [
                            "self.relu(resl)",
                            "Call"
                        ],
                        [
                            "F.interpolate(resl, x2.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv_sum(resl)",
                            "Call"
                        ],
                        [
                            "self.conv_sum_c(torch.add(torch.add(resl, x2), x3))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x2.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.trans(torch.cat(tmp_x, dim=1))",
                            "Call"
                        ],
                        [
                            "self.score(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, x_size[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_size[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "k_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_in",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "k_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "tmp_x",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "up_x",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(list_k[0][i], list_k[1][i], 1, 1, bias=False)",
                    "possible_values": []
                }
            },
            "AvgPool2d_39": {
                "kernel_size": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(len(config['deep_pool'][0]))",
                            "Call"
                        ],
                        [
                            "range(len(list_k[0]))",
                            "Call"
                        ],
                        [
                            "range(len(list_x))",
                            "Call"
                        ],
                        [
                            "self.pools_sizes",
                            "Attribute"
                        ],
                        [
                            "range(len(self.pools_sizes))",
                            "Call"
                        ],
                        [
                            "range(len(list_k))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(len(config['deep_pool'][0]))",
                            "Call"
                        ],
                        [
                            "range(len(list_k[0]))",
                            "Call"
                        ],
                        [
                            "range(len(list_x))",
                            "Call"
                        ],
                        [
                            "self.pools_sizes",
                            "Attribute"
                        ],
                        [
                            "range(len(self.pools_sizes))",
                            "Call"
                        ],
                        [
                            "range(len(list_k))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "k",
                    "possible_values": [
                        [
                            "config['block']",
                            "Subscript"
                        ],
                        [
                            "k_out_list",
                            "Name"
                        ],
                        [
                            "range(1, len(conv2merge) - 1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "k",
                    "possible_values": [
                        [
                            "config['block']",
                            "Subscript"
                        ],
                        [
                            "k_out_list",
                            "Name"
                        ],
                        [
                            "range(1, len(conv2merge) - 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_53": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "self.convs[i](self.pools[i](x))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_size[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "add_59": {
                "input": {
                    "value": "resl",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.add(resl, F.interpolate(y, x_size[2:], mode='bilinear', align_corners=True))",
                            "Call"
                        ],
                        [
                            "self.relu(resl)",
                            "Call"
                        ],
                        [
                            "F.interpolate(resl, x2.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv_sum(resl)",
                            "Call"
                        ],
                        [
                            "self.conv_sum_c(torch.add(torch.add(resl, x2), x3))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x2",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "k_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_in // 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "nn.Conv2d(k_in // 4, k_in // 4, 3, 1, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "k_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_in // 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "nn.Conv2d(k_in // 4, k_in // 4, 3, 1, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "k_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k",
                    "possible_values": [
                        [
                            "config['block']",
                            "Subscript"
                        ],
                        [
                            "k_out_list",
                            "Name"
                        ],
                        [
                            "range(1, len(conv2merge) - 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_100": {
                "input": {
                    "value": "i_x",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "x_size[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "list_k[i]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_117": {
                "input": {
                    "value": "self.trans[i](i_x)",
                    "possible_values": []
                },
                "size": {
                    "value": "x_size[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "list_k[0][i]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "list_k[1][i]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "k_in // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_in",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "k_in // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_in",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "[merge, edge_merge]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "saliency_detector/networks/poolnet.py": {
        "torch": {
            "ConvertLayer_17": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_23": {
                    "variable": {
                        "value": "self.convert0",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "up",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "DeepPoolLayer_31": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.need_x2": {
                    "value": "need_x2",
                    "possible_values": []
                },
                "self.need_fuse": {
                    "value": "need_fuse",
                    "possible_values": []
                },
                "ModuleList_41": {
                    "variable": {
                        "value": "self.pools",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "pools",
                        "possible_values": []
                    }
                },
                "ModuleList_42": {
                    "variable": {
                        "value": "self.convs",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "convs",
                        "possible_values": []
                    }
                },
                "ReLU_43": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Conv2d_44": {
                    "variable": {
                        "value": "self.conv_sum",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "k",
                        "possible_values": [
                            [
                                "range(1, len(conv2merge) - 1)",
                                "Call"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "k_out",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "ScoreLayer_62": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_65": {
                    "variable": {
                        "value": "self.score",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "k",
                        "possible_values": [
                            [
                                "range(1, len(conv2merge) - 1)",
                                "Call"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "PoolNet_89": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.base_model_cfg": {
                    "value": "base_model_cfg",
                    "possible_values": [
                        [
                            "'vgg'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.base": {
                    "value": "base",
                    "possible_values": []
                },
                "ModuleList_94": {
                    "variable": {
                        "value": "self.deep_pool",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "deep_pool_layers",
                        "possible_values": [
                            [
                                "deep_pool_layers + [DeepPoolLayer(config['deep_pool'][0][i], config['deep_pool'][1][i], config['deep_pool'][2][i], config['deep_pool'][3][i])]",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "self.score": {
                    "value": "score_layers",
                    "possible_values": [
                        [
                            "ScoreLayer(config['score'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv_sum_c",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "add_53": {
                "variable": {
                    "value": "resl",
                    "possible_values": []
                },
                "input": {
                    "value": "resl",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.add(resl, F.interpolate(y, x_size[2:], mode='bilinear', align_corners=True))",
                            "Call"
                        ],
                        [
                            "self.relu(resl)",
                            "Call"
                        ],
                        [
                            "F.interpolate(resl, x2.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv_sum(resl)",
                            "Call"
                        ],
                        [
                            "self.conv_sum_c(torch.add(torch.add(resl, x2), x3))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.interpolate(y, x_size[2:], mode='bilinear', align_corners=True)",
                    "possible_values": []
                }
            },
            "interpolate_56": {
                "variable": {
                    "value": "resl",
                    "possible_values": []
                },
                "input": {
                    "value": "resl",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.add(resl, F.interpolate(y, x_size[2:], mode='bilinear', align_corners=True))",
                            "Call"
                        ],
                        [
                            "self.relu(resl)",
                            "Call"
                        ],
                        [
                            "F.interpolate(resl, x2.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv_sum(resl)",
                            "Call"
                        ],
                        [
                            "self.conv_sum_c(torch.add(torch.add(resl, x2), x3))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x2.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.score(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, x_size[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_size[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(list_k[0][i], list_k[1][i], 1, 1, bias=False)",
                    "possible_values": []
                }
            },
            "AvgPool2d_39": {
                "kernel_size": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(len(config['deep_pool'][0]))",
                            "Call"
                        ],
                        [
                            "range(len(list_k[0]))",
                            "Call"
                        ],
                        [
                            "range(len(list_x))",
                            "Call"
                        ],
                        [
                            "self.pools_sizes",
                            "Attribute"
                        ],
                        [
                            "range(len(self.pools_sizes))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(len(config['deep_pool'][0]))",
                            "Call"
                        ],
                        [
                            "range(len(list_k[0]))",
                            "Call"
                        ],
                        [
                            "range(len(list_x))",
                            "Call"
                        ],
                        [
                            "self.pools_sizes",
                            "Attribute"
                        ],
                        [
                            "range(len(self.pools_sizes))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "k",
                    "possible_values": [
                        [
                            "range(1, len(conv2merge) - 1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "k",
                    "possible_values": [
                        [
                            "range(1, len(conv2merge) - 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_53": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "self.convs[i](self.pools[i](x))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_size[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "add_59": {
                "input": {
                    "value": "resl",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.add(resl, F.interpolate(y, x_size[2:], mode='bilinear', align_corners=True))",
                            "Call"
                        ],
                        [
                            "self.relu(resl)",
                            "Call"
                        ],
                        [
                            "F.interpolate(resl, x2.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv_sum(resl)",
                            "Call"
                        ],
                        [
                            "self.conv_sum_c(torch.add(torch.add(resl, x2), x3))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x2",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "list_k[0][i]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "list_k[1][i]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "saliency_detector/networks/vgg.py": {
        "torch": {
            "vgg16_31": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_36": {
                    "variable": {
                        "value": "self.base",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "vgg(self.cfg['tun'], 3)",
                        "possible_values": []
                    }
                }
            },
            "vgg16_locate_56": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_66": {
                    "variable": {
                        "value": "self.ppms",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "ppms",
                        "possible_values": []
                    }
                },
                "Sequential_68": {
                    "variable": {
                        "value": "self.ppm_cat",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(self.in_planes * 4, self.in_planes, 3, 1, 1, bias=False)",
                        "possible_values": []
                    }
                },
                "ModuleList_71": {
                    "variable": {
                        "value": "self.infos",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "infos",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "conv2d",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "conv2d",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "self.in_planes * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "xls",
                    "possible_values": [
                        [
                            "[xs[-1]]",
                            "List"
                        ],
                        [
                            "self.ppm_cat(torch.cat(xls, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(ii)",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "*args": {
                    "value": "nn.Conv2d(self.in_planes, ii, 3, 1, 1, bias=False)",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "input": {
                    "value": "self.ppms[k](xs[-1])",
                    "possible_values": []
                },
                "size": {
                    "value": "xs[-1].size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_16": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_65": {
                "output_size": {
                    "value": "ii",
                    "possible_values": [
                        [
                            "[1, 3, 5]",
                            "List"
                        ],
                        [
                            "self.out_planes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "self.in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "self.in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ii",
                    "possible_values": [
                        [
                            "[1, 3, 5]",
                            "List"
                        ],
                        [
                            "self.out_planes",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_94": {
                "input": {
                    "value": "xls",
                    "possible_values": [
                        [
                            "[xs[-1]]",
                            "List"
                        ],
                        [
                            "self.ppm_cat(torch.cat(xls, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "xs[len(self.infos) - 1 - k].size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "saliency_detector/solver.py": {
        "torch": {
            "eq_131": {
                "variable": {
                    "value": "pos",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "eq_132": {
                "variable": {
                    "value": "neg",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "num_pos",
                    "possible_values": []
                },
                "input": {
                    "value": "pos",
                    "possible_values": [
                        [
                            "torch.eq(target, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_135": {
                "variable": {
                    "value": "num_neg",
                    "possible_values": []
                },
                "input": {
                    "value": "neg",
                    "possible_values": [
                        [
                            "torch.eq(target, 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_59": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.net.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.wd",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_144": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "alpha * pos + beta * neg",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_127": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/models/final.pth' % self.config.save_folder",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_98": {
                "variable": {
                    "value": "sal_loss_fuse",
                    "possible_values": []
                },
                "input": {
                    "value": "sal_pred",
                    "possible_values": [
                        [
                            "self.net(sal_image)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sal_label",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.net.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.wd",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "self.config.pretrained_model",
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "self.config.load",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/models/epoch_%d.pth' % (self.config.save_folder, epoch + 1)",
                    "possible_values": []
                }
            },
            "load_29": {
                "f": {
                    "value": "self.config.model",
                    "possible_values": []
                }
            },
            "load_31": {
                "f": {
                    "value": "self.config.model",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "self.net(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}