{
    "models/network.py": {
        "tensorflow": {
            "Conv2D_13": {
                "variable": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_14": {
                "variable": {
                    "value": "self.h3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_20": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.start_neuron",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_56": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.start_neuron * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_57": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.start_neuron * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_58": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.start_neuron * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_59": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.start_neuron * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_60": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_88": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.start_neuron * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_90": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.start_neuron * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_92": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.start_neuron * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_98": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "start_neuron * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_100": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "start_neuron * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_102": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "padding1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [3, 3], [3, 3], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "padding2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_22": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_25": {
                "tensor": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h2(tf.pad(inputs, padding, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s1(h2, training=training)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_37": {
                "filters": {
                    "value": "start_neuron",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_41": {
                "filters": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_107": {
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [3, 3], [3, 3], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_109": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv[0](input)",
                            "Call"
                        ],
                        [
                            "conv(h)",
                            "Call"
                        ],
                        [
                            "bin(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv[-1](h)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.conv2(h)",
                            "Call"
                        ],
                        [
                            "self.s1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv3(h)",
                            "Call"
                        ],
                        [
                            "self.s2(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv4(h)",
                            "Call"
                        ],
                        [
                            "self.s3(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv5(h)",
                            "Call"
                        ],
                        [
                            "self.s4(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv6(h)",
                            "Call"
                        ],
                        [
                            "self.conv1(tf.pad(input, padding1, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv2(tf.pad(h, padding2, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s2(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv3(tf.pad(h, padding2, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s3(h, training=training)",
                            "Call"
                        ],
                        [
                            "h1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv4(h)",
                            "Call"
                        ],
                        [
                            "self.s4(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv5(h)",
                            "Call"
                        ],
                        [
                            "self.s5(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv6(tf.pad(h, padding1, 'SYMMETRIC'))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_111": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv[0](input)",
                            "Call"
                        ],
                        [
                            "conv(h)",
                            "Call"
                        ],
                        [
                            "bin(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv[-1](h)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.conv2(h)",
                            "Call"
                        ],
                        [
                            "self.s1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv3(h)",
                            "Call"
                        ],
                        [
                            "self.s2(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv4(h)",
                            "Call"
                        ],
                        [
                            "self.s3(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv5(h)",
                            "Call"
                        ],
                        [
                            "self.s4(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv6(h)",
                            "Call"
                        ],
                        [
                            "self.conv1(tf.pad(input, padding1, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv2(tf.pad(h, padding2, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s2(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv3(tf.pad(h, padding2, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s3(h, training=training)",
                            "Call"
                        ],
                        [
                            "h1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv4(h)",
                            "Call"
                        ],
                        [
                            "self.s4(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv5(h)",
                            "Call"
                        ],
                        [
                            "self.s5(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv6(tf.pad(h, padding1, 'SYMMETRIC'))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_119": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv[0](input)",
                            "Call"
                        ],
                        [
                            "conv(h)",
                            "Call"
                        ],
                        [
                            "bin(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv[-1](h)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.conv2(h)",
                            "Call"
                        ],
                        [
                            "self.s1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv3(h)",
                            "Call"
                        ],
                        [
                            "self.s2(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv4(h)",
                            "Call"
                        ],
                        [
                            "self.s3(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv5(h)",
                            "Call"
                        ],
                        [
                            "self.s4(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv6(h)",
                            "Call"
                        ],
                        [
                            "self.conv1(tf.pad(input, padding1, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv2(tf.pad(h, padding2, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s2(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv3(tf.pad(h, padding2, 'SYMMETRIC'))",
                            "Call"
                        ],
                        [
                            "self.s3(h, training=training)",
                            "Call"
                        ],
                        [
                            "h1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv4(h)",
                            "Call"
                        ],
                        [
                            "self.s4(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv5(h)",
                            "Call"
                        ],
                        [
                            "self.s5(h, training=training)",
                            "Call"
                        ],
                        [
                            "self.conv6(tf.pad(h, padding1, 'SYMMETRIC'))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [3, 3], [3, 3], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "filters": {
                    "value": "start_neuron",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/trainer.py": {
        "tensorflow": {
            "clip_by_value_57": {
                "variable": {
                    "value": "y_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "noisy - self.H(noisy, training=training)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_158": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.gamma * y_hat + (1 - self.gamma) * y_bar",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.predict(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(label, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "pseudo_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(n_hat_i - n_bar_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "variable": {
                    "value": "noise_consistency",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x_hat_j - clean - n_tilda_j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Mean_34": {
                "name": {
                    "value": "Bypass",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_35": {
                "name": {
                    "value": "Boosting",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_36": {
                "name": {
                    "value": "Noise-consistency",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_61": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_101": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_132": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "input_tensor": {
                    "value": "fake_noisy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DX(x_hat_j, training=False)",
                            "Call"
                        ],
                        [
                            "self.DX(x_hat_j, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_76": {
                "input_tensor": {
                    "value": "fake_clean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DY(y_hat_i, training=False)",
                            "Call"
                        ],
                        [
                            "self.DY(y_hat_i, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "tf.abs(clean - y_tilda_j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "tf.abs(clean - y_hat_j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "tf.nn.relu(fake_noisy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "tf.nn.relu(fake_clean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "input_tensor": {
                    "value": "tf.nn.relu(fake_clean2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_138": {
                "x": {
                    "value": "n_hat_i - n_bar_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_139": {
                "x": {
                    "value": "x_hat_j - clean - n_tilda_j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_80": {
                "x": {
                    "value": "clean - y_tilda_j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_83": {
                "x": {
                    "value": "clean - y_hat_j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_114": {
                "features": {
                    "value": "fake_noisy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DX(x_hat_j, training=False)",
                            "Call"
                        ],
                        [
                            "self.DX(x_hat_j, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_115": {
                "features": {
                    "value": "fake_clean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DY(y_hat_i, training=False)",
                            "Call"
                        ],
                        [
                            "self.DY(y_hat_i, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_118": {
                "features": {
                    "value": "fake_clean2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DY(y_bar_i, training=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/demo_EM.py": {
        "tensorflow": {
            "MirroredStrategy_20": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "cross_device_ops": {
                    "value": "tf.distribute.HierarchicalCopyAllReduce()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "HierarchicalCopyAllReduce_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics.py": {
        "tensorflow": {
            "cast_10": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_11": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_12": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(y_true, True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(y_pred, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_13": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tp, self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_14": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(y_true, False)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(y_pred, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(fp, self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_16": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(y_true, True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(y_pred, False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_17": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(fn, self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_12": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_13": {
                "x": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.equal(y_true, True), tf.equal(y_pred, True))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(tp, self.dtype))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_14": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_15": {
                "x": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.equal(y_true, False), tf.equal(y_pred, True))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(fp, self.dtype))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_16": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_17": {
                "x": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.equal(y_true, True), tf.equal(y_pred, False))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(fn, self.dtype))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "psnr_30": {
                "a": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "max_val": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ssim_41": {
                "img1": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "img2": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, tf.bool)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "max_val": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "utils/normalization.py": {
        "tensorflow": {
            "Variable_13": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([1, 1, 1, self.ch], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_14": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, 1, 1, self.ch], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_15": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.Variable([1, 1, 1], dtype=tf.float32, trainable=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_16": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.Variable([1, 1, 1], dtype=tf.float32, trainable=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_17": {
                "variable": {
                    "value": "self.moving_average_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, 1, 1, input_shape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "variable": {
                    "value": "self.moving_average_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, 1, 1, input_shape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Activation_20": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_23": {
                "variable": {
                    "value": "(i_mean, i_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_24": {
                "variable": {
                    "value": "(l_mean, l_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_25": {
                "variable": {
                    "value": "(b_mean, b_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Activation_44": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "moments_46": {
                "variable": {
                    "value": "(i_mean, i_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Activation_55": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_56": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_65": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ],
                        [
                            "activation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([1, 1, 1, self.ch], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, 1, 1, self.ch], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_78": {
                "variable": {
                    "value": "(b_mean, b_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_79": {
                "variable": {
                    "value": "(i_mean, i_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_27": {
                "variable": {
                    "value": "(b_mean, b_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_13": {
                "shape": {
                    "value": "[1, 1, 1, self.ch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "shape": {
                    "value": "[1, 1, 1, self.ch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_15": {
                "initial_value": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "initial_value": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "shape": {
                    "value": "[1, 1, 1, input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "shape": {
                    "value": "[1, 1, 1, input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "x": {
                    "value": "i_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_69": {
                "shape": {
                    "value": "[1, 1, 1, self.ch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "[1, 1, 1, self.ch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_80": {
                "x": {
                    "value": "b_var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_81": {
                "x": {
                    "value": "i_var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_75": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input - mean) / tf.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "(input - i_mean) / tf.sqrt(i_var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.bn(input, training=training)",
                            "Call"
                        ],
                        [
                            "(self.rho * b_x + (1 - self.rho) * i_x) * self.gamma + self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "utils/scheduler.py": {
        "tensorflow": {}
    }
}