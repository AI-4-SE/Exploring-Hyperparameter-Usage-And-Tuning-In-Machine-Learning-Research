{
    "utils/logger.py": {
        "tensorflow": {
            "Summary_40": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_63": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_73": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_90": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_33": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(log_dir, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'temp'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "FileWriter_36": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'temp'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "dataloader/chairslist.py": {
        "torch": {}
    },
    "dataloader/chairssdlist.py": {
        "torch": {}
    },
    "dataloader/depth_transforms.py": {
        "torch": {
            "cat_146": {
                "variable": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(meshgrid[0] * t[0] + meshgrid[1] * t[2] + t[4])[:, :, np.newaxis], (meshgrid[0] * t[1] + meshgrid[1] * t[3] + t[5])[:, :, np.newaxis]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_227": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_242": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_229": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_231": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_235": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_237": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(pos[:, :, 0] - meshgrid[0]).unsqueeze(-1), (pos[:, :, 1] - meshgrid[1]).unsqueeze(-1), mask_0, exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(pos[:, :, 0] - meshgrid[0]).unsqueeze(-1), (pos[:, :, 1] - meshgrid[1]).unsqueeze(-1), mask_0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_157": {
                "*tensors": {
                    "value": "[torch.Tensor(range(th)), torch.Tensor(range(tw))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_158": {
                "*tensors": {
                    "value": "[torch.Tensor([0, th - 1]), torch.Tensor([0, tw - 1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_238": {
                "input": {
                    "value": "mask_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[:, :, 2:3].copy()",
                            "Call"
                        ],
                        [
                            "F.grid_sample(torch.Tensor(mask_0).permute(2, 0, 1)[np.newaxis], vgrid[np.newaxis], mode='nearest')[0].permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(torch.Tensor(mask_0).permute(2, 0, 1)[np.newaxis], vgrid[np.newaxis])[0].permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_227": {
                "input": {
                    "value": "torch.Tensor(inputs[0]).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grid_sample_242": {
                "input": {
                    "value": "torch.Tensor(inputs[1]).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grid_sample_229": {
                "input": {
                    "value": "torch.Tensor(target).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_231": {
                "input": {
                    "value": "torch.Tensor(target).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grid_sample_235": {
                "input": {
                    "value": "torch.Tensor(mask_0).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_237": {
                "input": {
                    "value": "torch.Tensor(mask_0).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/depthloader.py": {
        "torch": {
            "Tensor_216": {
                "variable": {
                    "value": "iml0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_217": {
                "variable": {
                    "value": "iml1",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/flow_transforms.py": {
        "torch": {
            "cat_119": {
                "variable": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(meshgrid[0] * t[0] + meshgrid[1] * t[2] + t[4])[:, :, np.newaxis], (meshgrid[0] * t[1] + meshgrid[1] * t[3] + t[5])[:, :, np.newaxis]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_200": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_215": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_202": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_204": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_208": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_210": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(pos[:, :, 0] - meshgrid[0]).unsqueeze(-1), (pos[:, :, 1] - meshgrid[1]).unsqueeze(-1), mask_0, exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(pos[:, :, 0] - meshgrid[0]).unsqueeze(-1), (pos[:, :, 1] - meshgrid[1]).unsqueeze(-1), mask_0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_130": {
                "*tensors": {
                    "value": "[torch.Tensor(range(th)), torch.Tensor(range(tw))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_131": {
                "*tensors": {
                    "value": "[torch.Tensor([0, th - 1]), torch.Tensor([0, tw - 1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_211": {
                "input": {
                    "value": "mask_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[:, :, 2:3].copy()",
                            "Call"
                        ],
                        [
                            "F.grid_sample(torch.Tensor(mask_0).permute(2, 0, 1)[np.newaxis], vgrid[np.newaxis], mode='nearest')[0].permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(torch.Tensor(mask_0).permute(2, 0, 1)[np.newaxis], vgrid[np.newaxis])[0].permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_200": {
                "input": {
                    "value": "torch.Tensor(inputs[0]).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grid_sample_215": {
                "input": {
                    "value": "torch.Tensor(inputs[1]).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grid_sample_202": {
                "input": {
                    "value": "torch.Tensor(target).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_204": {
                "input": {
                    "value": "torch.Tensor(target).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grid_sample_208": {
                "input": {
                    "value": "torch.Tensor(mask_0).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_210": {
                "input": {
                    "value": "torch.Tensor(mask_0).permute(2, 0, 1)[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/hd1klist.py": {
        "torch": {}
    },
    "dataloader/kitti12list.py": {
        "torch": {}
    },
    "dataloader/kitti15list.py": {
        "torch": {}
    },
    "dataloader/kitti15list_train.py": {
        "torch": {}
    },
    "dataloader/kitti15list_train_lidar.py": {
        "torch": {}
    },
    "dataloader/kitti15list_val.py": {
        "torch": {}
    },
    "dataloader/kitti15list_val_lidar.py": {
        "torch": {}
    },
    "dataloader/kitti15list_val_mr.py": {
        "torch": {}
    },
    "dataloader/robloader.py": {
        "torch": {
            "Tensor_127": {
                "variable": {
                    "value": "iml0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_128": {
                "variable": {
                    "value": "iml1",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/seqlist.py": {
        "torch": {}
    },
    "dataloader/sintellist.py": {
        "torch": {}
    },
    "dataloader/sintellist_clean.py": {
        "torch": {}
    },
    "dataloader/sintellist_final.py": {
        "torch": {}
    },
    "dataloader/sintellist_train.py": {
        "torch": {}
    },
    "dataloader/sintellist_val.py": {
        "torch": {}
    },
    "dataloader/thingslist.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "DataParallel_195": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VCN([batch_size // ngpus] + data_inuse.datasets[0].shape[::-1], md=[int(4 * (args.maxdisp / 256)), 4, 4, 4, 4], fac=args.fac)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_229": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_202": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.loadmodel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_220": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.loadflow",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_362": {
                "variable": {
                    "value": "TrainImgLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_inuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset([loader_kitti15_sc] * 10000)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([loader_driving_sc] * 200)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([loader_chairs] * 100)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([loader_things] * 100)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([loader_kitti15] * 50 + [loader_kitti12] * 50)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([loader_kitti15] * 200 * 6 + [loader_hd1k] * 40 * 6 + [loader_sintel] * 150 * 6 + [loader_chairs] * 2 * 6 + [loader_things] * 6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 * ngpus",
                            "BinOp"
                        ],
                        [
                            "8 * ngpus",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(worker_mul * batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "_init_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_163": {
                "variable": {
                    "value": "data_inuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[loader_kitti15_sc] * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConcatDataset_165": {
                "variable": {
                    "value": "data_inuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[loader_driving_sc] * 200",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConcatDataset_171": {
                "variable": {
                    "value": "data_inuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[loader_chairs] * 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConcatDataset_173": {
                "variable": {
                    "value": "data_inuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[loader_things] * 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_383": {
                "ndarray": {
                    "value": "np.asarray(mean_L).mean(0)[np.newaxis, :, np.newaxis, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_384": {
                "ndarray": {
                    "value": "np.asarray(mean_R).mean(0)[np.newaxis, :, np.newaxis, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConcatDataset_175": {
                "variable": {
                    "value": "data_inuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[loader_kitti15] * 50 + [loader_kitti12] * 50",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "[imgL, imgR]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_422": {
                "obj": {
                    "value": "{'iters': total_iters, 'state_dict': save_dict, 'mean_L': mean_L, 'mean_R': mean_R}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "savefilename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.savemodel + '/' + args.logname + '/finetune_' + str(total_iters) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConcatDataset_180": {
                "variable": {
                    "value": "data_inuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[loader_kitti15] * 200 * 6 + [loader_hd1k] * 40 * 6 + [loader_sintel] * 150 * 6 + [loader_chairs] * 2 * 6 + [loader_things] * 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/VCN_exp.py": {
        "torch": {
            "tensor_126": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate((basex.reshape((-1, H, W, 1)), basey.reshape((-1, H, W, 1))), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool3d_41": {
                "variable": {
                    "value": "self.pool3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.wsize * 2 + 1, self.wsize * 2 + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.wsize, self.wsize, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(b, -1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "x * self.flowx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "x * self.flowy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_95": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_96": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grid_sample_117": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b, u * v, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(b, -1, h, w), 1).view(b, u, v, h, w)",
                            "Call"
                        ],
                        [
                            "torch.where(mask.byte(), oldx, ninf)",
                            "Call"
                        ],
                        [
                            "F.softmax(oldx.view(b, -1, h, w), 1).view(b, u, v, h, w)",
                            "Call"
                        ],
                        [
                            "torch.cat((enth.detach(), flowh.detach(), c1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((enth.detach(), flowh.detach(), c1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.f3d2v2(-exp2.log()), self.f3d2v3(err2)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.dcnetv1(c12.detach()), self.dcnetv2(dchange2.detach()), self.dcnetv3(-exp2.log()), self.dcnetv4(err2)), 1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.dc6_conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * fdimb1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "variable": {
                    "value": "self.dc5_conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * fdimb1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "variable": {
                    "value": "self.dc4_conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * fdimb1 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "variable": {
                    "value": "self.dc3_conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * fdimb1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "variable": {
                    "value": "self.dc2_conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * 2 * fdimb1 + 2 * fdimb2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.dc6_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dc6_conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.dc5_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dc5_conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.dc4_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dc4_conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.dc3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dc3_conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "self.dc2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.dc2_conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "variable": {
                    "value": "self.dc6_convo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(128 + 4 * fdimb1, 128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_272": {
                "variable": {
                    "value": "self.dc5_convo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(128 + 2 * 4 * fdimb1, 128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.dc4_convo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(128 + 3 * 4 * fdimb1, 128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.dc3_convo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(64 + 16 * fdimb1, 128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_296": {
                "variable": {
                    "value": "self.dc2_convo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(64 + 16 * fdimb1 + 4 * fdimb2, 128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_333": {
                "variable": {
                    "value": "self.warp_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, self.warp5, self.warp4, self.warp3, self.warp2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_334": {
                "variable": {
                    "value": "self.f_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.f6, self.f5, self.f4, self.f3, self.f2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_335": {
                "variable": {
                    "value": "self.p_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.p6, self.p5, self.p4, self.p3, self.p2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_336": {
                "variable": {
                    "value": "self.reg_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.flow_reg64, self.flow_reg32, self.flow_reg16, self.flow_reg8, self.flow_reg4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_337": {
                "variable": {
                    "value": "self.oor_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.dc6_convo, self.dc5_convo, self.dc4_convo, self.dc3_convo, self.dc2_convo]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_338": {
                "variable": {
                    "value": "self.fuse_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.dc6_conv, self.dc5_conv, self.dc4_conv, self.dc3_conv, self.dc2_conv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_357": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(b, c, 2 * maxdisp + 1, 2 * int(maxdisp // fac) + 1, height, width)).fill_(0.0)",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(b, c, 2 * maxdisp + 1, 2 * int(maxdisp // fac) + 1, height, width)).fill_(0.0)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(cost, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.p_modules[level](feat)",
                            "Call"
                        ],
                        [
                            "cost.view(-1, u, v, h, w)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enth.detach(), flowh.detach(), c1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_452": {
                "variable": {
                    "value": "conf_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flmask",
                            "Name"
                        ],
                        [
                            "F.unfold(conf_flow, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 1, (pw * 2 + 1) ** 2, lh, lw)",
                            "Call"
                        ],
                        [
                            "(pw * 2 + 1) ** 2 * conf_flow / count",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(pw * 2 + 1, pw * 2 + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_525": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.f3d2v2(-exp2.log()), self.f3d2v3(err2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_532": {
                "variable": {
                    "value": "iexp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dchange2.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[im.size()[2], im.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_533": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dcnetv1(c12.detach()), self.dcnetv2(dchange2.detach()), self.dcnetv3(-exp2.log()), self.dcnetv4(err2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_542": {
                "variable": {
                    "value": "dchange2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dchange2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-exp2.log() + 1.0 / 200 * self.f3d2(x)[0]",
                            "BinOp"
                        ],
                        [
                            "dchange2.detach() + dcneto[:, :1]",
                            "BinOp"
                        ],
                        [
                            "F.upsample(dchange2, [im.size()[2], im.size()[3]], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[im.size()[2], im.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask.byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "oldx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "ninf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone().fill_(-np.inf).view(b, u, v, h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oldx.view(b, -1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "flowh",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flowhh, F.upsample(flowh.detach() * 2, [flowhh.shape[2], flowhh.shape[3]], mode='bilinear'))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "enth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enthh, F.upsample(enth, [flowhh.shape[2], flowhh.shape[3]], mode='bilinear'))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enth.detach(), flowh.detach(), c1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_278": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_286": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_294": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_302": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unfold_418": {
                "input": {
                    "value": "pref",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.unfold(pref, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 2, (pw * 2 + 1) ** 2, lh, lw) - pref[:, :, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "pref.permute(0, 3, 4, 1, 2).reshape(b * lh * lw, 2, (pw * 2 + 1) ** 2)",
                            "Call"
                        ],
                        [
                            "F.unfold(pref, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 2, (pw * 2 + 1) ** 2, lh, lw) - pref[:, :, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "pref * conf_flow",
                            "BinOp"
                        ],
                        [
                            "pref.permute(0, 3, 4, 1, 2).reshape(b * lh * lw, 2, (pw * 2 + 1) ** 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(pw * 2 + 1, pw * 2 + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unfold_419": {
                "input": {
                    "value": "ptar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pref + flow",
                            "BinOp"
                        ],
                        [
                            "F.unfold(ptar, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 2, (pw * 2 + 1) ** 2, lh, lw) - ptar[:, :, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "ptar.permute(0, 3, 4, 1, 2).reshape(b * lh * lw, 2, (pw * 2 + 1) ** 2)",
                            "Call"
                        ],
                        [
                            "pref + flow",
                            "BinOp"
                        ],
                        [
                            "F.unfold(ptar, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 2, (pw * 2 + 1) ** 2, lh, lw) - ptar[:, :, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "ptar * conf_flow",
                            "BinOp"
                        ],
                        [
                            "ptar.permute(0, 3, 4, 1, 2).reshape(b * lh * lw, 2, (pw * 2 + 1) ** 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(pw * 2 + 1, pw * 2 + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_425": {
                "tensors": {
                    "value": "(prefprefT[:, 1, 1:], -prefprefT[:, 0, 1:], -prefprefT[:, 1:, 0], prefprefT[:, 0:1, 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_448": {
                "input": {
                    "value": "pref",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.unfold(pref, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 2, (pw * 2 + 1) ** 2, lh, lw) - pref[:, :, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "pref.permute(0, 3, 4, 1, 2).reshape(b * lh * lw, 2, (pw * 2 + 1) ** 2)",
                            "Call"
                        ],
                        [
                            "F.unfold(pref, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 2, (pw * 2 + 1) ** 2, lh, lw) - pref[:, :, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "pref * conf_flow",
                            "BinOp"
                        ],
                        [
                            "pref.permute(0, 3, 4, 1, 2).reshape(b * lh * lw, 2, (pw * 2 + 1) ** 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(pw * 2 + 1, pw * 2 + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unfold_449": {
                "input": {
                    "value": "ptar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pref + flow",
                            "BinOp"
                        ],
                        [
                            "F.unfold(ptar, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 2, (pw * 2 + 1) ** 2, lh, lw) - ptar[:, :, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "ptar.permute(0, 3, 4, 1, 2).reshape(b * lh * lw, 2, (pw * 2 + 1) ** 2)",
                            "Call"
                        ],
                        [
                            "pref + flow",
                            "BinOp"
                        ],
                        [
                            "F.unfold(ptar, (pw * 2 + 1, pw * 2 + 1), padding=pw).view(b, 2, (pw * 2 + 1) ** 2, lh, lw) - ptar[:, :, np.newaxis]",
                            "BinOp"
                        ],
                        [
                            "ptar * conf_flow",
                            "BinOp"
                        ],
                        [
                            "ptar.permute(0, 3, 4, 1, 2).reshape(b * lh * lw, 2, (pw * 2 + 1) ** 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(pw * 2 + 1, pw * 2 + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_463": {
                "tensors": {
                    "value": "(prefprefT[:, 1, 1:], -prefprefT[:, 0, 1:], -prefprefT[:, 1:, 0], prefprefT[:, 0:1, 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_489": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_503": {
                "input": {
                    "value": "flow6",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[im.size()[2] // 32, im.size()[3] // 32]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_507": {
                "input": {
                    "value": "flow5",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[im.size()[2] // 16, im.size()[3] // 16]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_511": {
                "input": {
                    "value": "flow4",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[im.size()[2] // 8, im.size()[3] // 8]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_515": {
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[im.size()[2] // 4, im.size()[3] // 4]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_grad_enabled_519": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_541": {
                "input": {
                    "value": "flow2.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[im.size()[2], im.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "[local_entropy, global_entropy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "[outx, outy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_398": {
                "input": {
                    "value": "flowh.detach() * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[flowhh.shape[2], flowhh.shape[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_399": {
                "input": {
                    "value": "enth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "enthh",
                            "Name"
                        ],
                        [
                            "torch.cat((enthh, F.upsample(enth, [flowhh.shape[2], flowhh.shape[3]], mode='bilinear')), 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[flowhh.shape[2], flowhh.shape[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_410": {
                "input": {
                    "value": "va",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fuse_modules[level](x)",
                            "Call"
                        ],
                        [
                            "va.view(b, -1, 2, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_72": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b, u * v, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(b, -1, h, w), 1).view(b, u, v, h, w)",
                            "Call"
                        ],
                        [
                            "torch.where(mask.byte(), oldx, ninf)",
                            "Call"
                        ],
                        [
                            "F.softmax(oldx.view(b, -1, h, w), 1).view(b, u, v, h, w)",
                            "Call"
                        ],
                        [
                            "torch.cat((enth.detach(), flowh.detach(), c1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((enth.detach(), flowh.detach(), c1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.f3d2v2(-exp2.log()), self.f3d2v3(err2)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.dcnetv1(c12.detach()), self.dcnetv2(dchange2.detach()), self.dcnetv3(-exp2.log()), self.dcnetv4(err2)), 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_80": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b, u * v, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(b, -1, h, w), 1).view(b, u, v, h, w)",
                            "Call"
                        ],
                        [
                            "torch.where(mask.byte(), oldx, ninf)",
                            "Call"
                        ],
                        [
                            "F.softmax(oldx.view(b, -1, h, w), 1).view(b, u, v, h, w)",
                            "Call"
                        ],
                        [
                            "torch.cat((enth.detach(), flowh.detach(), c1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((enth.detach(), flowh.detach(), c1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.f3d2v2(-exp2.log()), self.f3d2v3(err2)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.dcnetv1(c12.detach()), self.dcnetv2(dchange2.detach()), self.dcnetv3(-exp2.log()), self.dcnetv4(err2)), 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/conv4d.py": {
        "torch": {
            "cat_42": {
                "variable": {
                    "value": "data_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Z, data, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_47": {
                "variable": {
                    "value": "output[i, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_padded[i + padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "projfeat4d(fdima, fdimb, 1, with_bn=withbn, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_139": {
                "variable": {
                    "value": "tout1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2.view(b, c, u2, v2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(u1, v1, h2 * w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_140": {
                "variable": {
                    "value": "tout1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tout1.view(b, c, -1, h2, w2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(u1 * v1, h1, w1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_144": {
                "variable": {
                    "value": "tout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1.view(b, c, u1, v1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(u, v, h1 * w1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_145": {
                "variable": {
                    "value": "tout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tout.view(b, c, -1, h1, w1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(u * v, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_161": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not with_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_162": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_103": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_planes, in_planes * expand, (ksize, ksize, 1), stride=(self.stride, self.stride, 1), bias=bias, padding=(ksize // 2, ksize // 2, 0), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_205": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes * expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(ksize, ksize, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(ksize // 2, ksize // 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, 1, bias=bias, padding=0, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_planes * expand, in_planes, (1, ksize, ksize), stride=(1, self.stride, self.stride), bias=bias, padding=(0, ksize // 2, ksize // 2), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_planes * expand, in_planes, (1, ksize, ksize), stride=1, bias=bias, padding=(0, ksize // 2, ksize // 2), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_202": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes * expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, ksize, ksize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, self.stride, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, ksize // 2, ksize // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_204": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes * expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, ksize, ksize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, ksize // 2, ksize // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv3d_51": {
                "input": {
                    "value": "data_padded[i + padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_53": {
                "input": {
                    "value": "data_padded[i + padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_195": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes * expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(ksize, ksize, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(ksize // 2, ksize // 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_196": {
                "num_features": {
                    "value": "in_planes * expand",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_188": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_190": {
                "in_channels": {
                    "value": "in_planes * expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, ksize, ksize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, self.stride, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, ksize // 2, ksize // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_191": {
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_193": {
                "in_channels": {
                    "value": "in_planes * expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, ksize, ksize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, ksize // 2, ksize // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_194": {
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/submodule.py": {
        "torch": {
            "LeakyReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.path_module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.upconv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.upconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.upconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.upconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_212": {
                "variable": {
                    "value": "pool1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convbnrelu1_1(x)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_2(conv1)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_3(conv1)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_1(x)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_2(conv1)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_3(conv1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_221": {
                "variable": {
                    "value": "conv6x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ],
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ],
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[conv5.size()[2], conv5.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv5, self.upconv6[1](conv6x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_225": {
                "variable": {
                    "value": "conv5x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ],
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ],
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[conv4.size()[2], conv4.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv4, self.upconv5[1](conv5x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_229": {
                "variable": {
                    "value": "conv4x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ],
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ],
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[rconv3.size()[2], rconv3.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rconv3, self.upconv4[1](conv4x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_233": {
                "variable": {
                    "value": "conv3x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.iconv3(concat3)",
                            "Call"
                        ],
                        [
                            "self.iconv3(concat3)",
                            "Call"
                        ],
                        [
                            "self.iconv3(concat3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[pool1.size()[2], pool1.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pool1, self.upconv3[1](conv3x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_272": {
                "variable": {
                    "value": "self.upconv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_277": {
                "variable": {
                    "value": "self.upconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_282": {
                "variable": {
                    "value": "self.upconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_328": {
                "variable": {
                    "value": "pool1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convbnrelu1_1(x)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_2(conv1)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_3(conv1)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_1(x)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_2(conv1)",
                            "Call"
                        ],
                        [
                            "self.convbnrelu1_3(conv1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_337": {
                "variable": {
                    "value": "conv6x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ],
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ],
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[conv5.size()[2], conv5.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv5, self.upconv6[1](conv6x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_341": {
                "variable": {
                    "value": "conv5x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ],
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ],
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[conv4.size()[2], conv4.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv4, self.upconv5[1](conv5x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_345": {
                "variable": {
                    "value": "conv4x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ],
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ],
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[rconv3.size()[2], rconv3.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rconv3, self.upconv4[1](conv4x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "self.iconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2DBatchNormRelu(in_channels=96, k_size=3, n_filters=64, padding=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_395": {
                "variable": {
                    "value": "self.proj6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_396": {
                "variable": {
                    "value": "self.proj5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "variable": {
                    "value": "self.proj4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "variable": {
                    "value": "self.proj3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_430": {
                "variable": {
                    "value": "conv6u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ],
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ],
                        [
                            "self.res_block7(conv5)",
                            "Call"
                        ],
                        [
                            "self.pyramid_pooling(conv6)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[conv5.size()[2], conv5.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv5, self.upconv6(conv6u))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_435": {
                "variable": {
                    "value": "conv5u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ],
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ],
                        [
                            "self.res_block6(conv4)",
                            "Call"
                        ],
                        [
                            "self.iconv5(concat5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[conv4.size()[2], conv4.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv4, self.upconv5(conv5u))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_440": {
                "variable": {
                    "value": "conv4u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ],
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ],
                        [
                            "self.res_block5(rconv3)",
                            "Call"
                        ],
                        [
                            "self.iconv4(concat4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[rconv3.size()[2], rconv3.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rconv3, self.upconv4(conv4u))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_445": {
                "variable": {
                    "value": "conv3u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.iconv3(concat3)",
                            "Call"
                        ],
                        [
                            "self.iconv3(concat3)",
                            "Call"
                        ],
                        [
                            "self.iconv3(concat3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[x.size()[2], x.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj, self.upconv3(conv3u))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "conv_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "not with_bn",
                            "UnaryOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "conv_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "not with_bn",
                            "UnaryOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.cb_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_mod",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.cb_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_mod",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "conv_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "not with_bn",
                            "UnaryOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "conv_mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "not with_bn",
                            "UnaryOp"
                        ],
                        [
                            "not with_bn",
                            "UnaryOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.cbr_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_mod",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.cbr_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_mod",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_124": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "strides[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_126": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convbnrelu1(x)",
                            "Call"
                        ],
                        [
                            "self.convbn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.avg_pool2d(x, k_sizes[i], stride=strides[i], padding=0)",
                            "Call"
                        ],
                        [
                            "module(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_319": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_411": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_156": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_161": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_166": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_171": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_272": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_277": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_282": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_393": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_92": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_197": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_311": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_313": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_411": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_413": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "submission.py": {
        "torch": {
            "DataParallel_84": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VCN([1, maxw, maxh], md=[int(4 * (args.maxdisp / 256)), 4, 4, 4, 4], fac=args.fac, exp_unc='robust' in args.loadmodel)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.loadmodel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "imgLR",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[imgL, imgR]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "input": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(flow).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate([cv2.resize(flow[0], (input_size[1], input_size[0]))[:, :, np.newaxis], cv2.resize(flow[1], (input_size[1], input_size[0]))[:, :, np.newaxis]], -1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((flow, np.ones([flow.shape[0], flow.shape[1], 1])), -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/multiscaleloss.py": {
        "torch": {
            "norm_12": {
                "variable": {
                    "value": "EPE_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "upsampled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.adaptive_max_pool2d(input * positive, size) - F.adaptive_max_pool2d(-input * negative, size)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_52": {
                "*args": {
                    "value": "-input * negative",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "target_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_29": {
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}