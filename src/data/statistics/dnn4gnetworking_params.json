{
    "delete_tf.py": {
        "sklearn": {
            "load_breast_cancer_13": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_18": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelBinarizer_20": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_42": {
                "variable": {
                    "value": "X_reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, labels_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_features, n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_82": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, W1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "activationLayer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h1, n_neurons_in_h2], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h2], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(y1, W2) + b2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "activationLayer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "Wo",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h2, labels_dim], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weightsOut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_94": {
                "variable": {
                    "value": "bo",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([labels_dim], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biasesOut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_98": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, labels_dim], name='labels')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(y2, Wo) + bo",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(y2, Wo) + bo",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "activationOutputLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_107": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "equal_112": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, labels_dim], name='labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_118": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_75": {
                "shape": {
                    "value": "[n_features, n_neurons_in_h1]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(n_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_77": {
                "shape": {
                    "value": "[n_neurons_in_h1]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(n_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "a": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(y1, W2) + b2, name='activationLayer2')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Wo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_neurons_in_h2, labels_dim], mean=0, stddev=1), name='weightsOut')",
                            "Call"
                        ]
                    ]
                }
            },
            "round_112": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits, name='activationOutputLayer')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_114": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.round(a), y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_82": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, n_features], name='input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([n_features, n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features)), name='weights1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_89": {
                "a": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, W1) + b1, name='activationLayer1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_neurons_in_h1, n_neurons_in_h2], mean=0, stddev=1), name='weights2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "delete_tf_self_loss.py": {
        "sklearn": {
            "load_breast_cancer_14": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_19": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelBinarizer_21": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_47": {
                "variable": {
                    "value": "X_reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GaussianProcessClassifier_61": {
                "variable": {
                    "value": "gpc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * RBF(1.0)",
                            "BinOp"
                        ]
                    ]
                },
                "multi_class": {
                    "value": "one_vs_one",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RBF_60": {
                "length_scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, labels_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "y_g",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, labels_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_features, n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, W1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "activationLayer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h1, n_neurons_in_h2], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h2], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(y1, W2) + b2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "activationLayer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "Wo",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h2, labels_dim], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weightsOut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_110": {
                "variable": {
                    "value": "bo",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([labels_dim], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biasesOut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_114": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, labels_dim], name='labels')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(y2, Wo) + bo",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_118": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(y2, Wo) + bo",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "activationOutputLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_128": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "loss_2 < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : -1 * loss_2",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : loss_2",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_137": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "equal_142": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, labels_dim], name='labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_90": {
                "shape": {
                    "value": "[n_features, n_neurons_in_h1]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(n_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_92": {
                "shape": {
                    "value": "[n_neurons_in_h1]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(n_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "a": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(y1, W2) + b2, name='activationLayer2')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Wo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_neurons_in_h2, labels_dim], mean=0, stddev=1), name='weightsOut')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_122": {
                "input_tensor": {
                    "value": "p * tf.log(p / q)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_142": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits, name='activationOutputLayer')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_144": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.round(a), y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_97": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, n_features], name='input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([n_features, n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features)), name='weights1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "a": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, W1) + b1, name='activationLayer1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_neurons_in_h1, n_neurons_in_h2], mean=0, stddev=1), name='weights2')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_122": {
                "x": {
                    "value": "p / q",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "qiu.py": {
        "sklearn": {
            "load_breast_cancer_14": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_19": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelBinarizer_21": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_45": {
                "variable": {
                    "value": "X_reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_features, n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_90": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, W1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "activationLayer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h1, n_neurons_in_h2], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h2], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(y1, W2) + b2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "activationLayer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "Wo",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_neurons_in_h2, labels_dim], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weightsOut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "bo",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([labels_dim], mean=0, stddev=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biasesOut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_106": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(y2, Wo) + bo",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(y2, Wo) + bo",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "activationOutputLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_120": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "loss_2 < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : -1 * loss_2",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : loss_2",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_129": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "equal_134": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "Accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_83": {
                "shape": {
                    "value": "[n_features, n_neurons_in_h1]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(n_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_85": {
                "shape": {
                    "value": "[n_neurons_in_h1]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(n_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "a": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(y1, W2) + b2, name='activationLayer2')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Wo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_neurons_in_h2, labels_dim], mean=0, stddev=1), name='weightsOut')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_114": {
                "input_tensor": {
                    "value": "p * tf.log(p / q)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_134": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits, name='activationOutputLayer')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_136": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.round(a), y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_90": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, n_features], name='input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([n_features, n_neurons_in_h1], mean=0, stddev=1 / np.sqrt(n_features)), name='weights1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "a": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, W1) + b1, name='activationLayer1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_neurons_in_h1, n_neurons_in_h2], mean=0, stddev=1), name='weights2')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_114": {
                "x": {
                    "value": "p / q",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "trunc.py": {
        "sklearn": {
            "SVC_55": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "TRY-4.py": {
        "tensorflow": {
            "Normal_151": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(mu) * (qg_max - qg_min) + qg_min",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "std_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(var) * np.sqrt(qg_max - qg_min) + 0.05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "discount_reward_placeholder * tf.log(log_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_152": {
                "x": {
                    "value": "dist.cdf(qg_max) - dist.cdf(qg_min)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_148": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_prob_placeholder[:, :no_pv]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_149": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_prob_placeholder[:, no_pv:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_153": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(action_onehot_placeholder) - tf.log(dist.cdf(qg_max) - dist.cdf(qg_min))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "TRY-5.py": {
        "tensorflow": {
            "Normal_147": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(mu) * (qg_max - qg_min) + qg_min",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "std_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(var) * np.sqrt(qg_max - qg_min) + 0.05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_149": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "discount_reward_placeholder * tf.log(log_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_148": {
                "x": {
                    "value": "dist.cdf(qg_max) - dist.cdf(qg_min)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_prob_placeholder[:, :no_pv]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_145": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_prob_placeholder[:, no_pv:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_149": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(action_onehot_placeholder) - tf.log(dist.cdf(qg_max) - dist.cdf(qg_min))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "alipolicy.py": {
        "tensorflow": {}
    },
    "delete_q.py": {
        "tensorflow": {}
    },
    "deterministic_pg.py": {
        "tensorflow": {
            "Variable_46": {
                "variable": {
                    "value": "self.noise_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, action_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_57": {
                "variable": {
                    "value": "var_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_91": {
                "variable": {
                    "value": "actor_network_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "actor_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_92": {
                "variable": {
                    "value": "critic_network_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "critic_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_172": {
                "variable": {
                    "value": "self.summarize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_173": {
                "variable": {
                    "value": "self.no_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.state_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.action_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_86": {
                "variable": {
                    "value": "self.predicted_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.policy_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "predicted_actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self.next_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.state_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "next_states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "self.next_state_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "next_state_masks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "self.mean_square_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.temp_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "self.q_action_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.action_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "q_action_grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_123": {
                "variable": {
                    "value": "actor_policy_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.policy_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "actor_network_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='actor_network')",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='actor_network')",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "-self.q_action_grad",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_collection_154": {
                "variable": {
                    "value": "actor_network_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "actor_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_155": {
                "variable": {
                    "value": "target_actor_network_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "target_actor_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_162": {
                "variable": {
                    "value": "critic_network_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "critic_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_163": {
                "variable": {
                    "value": "target_critic_network_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "target_critic_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_170": {
                "variable": {
                    "value": "self.target_network_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*self.target_network_update",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "shape": {
                    "value": "[1, action_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variables_initializer_58": {
                "var_list": {
                    "value": "var_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_variables_initialized_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "model_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_77": {
                "name": {
                    "value": "predict_actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_87": {
                "name": {
                    "value": "predicted_actions",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.predicted_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_88": {
                "name": {
                    "value": "action_scores",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.value_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_95": {
                "name": {
                    "value": "estimate_future_rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_108": {
                "name": {
                    "value": "next_action_scores",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.next_action_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "compute_pg_gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "name": {
                    "value": "critic_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_143": {
                "name": {
                    "value": "critic_td_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean_square_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_144": {
                "name": {
                    "value": "critic_reg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.critic_reg_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "update_target_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "actor_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "critic_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "target_actor_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "target_critic_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_116": {
                "x": {
                    "value": "self.temp_diff",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_137": {
                "name": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gradients",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gradients_83": {
                "ys": {
                    "value": "self.value_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_107": {
                "input": {
                    "value": "self.target_critic_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_139": {
                "name": {
                    "value": "var.name + '/gradients'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gradients",
                            "Attribute"
                        ]
                    ]
                }
            },
            "square_117": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_norm_133": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gradients",
                            "Attribute"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.max_gradient",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "powertest2.py": {
        "tensorflow": {
            "placeholder_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 2 * nm]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([2 * nm, n_neurons_in_h1], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_neurons_in_h1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_neurons_in_h1, n_neurons_in_h2], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_neurons_in_h2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_neurons_in_h2, 2 * no_pv], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([2 * no_pv])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_96": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(mean) * (qg_max - qg_min) + qg_min",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "std_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(std) * np.sqrt(qg_max - qg_min) + 0.05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(qg_draw) - tf.log(dist.cdf(qg_max) - dist.cdf(qg_min))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reward_cvx * tf.log(log_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.003",
                            "float"
                        ]
                    ]
                }
            },
            "global_variables_initializer_106": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_107": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_67": {
                "shape": {
                    "value": "[2 * nm, n_neurons_in_h1]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "shape": {
                    "value": "[n_neurons_in_h1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_69": {
                "shape": {
                    "value": "[n_neurons_in_h1, n_neurons_in_h2]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "[n_neurons_in_h2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_71": {
                "shape": {
                    "value": "[n_neurons_in_h2, 2 * no_pv]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "shape": {
                    "value": "[2 * no_pv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "a": {
                    "value": "tf.reshape(x, [-1, 82])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2 * nm, n_neurons_in_h1], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "a": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, [-1, 82]), W1) + b1",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([n_neurons_in_h1, n_neurons_in_h2], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_76": {
                "a": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(y1, W2) + b2",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([n_neurons_in_h2, 2 * no_pv], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_97": {
                "x": {
                    "value": "dist.cdf(qg_max) - dist.cdf(qg_min)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1, 2 * nm])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 82]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_82": {
                "values": {
                    "value": "[qg_min for _ in range(no_pv)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_83": {
                "values": {
                    "value": "[qg_max for _ in range(no_pv)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "x": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y3[:, :no_pv]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_94": {
                "x": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y3[:, no_pv:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_100": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(qg_draw) - tf.log(dist.cdf(qg_max) - dist.cdf(qg_min))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(log_probs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "try-2.py": {
        "tensorflow": {
            "Normal_148": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(mu) * (qg_max - qg_min) + qg_min",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "std_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(var) * np.sqrt(qg_max - qg_min) + 0.05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_150": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "discount_reward_placeholder * tf.log(log_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_149": {
                "x": {
                    "value": "dist.cdf(qg_max) - dist.cdf(qg_min)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_prob_placeholder[:, :no_pv]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_146": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_prob_placeholder[:, no_pv:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_150": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(action_onehot_placeholder) - tf.log(dist.cdf(qg_max) - dist.cdf(qg_min))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "unsupervised.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_13": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([2, 100], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([100])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_17": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([100, 100], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([100])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([100, 3], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_20": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_22": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[YF1, YF2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(Y - Y_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_46": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_13": {
                "shape": {
                    "value": "[2, 100]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "shape": {
                    "value": "[100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_17": {
                "shape": {
                    "value": "[100, 100]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "shape": {
                    "value": "[100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_19": {
                "shape": {
                    "value": "[100, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "a": {
                    "value": "tf.reshape(X, [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2, 100], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_27": {
                "a": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(X, [-1, 2]), W1) + b1",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([100, 100], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_28": {
                "a": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y1, W2) + b2",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([100, 3], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_39": {
                "x": {
                    "value": "Y - Y_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_30": {
                "x": {
                    "value": "Y3[:, 0] + Y3[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_31": {
                "x": {
                    "value": "Y3[:, 0] + Y3[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}