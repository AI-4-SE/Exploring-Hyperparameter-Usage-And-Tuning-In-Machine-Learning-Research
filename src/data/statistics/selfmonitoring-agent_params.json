{
    "tasks/R2R-pano/agents/pano_agent.py": {
        "torch": {
            "zeros_96": {
                "variable": {
                    "value": "pano_img_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(obs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "navigable_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(obs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opts.max_navigable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seq_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([ob['instr_encoding'] for ob in obs])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(seq_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_148": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_151": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_153": {
                "variable": {
                    "value": "self.MSELoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_154": {
                "variable": {
                    "value": "self.MSELoss_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "self.value_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "pre_ctx_attend",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opts.rnn_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "variable": {
                    "value": "pre_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "obs[0]['feature'].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_555": {
                "variable": {
                    "value": "beam_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opts.max_episode_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_556": {
                "variable": {
                    "value": "beam_seq_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opts.max_episode_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_557": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_695": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs.data",
                            "Attribute"
                        ],
                        [
                            "logprobs.data",
                            "Attribute"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1092": {
                "variable": {
                    "value": "beam_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opts.max_episode_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1093": {
                "variable": {
                    "value": "beam_seq_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opts.max_episode_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1094": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit.clone().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "pano_img_feat[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ob['feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "variable": {
                    "value": "pre_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opts.img_feat_input_dim + self.opts.tiled_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "pre_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opts.img_feat_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_489": {
                "variable": {
                    "value": "tmp_pre_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "obs[0]['feature'].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_491": {
                "variable": {
                    "value": "tmp_pre_ctx_attend",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opts.rnn_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_492": {
                "variable": {
                    "value": "tmp_seen_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.opts.rnn_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_532": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(pano_img_feat, navigable_feat, pre_feat, question, h_t, c_t, ctx, pre_ctx_attend, navigable_index, ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, pre_feat, h_t, c_t, ctx, navigable_index, ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, tmp_pre_feat, tmp_question, tmp_h_t, tmp_c_t, tmp_ctx, tmp_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=tmp_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, tmp_pre_feat, tmp_question, tmp_h_t, tmp_c_t, tmp_ctx, tmp_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=tmp_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, new_pre_feat, new_question, new_h_t, new_c_t, new_ctx, new_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=new_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model_seen_step(tmp_obs, ended, tmp_pre_feat, tmp_h_t, tmp_c_t, tmp_ctx, tmp_ctx_mask, tmp_question, tmp_pre_ctx_attend)",
                            "Call"
                        ],
                        [
                            "self.model_seen_step(tmp_obs, ended, tmp_pre_feat, tmp_h_t, tmp_c_t, tmp_ctx, tmp_ctx_mask, tmp_question, tmp_pre_ctx_attend)",
                            "Call"
                        ],
                        [
                            "logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_598": {
                "variable": {
                    "value": "new_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(pano_img_feat, navigable_feat, pre_feat, question, h_t, c_t, ctx, pre_ctx_attend, navigable_index, ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, pre_feat, h_t, c_t, ctx, navigable_index, ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, tmp_pre_feat, tmp_question, tmp_h_t, tmp_c_t, tmp_ctx, tmp_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=tmp_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, tmp_pre_feat, tmp_question, tmp_h_t, tmp_c_t, tmp_ctx, tmp_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=tmp_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, new_pre_feat, new_question, new_h_t, new_c_t, new_ctx, new_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=new_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model_seen_step(tmp_obs, ended, tmp_pre_feat, tmp_h_t, tmp_c_t, tmp_ctx, tmp_ctx_mask, tmp_question, tmp_pre_ctx_attend)",
                            "Call"
                        ],
                        [
                            "self.model_seen_step(tmp_obs, ended, tmp_pre_feat, tmp_h_t, tmp_c_t, tmp_ctx, tmp_ctx_mask, tmp_question, tmp_pre_ctx_attend)",
                            "Call"
                        ],
                        [
                            "logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_870": {
                "variable": {
                    "value": "tmp_pre_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "obs[0]['feature'].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_873": {
                "variable": {
                    "value": "tmp_pre_ctx_attend",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opts.rnn_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_875": {
                "variable": {
                    "value": "tmp_seen_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.opts.rnn_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_904": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(pano_img_feat, navigable_feat, pre_feat, question, h_t, c_t, ctx, pre_ctx_attend, navigable_index, ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, pre_feat, h_t, c_t, ctx, navigable_index, ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, tmp_pre_feat, tmp_question, tmp_h_t, tmp_c_t, tmp_ctx, tmp_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=tmp_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, tmp_pre_feat, tmp_question, tmp_h_t, tmp_c_t, tmp_ctx, tmp_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=tmp_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, new_pre_feat, new_question, new_h_t, new_c_t, new_ctx, new_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=new_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model_seen_step(tmp_obs, ended, tmp_pre_feat, tmp_h_t, tmp_c_t, tmp_ctx, tmp_ctx_mask, tmp_question, tmp_pre_ctx_attend)",
                            "Call"
                        ],
                        [
                            "self.model_seen_step(tmp_obs, ended, tmp_pre_feat, tmp_h_t, tmp_c_t, tmp_ctx, tmp_ctx_mask, tmp_question, tmp_pre_ctx_attend)",
                            "Call"
                        ],
                        [
                            "logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1165": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(pano_img_feat, navigable_feat, pre_feat, question, h_t, c_t, ctx, pre_ctx_attend, navigable_index, ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, pre_feat, h_t, c_t, ctx, navigable_index, ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, tmp_pre_feat, tmp_question, tmp_h_t, tmp_c_t, tmp_ctx, tmp_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=tmp_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, tmp_pre_feat, tmp_question, tmp_h_t, tmp_c_t, tmp_ctx, tmp_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=tmp_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model(pano_img_feat, navigable_feat, new_pre_feat, new_question, new_h_t, new_c_t, new_ctx, new_pre_ctx_attend, navigable_index=navigable_index, ctx_mask=new_ctx_mask)",
                            "Call"
                        ],
                        [
                            "self.model_seen_step(tmp_obs, ended, tmp_pre_feat, tmp_h_t, tmp_c_t, tmp_ctx, tmp_ctx_mask, tmp_question, tmp_pre_ctx_attend)",
                            "Call"
                        ],
                        [
                            "self.model_seen_step(tmp_obs, ended, tmp_pre_feat, tmp_h_t, tmp_c_t, tmp_ctx, tmp_ctx_mask, tmp_question, tmp_pre_ctx_attend)",
                            "Call"
                        ],
                        [
                            "logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_60": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit_cpu",
                            "variable"
                        ],
                        [
                            "F.softmax(logit_cpu, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_328": {
                "variable": {
                    "value": "current_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_765": {
                "variable": {
                    "value": "beam_seq[step, beam_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_924": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf_value.repeat(1, logprobsf.size(1)) + logprobsf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_926": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs.data",
                            "Attribute"
                        ],
                        [
                            "logprobs.data",
                            "Attribute"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1056": {
                "variable": {
                    "value": "beam_logprobs_sum[-missing_length:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "missing_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size - len(next_viewpoints)",
                            "BinOp"
                        ],
                        [
                            "beam_size - len(next_viewpoints)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1009": {
                "variable": {
                    "value": "beam_seq[step, beam_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/R2R-pano/main.py": {
        "torch": {
            "device_148": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opts.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tasks/R2R-pano/models/encoder.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_ratio",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "tensor_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_41": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, self.flip(output_2, 0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ht_1, ht_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ct_1, ct_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tasks/R2R-pano/models/modules.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "tensor_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_28": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Softmax_37": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_context",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_47": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_72": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_91": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(attn.view(-1, len_k)).view(-1, len_q, len_k)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_weight)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_104": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_105": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_107": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_108": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn.view(attn.size(0), 1, attn.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_58": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_60": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn.view(attn.size(0), 1, attn.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "weighted_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_15": {
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_78": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_105": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/R2R-pano/models/policy_model.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.h0_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "img_fc_dim[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.h1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_dropout",
                            "Method Argument"
                        ],
                        [
                            "rnn_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMCell_37": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "img_fc_dim[-1] * 2 + rnn_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.logit_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "img_fc_dim[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.h2_fc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_hidden_size + img_fc_dim[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj_pre_feat, weighted_img_feat, weighted_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_navigable_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_masking(navigable_feat, self.proj_navigable_mlp, navigable_mask)",
                            "Call"
                        ],
                        [
                            "proj_masking(navigable_feat, self.proj_navigable_mlp, navigable_mask)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_tilde.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.proj_img_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_feat_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_feat_input_dim",
                            "Method Argument"
                        ],
                        [
                            "img_feat_input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "img_fc_dim[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.proj_navigable_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_feat_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_feat_input_dim",
                            "Method Argument"
                        ],
                        [
                            "img_feat_input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "img_fc_dim[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.h0_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "img_fc_dim[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_123": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_dropout",
                            "Method Argument"
                        ],
                        [
                            "rnn_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMCell_125": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "img_feat_input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.h1_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.proj_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "img_fc_dim[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_155": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pre_feat, weighted_img_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_165": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_navigable_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_masking(navigable_feat, self.proj_navigable_mlp, navigable_mask)",
                            "Call"
                        ],
                        [
                            "proj_masking(navigable_feat, self.proj_navigable_mlp, navigable_mask)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_tilde.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(max_len + rnn_hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(max_len + rnn_hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "(weighted_ctx, h_1_drop)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "(h_0, weighted_img_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "(ctx_attn, h_1_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "max_len + rnn_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "max_len + rnn_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_98": {
                "input": {
                    "value": "concat_value_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h2_fc_lstm(torch.cat((h_0, weighted_img_feat), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_98": {
                "input": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(concat_input, (h_0, c_0))",
                            "Call"
                        ],
                        [
                            "self.lstm(self.dropout(concat_input), (h_0, c_0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tasks/R2R-pano/models/rnn.py": {
        "torch": {
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_49": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "layer_output",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/R2R-pano/trainer.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tasks/R2R-pano/utils.py": {
        "torch": {
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_242": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_dir + name + '.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_296": {
                "tensors": {
                    "value": "[tensor, tensor.new(length - tensor.size(0), *tensor.size()[1:]).zero_()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_268": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_320": {
                "tensors": {
                    "value": "list_padded_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}