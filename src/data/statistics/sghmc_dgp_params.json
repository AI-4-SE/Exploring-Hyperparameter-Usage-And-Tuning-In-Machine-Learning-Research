{
    "conditionals.py": {
        "tensorflow": {
            "cholesky_27": {
                "variable": {
                    "value": "Lm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kmm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.K(X) + tf.eye(num_data, dtype=tf.float64) * 1e-07",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_35": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fvar[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_func, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_38": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fvar[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_func, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_63": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Knn - tf.matmul(A, A, transpose_a=True)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(fvar[None, :, :], [num_func, 1, 1])",
                            "Call"
                        ],
                        [
                            "Knn - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(fvar[None, :], [num_func, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(fvar)",
                            "Call"
                        ],
                        [
                            "fvar + tf.matmul(LTA, LTA, transpose_a=True)",
                            "BinOp"
                        ],
                        [
                            "fvar + tf.reduce_sum(tf.square(LTA), 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_26": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_42": {
                "a": {
                    "value": "Lm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cholesky(Kmm)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_52": {
                "variable": {
                    "value": "A_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(A, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([num_func, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "LTA",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_sqrt",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "A_tiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(A, 0), tf.stack([num_func, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_100": {
                "num_rows": {
                    "value": "num_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(X)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_37": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_49": {
                "input": {
                    "value": "tf.transpose(q_sqrt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "a": {
                    "value": "LTA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A * tf.expand_dims(tf.transpose(q_sqrt), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(L, A_tiled, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "LTA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A * tf.expand_dims(tf.transpose(q_sqrt), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(L, A_tiled, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "tf.square(LTA)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_49": {
                "a": {
                    "value": "q_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_52": {
                "values": {
                    "value": "[num_func, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "LTA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A * tf.expand_dims(tf.transpose(q_sqrt), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(L, A_tiled, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kernels.py": {
        "tensorflow": {
            "convert_to_tensor_103": {
                "variable": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_118": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.rank(cov), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.matrix_diag(cov)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cov",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "exp_155": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.Variable(np.log(variance), dtype=tf.float64, name='log_variance')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_158": {
                "variable": {
                    "value": "self.lengthscales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.Variable(np.log(lengthscales), dtype=tf.float64, name='log_lengthscales')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_168": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_176": {
                "variable": {
                    "value": "X2s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_98": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(X)",
                            "Call"
                        ],
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.active_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_105": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(X)",
                            "Call"
                        ],
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_123": {
                "variable": {
                    "value": "cov_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(tf.rank(cov), 2), lambda : tf.matrix_diag(cov), lambda : cov)",
                            "Call"
                        ],
                        [
                            "cov[..., self.active_dims, self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.transpose(gather2, [2, 0, 1]), tf.concat([cov_shape[:-2], [len(self.active_dims), len(self.active_dims)]], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "covr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(tf.rank(cov), 2), lambda : tf.matrix_diag(cov), lambda : cov)",
                            "Call"
                        ],
                        [
                            "cov[..., self.active_dims, self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.transpose(gather2, [2, 0, 1]), tf.concat([cov_shape[:-2], [len(self.active_dims), len(self.active_dims)]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, cov_shape[-1], cov_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_125": {
                "variable": {
                    "value": "gather1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.transpose(covr, [2, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.active_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_126": {
                "variable": {
                    "value": "gather2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.transpose(gather1, [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.active_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(gather2, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.concat([cov_shape[:-2], [len(self.active_dims), len(self.active_dims)]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "tf.maximum(r2, 1e-40)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_197": {
                "dims": {
                    "value": "tf.shape(X)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.squeeze(self.variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_100": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X2[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X2, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "X2 / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.active_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_102": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(X)",
                            "Call"
                        ],
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_104": {
                "control_inputs": {
                    "value": "[tf.assert_equal(input_dim_shape, input_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_118": {
                "x": {
                    "value": "tf.rank(cov)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "initial_value": {
                    "value": "np.log(variance)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_variance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_158": {
                "initial_value": {
                    "value": "np.log(lengthscales)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_lengthscales",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_168": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(X)",
                            "Call"
                        ],
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_176": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X2[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X2, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "X2 / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_177": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(X)",
                            "Call"
                        ],
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X2[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X2, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "X2 / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matrix_transpose_178": {
                "a": {
                    "value": "X2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(X2), axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_183": {
                "x": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scaled_square_dist(X, X2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-40",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_197": {
                "input": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_235": {
                "x": {
                    "value": "-r2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rank_118": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(tf.rank(cov), 2), lambda : tf.matrix_diag(cov), lambda : cov)",
                            "Call"
                        ],
                        [
                            "cov[..., self.active_dims, self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.transpose(gather2, [2, 0, 1]), tf.concat([cov_shape[:-2], [len(self.active_dims), len(self.active_dims)]], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_125": {
                "a": {
                    "value": "covr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cov, [-1, cov_shape[-1], cov_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "a": {
                    "value": "gather1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.transpose(covr, [2, 1, 0]), self.active_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "a": {
                    "value": "gather2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.transpose(gather1, [1, 0, 2]), self.active_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_128": {
                "values": {
                    "value": "[cov_shape[:-2], [len(self.active_dims), len(self.active_dims)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(X)",
                            "Call"
                        ],
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(X)",
                            "Call"
                        ],
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matrix_transpose_172": {
                "a": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(X), axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_197": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., self.active_dims]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(X, self.active_dims, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(X)",
                            "Call"
                        ],
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assert_equal_104": {
                "x": {
                    "value": "input_dim_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(X)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(self.input_dim, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "likelihoods.py": {
        "tensorflow": {
            "exp_12": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.Variable(np.log(variance), dtype=tf.float64, name='lik_log_variance')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_18": {
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fill_21": {
                "dims": {
                    "value": "tf.shape(F)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.squeeze(self.variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "np.log(variance)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lik_log_variance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_21": {
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "input": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_24": {
                "input": {
                    "value": "Fmu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_9": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_9": {
                "x": {
                    "value": "mu - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_30": {
                "x": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_31": {
                "x": {
                    "value": "Y - Fmu",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sghmc_base.py": {
        "tensorflow": {
            "placeholder_7": {
                "variable": {
                    "value": "self.X_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_8": {
                "variable": {
                    "value": "self.Y_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, Y.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_26": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "variable": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(noise_scale, 1e-16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_54": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_55": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_29": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_31": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_44": {
                "x": {
                    "value": "tf.cast(self.N, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_46": {
                "x": {
                    "value": "noise_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * epsilon_scaled ** 2 * mdecay * Minv",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-16",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "x": {
                    "value": "g2 + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_44": {
                "x": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sghmc_dgp.py": {
        "tensorflow": {
            "Variable_14": {
                "variable": {
                    "value": "self.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "kmeans2(X, self.M, minit='points')[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((self.M, self.outputs))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_74": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[l.prior() for l in self.layers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_81": {
                "variable": {
                    "value": "self.adam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "adam_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConfigProto_84": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_86": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_87": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_30": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.cast(self.mean, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "tf.square(self.U)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_44": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + tf.matmul(X, tf.cast(self.mean, tf.float64))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_77": {
                "x": {
                    "value": "tf.shape(self.X_placeholder)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_34": {
                "x": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "self.log_likelihood",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "self.X_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}