{
    "plum/metrics/classification_metrics.py": {
        "sklearn": {
            "precision_recall_fscore_support_38": {
                "variable": {
                    "value": "(p, r, f, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self._targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self._output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "range(self.num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "plum/__init__.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "plum/dataio/batch_flat.py": {
        "torch": {
            "cat_9": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item.view(-1) for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plum/dataio/batch_ndtensor.py": {
        "torch": {
            "cat_12": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item.unsqueeze(self.batch_dim) for item in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(batch, dim=self.batch_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.batch_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/dataio/batch_sequence_ndtensor.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.batch_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "batch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch[i], pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.sequence_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "batch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad_tensor, batch[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.sequence_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/dataio/batches.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self._collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/dataio/long_tensor.py": {
        "torch": {}
    },
    "plum/dataio/one_hot.py": {
        "torch": {}
    },
    "plum/dataio/pad_list.py": {
        "torch": {}
    },
    "plum/dataio/select.py": {
        "torch": {}
    },
    "plum/dataio/vocab_lookup.py": {
        "torch": {}
    },
    "plum/initializers/__init__.py": {
        "torch": {}
    },
    "plum/layers/activation_function.py": {
        "torch": {}
    },
    "plum/layers/attention/feed_forward.py": {
        "torch": {
            "tanh_53": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_uns + query_uns",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_61": {
                "variable": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,kjh->ijh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[attention, self.value_net(value).data]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_77": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key + query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "attention_batch_last",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.matmul(self.weight)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(mask, float('-inf'))",
                            "Call"
                        ],
                        [
                            "hidden.matmul(self.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_47": {
                "equation": {
                    "value": "qbh,kbh->qkb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[(~query.mask).float(), (~key.mask).float()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "plum/layers/fully_connected.py": {
        "torch": {}
    },
    "plum/layers/functional.py": {
        "torch": {
            "conv1d_52": {
                "variable": {
                    "value": "output_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_7": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_27": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_35": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool1d_46": {
                "input": {
                    "value": "input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(input.length_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "embedding_10": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute_as_batch_sequence_features()",
                            "Call"
                        ],
                        [
                            "input.transpose(in_dim, last_dim)",
                            "Call"
                        ],
                        [
                            "input.permute_as_batch_features_sequence().apply_sequence_mask_(pad_value=float('-inf'))",
                            "Call"
                        ],
                        [
                            "input.permute_as_batch_features_sequence()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_30": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute_as_batch_sequence_features()",
                            "Call"
                        ],
                        [
                            "input.transpose(in_dim, last_dim)",
                            "Call"
                        ],
                        [
                            "input.permute_as_batch_features_sequence().apply_sequence_mask_(pad_value=float('-inf'))",
                            "Call"
                        ],
                        [
                            "input.permute_as_batch_features_sequence()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_38": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute_as_batch_sequence_features()",
                            "Call"
                        ],
                        [
                            "input.transpose(in_dim, last_dim)",
                            "Call"
                        ],
                        [
                            "input.permute_as_batch_features_sequence().apply_sequence_mask_(pad_value=float('-inf'))",
                            "Call"
                        ],
                        [
                            "input.permute_as_batch_features_sequence()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plum/layers/gru.py": {
        "torch": {
            "GRU_20": {
                "variable": {
                    "value": "self._net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HP(default=False, type=props.BOOLEAN)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HP(default=1, type=props.INTEGER)",
                            "Call"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout if num_layers > 1 else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_54": {
                "variable": {
                    "value": "packed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lengths": {
                    "value": "inputs.lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_58": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "plum/layers/linear_predictor.py": {
        "torch": {}
    },
    "plum/layers/seq_conv_pool_1d.py": {
        "torch": {
            "dropout_31": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(self.pool(self.conv(inputs)).squeeze(2))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/loss_functions/class_cross_entropy.py": {
        "torch": {
            "cross_entropy_48": {
                "variable": {
                    "value": "total_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_state[self.logits_field]",
                            "Subscript"
                        ],
                        [
                            "logits.permute_as_batch_sequence_features().data",
                            "Attribute"
                        ],
                        [
                            "logits.contiguous().view(-1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[self.labels_field]",
                            "Subscript"
                        ],
                        [
                            "labels.permute_as_batch_sequence_features()",
                            "Call"
                        ],
                        [
                            "labels.apply_sequence_mask(pad_value=self.padding_index)",
                            "Call"
                        ],
                        [
                            "labels.data",
                            "Attribute"
                        ],
                        [
                            "labels.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "plum/models/plum_model.py": {
        "torch": {}
    },
    "plum/optimizers/sgd.py": {
        "torch": {
            "SGD_22": {
                "variable": {
                    "value": "self._impl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/optimizers/sgd_1cyc.py": {
        "torch": {
            "SGD_165": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lrs[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.hstack([start_phase_lrs, stop_phase_lrs])",
                            "Call"
                        ],
                        [
                            "np.hstack([lrs, np.linspace(min_lr, min_lr / 100, num=anneal_duration)])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "moms[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.hstack([up_phase_moms, down_phase_moms, anneal_phase_moms])",
                            "Call"
                        ],
                        [
                            "np.array([0] * total_iters)",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_settings[0]['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_68": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.min_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_settings[0]['weight_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self.max_momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/seq2seq/decoder/rnn.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_input.data, ctrl_data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "plum/seq2seq/search/ancestral_sampler.py": {
        "torch": {
            "Categorical_55": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_state['target_logits'].tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "self._outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.data for o in self._outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "self._output_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state['output_log_probs'].data for state in self._states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "self._mask_T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "all_148": {
                "variable": {
                    "value": "self.is_finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "~active_items",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_103": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_state['state'].size(1) * self.samples",
                            "BinOp"
                        ],
                        [
                            "avg_log_probs.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_state['state'].size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "argsort.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/seq2seq/search/beam.py": {
        "torch": {
            "topk_126": {
                "variable": {
                    "value": "(topk_lps, candidate_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_state['log_probs'].data.view(1, batch_size, self.beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_191": {
                "variable": {
                    "value": "(beam_seq_scores, relative_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_beam_lps / (self.steps + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_276": {
                "variable": {
                    "value": "beam_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state['beam_indices'] for state in self._states]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "self._beam_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat(bs) for bs in self._beam_scores]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "all_104": {
                "variable": {
                    "value": "self._is_finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "~active_items",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_303": {
                "variable": {
                    "value": "(self._beam_scores, I)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self._beam_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_279": {
                "tensors": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_199": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_state['state'].size(1)",
                            "Call"
                        ],
                        [
                            "next_output.size(0)",
                            "Call"
                        ],
                        [
                            "active_items.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "beam_seq_lps.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_306": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_state['state'].size(1)",
                            "Call"
                        ],
                        [
                            "next_output.size(0)",
                            "Call"
                        ],
                        [
                            "active_items.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "I.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/seq2seq/search/greedy.py": {
        "torch": {
            "cat_59": {
                "variable": {
                    "value": "self._outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.data for o in self._outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "self._mask_T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "all_95": {
                "variable": {
                    "value": "self.is_finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "~active_items",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "plum/seq2seq/search/greedy_npad.py": {
        "torch": {
            "cat_87": {
                "variable": {
                    "value": "self._outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.data for o in self._outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "self._output_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state['output_log_probs'].data for state in self._states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "self._mask_T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "all_145": {
                "variable": {
                    "value": "self.is_finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "~active_items",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_100": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_state['state'].size(1) * self.samples",
                            "BinOp"
                        ],
                        [
                            "avg_log_probs.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_state['state'].size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "argsort.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plum/tensor_ops.py": {
        "torch": {
            "cat_20": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.data for t in tensors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_16": {
                "input": {
                    "value": "tr.lengths == len0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "plum/trainer/basic_impl.py": {
        "torch": {
            "SummaryWriter_106": {
                "variable": {
                    "value": "self._tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "env['tensorboard_dir']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "plum/types/plum_module.py": {
        "torch": {}
    },
    "plum/types/plum_object.py": {
        "torch": {
            "save_97": {
                "obj": {
                    "value": "{'plum_data': plum_data, 'state_dict': state_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(path)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plum/types/property/parameter.py": {
        "torch": {
            "Parameter_59": {
                "variable": {
                    "value": "parameter",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.type(*dim_sizes).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "plum/types/property/submodule.py": {
        "torch": {
            "ModuleList_63": {
                "modules": {
                    "value": "submodule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleDict_70": {
                "modules": {
                    "value": "submodule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "plum/types/variable.py": {
        "torch": {
            "arange_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data.size(ldim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.data, pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.batch_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "new_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.lengths, self.lengths.new([0] * pad_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.data, pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.length_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}