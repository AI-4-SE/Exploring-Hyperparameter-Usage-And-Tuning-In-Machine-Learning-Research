{
    "decomp/activation_decomposition.py": {
        "sklearn": {
            "PCA_13": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/NYUDMT.py": {
        "torch": {
            "from_numpy_180": {
                "variable": {
                    "value": "sample[labels][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "sample[labels][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "sample[labels][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.swapaxes(np.swapaxes(np.array(target), 1, 2), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/PascalContextMT.py": {
        "torch": {
            "from_numpy_215": {
                "variable": {
                    "value": "sample[labels][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "sample[labels][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_220": {
                "variable": {
                    "value": "sample[labels][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.swapaxes(np.swapaxes(np.array(target), 1, 2), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/__init__.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset(**dataset_args)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/vision.py": {
        "torch": {}
    },
    "decomp/main.py": {
        "torch": {
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.__dict__[args.arch](activation_root=args.activation_root)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_68": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "decomp/modules/layers.py": {
        "torch": {
            "conv2d_41": {
                "variable": {
                    "value": "response",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "decomp/modules/resnet.py": {
        "torch": {
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_72": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_86": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "losses/BCE_with_logits_loss_masked.py": {
        "torch": {
            "BCEWithLogitsLoss_14": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "losses/L1_masked_loss_depth.py": {
        "torch": {
            "L1Loss_10": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "losses/L1_masked_loss_normals.py": {
        "torch": {
            "L1Loss_11": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_14": {
                "input": {
                    "value": "torch.norm(target, p=2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_14": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "losses/__init__.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "task_config[parameters][pos_weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "losses/binary_cross_entropy_with_logits_weighted.py": {
        "torch": {
            "le_23": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "masked_select_24": {
                "variable": {
                    "value": "masked_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.le(label, 1.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_25": {
                "variable": {
                    "value": "masked_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.le(label, 1.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_28": {
                "variable": {
                    "value": "masked_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(label, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ge_38": {
                "variable": {
                    "value": "output_gt_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(output, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "loss_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_pos_pix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mul(masked_labels, loss_val)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_46": {
                "variable": {
                    "value": "loss_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_neg_pix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mul(1.0 - masked_labels, loss_val)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_32": {
                "variable": {
                    "value": "num_labels_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - masked_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "numel_33": {
                "variable": {
                    "value": "num_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ge(masked_label, 0.5).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_39": {
                "input": {
                    "value": "masked_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(output, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "masked_labels - output_gt_zero",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "1 + torch.exp(masked_output - 2 * torch.mul(masked_output, output_gt_zero))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_42": {
                "input": {
                    "value": "masked_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ge(masked_label, 0.5).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(masked_output, masked_labels - output_gt_zero) - torch.log(1 + torch.exp(masked_output - 2 * torch.mul(masked_output, output_gt_zero)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_43": {
                "input": {
                    "value": "1.0 - masked_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(masked_output, masked_labels - output_gt_zero) - torch.log(1 + torch.exp(masked_output - 2 * torch.mul(masked_output, output_gt_zero)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "numel_51": {
                "input": {
                    "value": "masked_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(label, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_40": {
                "input": {
                    "value": "masked_output - 2 * torch.mul(masked_output, output_gt_zero)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_40": {
                "input": {
                    "value": "masked_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(output, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_gt_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ge(masked_output, 0).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/deeplab_resnet.py": {
        "torch": {
            "from_numpy_363": {
                "variable": {
                    "value": "decomposition",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(os.path.join(decomposition_path, new_name), 'components.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_365": {
                "variable": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(os.path.join(decomposition_path, new_name), 'mean.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_367": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decomposition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(os.path.join(os.path.join(decomposition_path, new_name), 'components.npy')))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "decomposition.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_342": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, new_model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ModuleDict_196": {
                "variable": {
                    "value": "self.low_level_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: nn.Sequential(nn.Conv2d(low_level_dim, 48, kernel_size=1, bias=False), NormModule(**kwargs_low), nn.ReLU(inplace=True)) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_203": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: nn.Sequential(conv3x3(out_f_pyramid + 48, 256), NormModule(**kwargs_out), nn.ReLU(inplace=True), conv3x3(256, 256), NormModule(**kwargs_out), nn.ReLU(inplace=True)) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_213": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: self._make_prediction_layer(task) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.active_tasks[task]['out_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mm_388": {
                "variable": {
                    "value": "state_dict[name + .Ws.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "Ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decomposition.transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W.view(weights_out, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_418": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_418": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_185": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: AtrousSpatialPyramidPoolingModule(depth=out_f_pyramid, dilation_series=v3_atrous_rates, in_f=in_f) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "interpolate_304": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5[task](x['tensor'])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_low.shape[2], x_low.shape[3]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_low], dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat[task](x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_low.shape[2], x_low.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_low]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_313": {
                "variable": {
                    "value": "output[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_320": {
                "variable": {
                    "value": "x_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer5[task](x['tensor'])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dec, size=(x_low.shape[2], x_low.shape[3]), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_dec, x_dec_low], dim=1)",
                            "Call"
                        ],
                        [
                            "self.concat[task](x_dec)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_low.shape[2], x_low.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "x_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_dec, x_dec_low]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_327": {
                "variable": {
                    "value": "output[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict[task](x)",
                            "Call"
                        ],
                        [
                            "self.predict[task](x_dec)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_371": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(decomposition, decomposition.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(os.path.join(os.path.join(decomposition_path, new_name), 'mean.npy')))",
                            "Call"
                        ],
                        [
                            "y_mean.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_196": {
                "*args": {
                    "value": "nn.Conv2d(low_level_dim, 48, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "conv3x3(out_f_pyramid + 48, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_311": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict[task](x)",
                            "Call"
                        ],
                        [
                            "self.predict[task](x_dec)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_329": {
                "variable": {
                    "value": "output[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "low_level_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_199": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "modules/layers.py": {
        "torch": {
            "ReLU_249": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_286": {
                "variable": {
                    "value": "self.MaxPool2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "return_indices": {
                    "value": "return_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "ceil_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_192": {
                "variable": {
                    "value": "self.bnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleDict_196": {
                "variable": {
                    "value": "self.bnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: nn.BatchNorm2d(num_features, eps=eps, momentum=momentum, track_running_stats=track_running_stats) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_229": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: STConv2d(in_channels=in_planes, out_channels=out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, groups=groups, bias=bias, padding_mode=padding_mode) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "weight_norm_38": {
                "variable": {
                    "value": "self.Wt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "STConv2d(out_planes, out_planes, 1, stride=1, groups=groups, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleDict_41": {
                "variable": {
                    "value": "self.Wt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: weight_norm(STConv2d(out_planes, out_planes, 1, stride=1, groups=groups, bias=bias)) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_103": {
                "variable": {
                    "value": "self.Wt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: STConv2d(out_planes, out_planes, 1, stride=1, groups=groups, bias=bias) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "conv2d_273": {
                "input": {
                    "value": "input_dic['tensor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleDict_49": {
                "variable": {
                    "value": "self.Wt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: STConv2d(out_planes, out_planes, 1, stride=1, groups=groups, bias=bias) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_111": {
                "variable": {
                    "value": "self.Wt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{task: STConv2d(in_planes, out_planes, 1, stride=stride, groups=groups, bias=bias) for task in tasks}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_41": {
                "module": {
                    "value": "STConv2d(out_planes, out_planes, 1, stride=1, groups=groups, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "modules/pyramid_pooling.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.conv2d_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(depth * 5, depth, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "interm[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "interm[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "interm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "*args": {
                    "value": "nn.Conv2d(in_f, depth, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(output_size=(1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "depth * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "nn.Conv2d(in_f, depth, kernel_size=3, stride=1, padding=padding, dilation=dilation, bias=False, groups=cardinality)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_33": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/__init__.py": {
        "torch": {}
    },
    "schedulers/schedulers.py": {
        "torch": {}
    },
    "test.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "SummaryWriter_44": {
                "variable": {
                    "value": "train_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(exp_dir, 'logs/train_weight')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_45": {
                "variable": {
                    "value": "val_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(exp_dir, 'logs/val')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_46": {
                "variable": {
                    "value": "img_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "img_dir",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "load_82": {
                "variable": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_best_model(checkpoint_dir, 'model')",
                            "Call"
                        ],
                        [
                            "get_last_model(checkpoint_dir, 'model')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_89": {
                "variable": {
                    "value": "last_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_last_model(checkpoint_dir, 'model')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_94": {
                "variable": {
                    "value": "last_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'optimizer.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_best_model(checkpoint_dir, 'model')",
                            "Call"
                        ],
                        [
                            "get_last_model(checkpoint_dir, 'model')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_249": {
                "obj": {
                    "value": "{'state_dict': self.model.state_dict(), 'iteration': iterations}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'model_%08d.pth' % (iterations + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_254": {
                "obj": {
                    "value": "{'opt': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "opt_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'optimizer.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_id) if use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_261": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[task].squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_285": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[task].squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_265": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[task].squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_287": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[task].squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}