{
    "dgcnn_rsmix/main.py": {
        "sklearn": {
            "accuracy_score_282": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_283": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_187": {
                "variable": {
                    "value": "train_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_222": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_223": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_191": {
                "y_true": {
                    "value": "train_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_94": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr * 100, momentum=args.momentum, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_257": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='test', num_points=args.num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_260": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_264": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointNet(args).to(device)",
                            "Call"
                        ],
                        [
                            "DGCNN(args, output_channels=num_class).to(device)",
                            "Call"
                        ],
                        [
                            "DGCNN(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TRAIN_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader(root=args.data_path, npoint=args.num_points, split='train', normal_channel=args.normal, modelnet10=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader(root=args.data_path, npoint=args.num_points, split='test', normal_channel=args.normal, modelnet10=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='train', num_points=args.num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='test', num_points=args.num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_89": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_350": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_265": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_361": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'checkpoints/%s/models/model.t7' % args.exp_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/evaluate.py": {
        "tensorflow": {
            "ConfigProto_105": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_109": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_collection_98": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_99": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('losses')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_102": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_91": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_INDEX)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/evaluate_modelnet10.py": {
        "tensorflow": {
            "ConfigProto_114": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_118": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_collection_107": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_108": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('losses')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_111": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_100": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_INDEX)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet2_cls_msg.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "labels_pl_b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l3_points",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_63": {
                "variable": {
                    "value": "loss_a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_64": {
                "variable": {
                    "value": "loss_b",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_67": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_a_lam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label) * (1 - lam)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_b_lam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label_b) * lam",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(loss_a_lam, loss_b_lam)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_71": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_72": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_65": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_66": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Graph_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet2_cls_ssg.py": {
        "tensorflow": {
            "placeholder_18": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "labels_pl_b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l3_points",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_69": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_a_lam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label) * (1 - lam)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_b_lam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label_b) * lam",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_71": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(loss_a_lam, loss_b_lam)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_73": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_74": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_67": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_68": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Graph_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_85": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet2_cls_ssg_origin.py": {
        "tensorflow": {
            "placeholder_17": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l3_points",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_53": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_54": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Graph_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet2_cls_ssg_origin_modelnet10.py": {
        "tensorflow": {
            "placeholder_17": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l3_points",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_53": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_54": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Graph_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet2_part_seg.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "slice_24": {
                "variable": {
                    "value": "l0_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_25": {
                "variable": {
                    "value": "l0_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_49": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_50": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_51": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_52": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 2048, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_35": {
                "values": {
                    "value": "[l0_xyz, l0_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Graph_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_58": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet2_part_seg_msg_one_hot.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "cls_labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "slice_26": {
                "variable": {
                    "value": "l0_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_27": {
                "variable": {
                    "value": "l0_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_38": {
                "variable": {
                    "value": "cls_label_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "NUM_CATEGORIES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "cls_label_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_label_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(cls_label, depth=NUM_CATEGORIES, on_value=1.0, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_label_one_hot, [batch_size, 1, NUM_CATEGORIES])",
                            "Call"
                        ],
                        [
                            "tf.tile(cls_label_one_hot, [1, num_point, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, NUM_CATEGORIES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_40": {
                "variable": {
                    "value": "cls_label_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_label_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(cls_label, depth=NUM_CATEGORIES, on_value=1.0, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_label_one_hot, [batch_size, 1, NUM_CATEGORIES])",
                            "Call"
                        ],
                        [
                            "tf.tile(cls_label_one_hot, [1, num_point, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_point, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_55": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_57": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_58": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 2048, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_41": {
                "values": {
                    "value": "[cls_label_one_hot, l0_xyz, l0_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Graph_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet2_part_seg_rsmix.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "slice_24": {
                "variable": {
                    "value": "l0_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_25": {
                "variable": {
                    "value": "l0_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_49": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_50": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_51": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_52": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 2048, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_35": {
                "values": {
                    "value": "[l0_xyz, l0_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Graph_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_58": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet2_sem_seg.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "smpws_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_54": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "smpw",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_55": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=label, logits=pred, weights=smpw)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_56": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=label, logits=pred, weights=smpw)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 2048, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Graph_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_62": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet_cls_basic.py": {
        "tensorflow": {
            "placeholder_18": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "expand_dims_28": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(input_image, 64, [1, 3], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv3', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv4', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv5', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 40, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_72": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_74": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_75": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Graph_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/models/pointnet_cls_rsmix.py": {
        "tensorflow": {
            "placeholder_18": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "labels_pl_b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "expand_dims_30": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(input_image, 64, [1, 3], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv3', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv4', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv5', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 10, activation_fn=None, scope='fc3')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 40, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_83": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_a_lam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label) * (1 - lam)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_b_lam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label_b) * lam",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(loss_a_lam, loss_b_lam)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_87": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_88": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_81": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_82": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Graph_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_95": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/predict_cls.py": {
        "tensorflow": {
            "ConfigProto_74": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_78": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_71": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_63": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_INDEX)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/tf_ops/3d_interpolation/tf_interpolate.py": {
        "tensorflow": {
            "load_op_library_9": {
                "variable": {
                    "value": "interpolate_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_interpolate_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_31": {
                "op_type": {
                    "value": "ThreeInterpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_46": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 128, 64)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_47": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 512, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_48": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 128, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_45": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_52": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_50": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/tf_ops/3d_interpolation/tf_interpolate_op_test.py": {
        "tensorflow": {
            "main_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 8, 16)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_15": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 128, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 8, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "compute_gradient_error_21": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.random.random((1, 8, 16)).astype('float32'))",
                            "Call"
                        ]
                    ]
                },
                "x_shape": {
                    "value": "(1, 8, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y": {
                    "value": "interpolated_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "three_interpolate(points, idx, weight)",
                            "Call"
                        ]
                    ]
                },
                "y_shape": {
                    "value": "(1, 128, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_18": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/tf_ops/3d_interpolation/visu_interpolation.py": {
        "tensorflow": {
            "constant_20": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.expand_dims(pts2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_21": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.expand_dims(xyz1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_22": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.expand_dims(xyz2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_25": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(dist, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 / dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_27": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(1.0 / dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_19": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_31": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/tf_ops/grouping/tf_grouping.py": {
        "tensorflow": {
            "load_op_library_7": {
                "variable": {
                    "value": "grouping_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_grouping_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_42": {
                "op_type": {
                    "value": "GroupPoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(xyz1, (b, 1, n, c))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, m, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(xyz2, (b, m, 1, c))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(xyz1 - xyz2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_69": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "outi",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_70": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_84": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 512, 64)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_85": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 512, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_86": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 128, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(tmp1)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(xyz1, (b, 1, n, c)), [1, m, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, 1, n, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(tmp2)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(xyz2, (b, m, 1, c)), [1, 1, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, m, 1, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_83": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_97": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/tf_ops/grouping/tf_grouping_op_test.py": {
        "tensorflow": {
            "disable_v2_behavior_3": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 128, 16)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_15": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 128, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 8, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "compute_gradient_error_25": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.random.random((1, 128, 16)).astype('float32'))",
                            "Call"
                        ]
                    ]
                },
                "x_shape": {
                    "value": "(1, 128, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ]
                    ]
                },
                "y_shape": {
                    "value": "(1, 8, 32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_12": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/tf_ops/sampling/tf_sampling.py": {
        "tensorflow": {
            "load_op_library_14": {
                "variable": {
                    "value": "sampling_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_sampling_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_45": {
                "op_type": {
                    "value": "GatherPoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "triangles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(1, 5, 3, 3).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_71": {
                "variable": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.cross(trib - tria, tric - tria) ** 2, 2) + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_66": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_87": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_79": {
                "x": {
                    "value": "us + vs - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "tf.cross(trib - tria, tric - tria) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((1, 8192))",
                            "Call"
                        ],
                        [
                            "(uplusv + uminusv) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_71": {
                "a": {
                    "value": "trib - tria",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "tric - tria",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/train.py": {
        "tensorflow": {
            "exponential_decay_130": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BASE_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "DECAY_STEP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.decay_step",
                            "Attribute"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.decay_rate",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_136": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exponential_decay_140": {
                "variable": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BN_INIT_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "BN_DECAY_DECAY_STEP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(DECAY_STEP)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "BN_DECAY_DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_146": {
                "variable": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BN_DECAY_CLIP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - bn_momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_191": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_195": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_198": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_199": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(LOG_DIR, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_200": {
                "variable": {
                    "value": "test_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(LOG_DIR, 'test')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_203": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_167": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_168": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('losses')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_173": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_int64(labels_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_188": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_151": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_INDEX)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_161": {
                "name": {
                    "value": "bn_decay",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(BN_DECAY_CLIP, 1 - bn_momentum)",
                            "Call"
                        ],
                        [
                            "get_bn_decay(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_169": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_175": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(correct, tf.float32)) / float(BATCH_SIZE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_180": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.momentum",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_171": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ],
                        [
                            "batch_label[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_173": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int64_173": {
                "x": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_174": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_184": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_159": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_174": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.to_int64(labels_pl))",
                            "Call"
                        ],
                        [
                            "np.sum(pred_val[0:bsize] == batch_label[0:bsize])",
                            "Call"
                        ],
                        [
                            "np.sum(pred_val[0:bsize] == batch_label[0:bsize])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/train_data_mix_save.py": {
        "tensorflow": {
            "exponential_decay_150": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BASE_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "DECAY_STEP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.decay_step",
                            "Attribute"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.decay_rate",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_156": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exponential_decay_160": {
                "variable": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BN_INIT_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "BN_DECAY_DECAY_STEP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(DECAY_STEP)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "BN_DECAY_DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_166": {
                "variable": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BN_DECAY_CLIP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - bn_momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_211": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_215": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_218": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_219": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(LOG_DIR, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_220": {
                "variable": {
                    "value": "test_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(LOG_DIR, 'test')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_223": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_178": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_187": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_188": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('losses')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_193": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_int64(labels_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_208": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_171": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_INDEX)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_181": {
                "name": {
                    "value": "bn_decay",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(BN_DECAY_CLIP, 1 - bn_momentum)",
                            "Call"
                        ],
                        [
                            "get_bn_decay(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_189": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_195": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(correct, tf.float32)) / float(BATCH_SIZE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_200": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_202": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.momentum",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_191": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ],
                        [
                            "batch_label[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_193": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int64_193": {
                "x": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_194": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_204": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_179": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_194": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.to_int64(labels_pl))",
                            "Call"
                        ],
                        [
                            "np.sum(pred_val[0:bsize] == batch_label[0:bsize])",
                            "Call"
                        ],
                        [
                            "np.sum(pred_val[0:bsize] == batch_label[0:bsize])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/utils/pointnet_util.py": {
        "tensorflow": {
            "constant_75": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_76": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array(range(nsample)).reshape((1, 1, nsample)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1, nsample, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_48": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_155": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_214": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(dist, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_215": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 / dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_216": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(1.0 / dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_224": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[interpolated_points, points1])",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points1, 2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points1, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points1, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_230": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[interpolated_points, points1])",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points1, 2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points1, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points1, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz, points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_129": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_195": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(grouped_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d_%d' % (i, j), bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[interpolated_points, points1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "avgpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_146": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_182": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_189": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(grouped_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d_%d' % (i, j), bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_194": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(grouped_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d_%d' % (i, j), bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_182": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_186": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_points, grouped_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_134": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz - tf.tile(tf.expand_dims(new_xyz, 2), [1, 1, nsample, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xyz, (batch_size, 1, nsample, 3))",
                            "Call"
                        ],
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_135": {
                "variable": {
                    "value": "exp_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-dists * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_140": {
                "variable": {
                    "value": "max_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "avg_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "avgpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[avg_points, max_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "weighted_avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "input_tensor": {
                    "value": "exp_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-dists * 5)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_rsmix/utils/provider.py": {
        "tensorflow": {
            "set_random_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2_rsmix/utils/provider_save.py": {
        "tensorflow": {
            "set_random_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2_rsmix/utils/rsmix_provider.py": {
        "tensorflow": {}
    },
    "pointnet2_rsmix/utils/tf_util.py": {
        "tensorflow": {
            "get_variable_26": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_49": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_67": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_120": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_126": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_190": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_196": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_271": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_276": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_332": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_337": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_373": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_376": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_404": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_429": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_455": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_480": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_508": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "moments_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_510": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_decay if bn_decay is not None else 0.9",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cond_525": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_528": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu(name='beta', shape=[num_channels], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu(name='gamma', shape=[num_channels], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_637": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_24": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_68": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_366": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_401": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_426": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_452": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_477": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_502": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_515": {
                "variable": {
                    "value": "ema_apply_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : ema.apply([batch_mean, batch_var])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.no_op()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_636": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_loss_67": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_125": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_195": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_275": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_336": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_375": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_514": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_505": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_507": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_514": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_521": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_638": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_522": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dgcnn_rsmix/ModelNetDataLoader.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "DataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader('/data/modelnet40_normal_resampled/', split='train', uniform=False, normal_channel=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dgcnn_rsmix/data.py": {
        "torch": {}
    },
    "dgcnn_rsmix/model.py": {
        "torch": {
            "sum_30": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_58": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_69": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_70": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_75": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_78": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ],
                        [
                            "40",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_105": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 128, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128 * 2, 256, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, args.emb_dims, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_123": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_126": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self.dp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ],
                        [
                            "40",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_151": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool1d_152": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool1d(x, 1).squeeze()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(self.linear1(x)))",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn7(self.linear2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_29": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool1d(x, 1).squeeze()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(self.linear1(x)))",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_45": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_112": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_115": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_118": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_119": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_121": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "dgcnn_rsmix/util.py": {
        "torch": {
            "zeros_like_32": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scatter_32": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "gold.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_34": {
                "variable": {
                    "value": "log_prb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_38": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}