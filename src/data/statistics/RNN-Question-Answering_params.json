{
    "scripts/preprocess-lc-quad.py": {
        "sklearn": {
            "train_test_split_137": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "NLLLoss_134": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_147": {
                "variable": {
                    "value": "toks_embedding_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_toks.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_148": {
                "variable": {
                    "value": "chars_embedding_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_chars.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "vocab_chars.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_149": {
                "variable": {
                    "value": "pos_embedding_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_pos.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "vocab_pos.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_150": {
                "variable": {
                    "value": "rels_embedding_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_rels.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "vocab_rels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StepLR_176": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.wd)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad([{'params': model.parameters(), 'lr': args.lr}], lr=args.lr, weight_decay=args.wd)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.wd)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "word_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "vocab.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "emb_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(file)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "train_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data, 'pth/lc_quad_train.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_128": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data, 'pth/lc_quad_test.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_165": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(vocab.size(), vocab.size(), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.load(emb_file)",
                            "Call"
                        ],
                        [
                            "torch.zeros(vocab.size(), EMBEDDING_DIM, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "emb_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(file)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(train_file)",
                            "Call"
                        ],
                        [
                            "LC_QUAD_Dataset(train_dir, vocab_toks, vocab_pos, vocab_rels, args.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "train_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data, 'pth/lc_quad_train.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_131": {
                "obj": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(test_file)",
                            "Call"
                        ],
                        [
                            "LC_QUAD_Dataset(test_dir, vocab_toks, vocab_pos, vocab_rels, args.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "test_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data, 'pth/lc_quad_test.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adagrad_168": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.parameters(), 'lr': args.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'trainer': trainer, 'test_accuracy': test_acc, 'scheduler': scheduler}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s.pt' % os.path.join(args.save, args.expname + ',epoch={},test_acc={}'.format(epoch + 1, test_acc))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "emb[vocab.getIndex(word)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_59": {
                "variable": {
                    "value": "emb[vocab.getIndex(word)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "qald.py": {
        "torch": {
            "load_48": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/Down to 15 templates higher dropout,epoch=5,test_acc=0.8205394190871369.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "toks_embedding_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_toks.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "toks_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trainer.embeddings['toks'](toks_sent)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trainer.embeddings['pos'](pos_sent)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "rels_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trainer.embeddings['rels'](rels_sent)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(toks_emb, pos_emb, rels_emb, chars_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_78": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0].squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "load_6": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "train_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'data/lc-quad/pth/lc_quad_train.pth'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "treelstm/dataset.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.toks_sentences)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab.convertToIdx(line.split(), Constants.UNK_WORD)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: float(x), f.readlines()))",
                            "Call"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.float, device='cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "treelstm/metrics.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vocab_output.getIndex(str(int(label))) for label in labels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "treelstm/model.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.ix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.ux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.uh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.ox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.oh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "child_h_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.squeeze(child_h, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ix(inputs) + self.ih(child_h_sum)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ox(inputs) + self.oh(child_h_sum)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ux(inputs) + self.uh(child_h_sum)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fx(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.fh(child_hi) + fx for child_hi in child_h]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.torch.cat([self.fh(child_hi) + fx for child_hi in child_h], 0)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_47": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.torch.mul(f, child_c)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_50": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(self.ox(inputs) + self.oh(child_h_sum))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_89": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "input": {
                    "value": "child_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Var(torch.zeros(1, 1, self.mem_dim))",
                            "Call"
                        ],
                        [
                            "Var(torch.Tensor(tree.num_children, 1, self.mem_dim))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_47": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.torch.cat([self.fh(child_hi) + fx for child_hi in child_h], 0)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "child_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Var(torch.zeros(1, 1, self.mem_dim))",
                            "Call"
                        ],
                        [
                            "Var(torch.Tensor(tree.num_children, 1, self.mem_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_49": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(self.ix(inputs) + self.ih(child_h_sum))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.ux(inputs) + self.uh(child_h_sum))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_49": {
                "input": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.torch.squeeze(F.torch.mul(f, child_c), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.torch.mul(i, u) + F.torch.sum(fc, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_96": {
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "treelstm/trainer.py": {
        "torch": {
            "unsqueeze_67": {
                "variable": {
                    "value": "toks_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embeddings['toks'](toks_sent)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embeddings['pos'](pos_sent)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "rels_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embeddings['rels'](rels_sent)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_81": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "input": {
                    "value": "torch.stack(char_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward(tree, emb, training=True)",
                            "Call"
                        ],
                        [
                            "self.model.forward(tree, emb, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "char_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "char_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(char_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "char_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(toks_emb, pos_emb, rels_emb, chars_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "self.vocabs['chars'].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "self.embeddings['chars'](char_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "treelstm/utils.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((1 for line in open(path + '.txt', 'r', encoding='utf8', errors='ignore')))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(contents[1:])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_18": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_42": {
                "obj": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path + '.pth')",
                            "Call"
                        ],
                        [
                            "torch.zeros(count, dim, dtype=torch.float, device='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "vectors[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(float, contents[1:]))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}