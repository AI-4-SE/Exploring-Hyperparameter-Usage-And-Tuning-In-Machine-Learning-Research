{
    "pyg_file/model_manager.py": {
        "sklearn": {
            "StratifiedKFold_91": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_38": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output[mask].max(1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_276": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_299": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_309": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=self.args.lr, weight_decay=self.args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=self.args.lr, weight_decay=self.args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=lr, weight_decay=w_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr, weight_decay=w_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adagrad(model.parameters(), lr=lr, weight_decay=w_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=lr, weight_decay=w_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr, weight_decay=w_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adagrad(model.parameters(), lr=lr, weight_decay=w_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0.005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "data.val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "data.val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_111": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "idx[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_198": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "w_decay",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_231": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data.x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "model(data.x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_283": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "w_decay",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_200": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "w_decay",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_227": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data.x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "model(data.x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_285": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "w_decay",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adagrad_202": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "w_decay",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_287": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['learning_rate']",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "w_decay",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ],
                        [
                            "10 ** self.hyperargs['weight_decay']",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "rlctr/utils/model_utils.py": {
        "sklearn": {
            "f1_score_111": {
                "y_true": {
                    "value": "y_true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "np.argmax(y_true, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyg_file/geniepath.py": {
        "torch": {
            "tanh_10": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gatconv(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_dim",
                    "type": null,
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.lstm_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.lstm_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyg_file/gnn.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_217": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(output, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(layer(output, edge_index_all))",
                            "Call"
                        ],
                        [
                            "self.final_lin(final_output)",
                            "Call"
                        ],
                        [
                            "self.final_lin(output)",
                            "Call"
                        ],
                        [
                            "layer(output, edge_index_all) + linear(output)",
                            "BinOp"
                        ],
                        [
                            "act(layer(output, edge_index_all) + linear(output))",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "layer_norm(output)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(output, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.final_lin(output))",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "layer(output, edge_index_all)",
                            "Call"
                        ],
                        [
                            "act(layer(output, edge_index_all))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_324": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.final_lin(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_325": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(output, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(layer(output, edge_index_all))",
                            "Call"
                        ],
                        [
                            "self.final_lin(final_output)",
                            "Call"
                        ],
                        [
                            "self.final_lin(output)",
                            "Call"
                        ],
                        [
                            "layer(output, edge_index_all) + linear(output)",
                            "BinOp"
                        ],
                        [
                            "act(layer(output, edge_index_all) + linear(output))",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "layer_norm(output)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(output, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.final_lin(output))",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "layer(output, edge_index_all)",
                            "Call"
                        ],
                        [
                            "act(layer(output, edge_index_all))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_197": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(output, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(layer(output, edge_index_all))",
                            "Call"
                        ],
                        [
                            "self.final_lin(final_output)",
                            "Call"
                        ],
                        [
                            "self.final_lin(output)",
                            "Call"
                        ],
                        [
                            "layer(output, edge_index_all) + linear(output)",
                            "BinOp"
                        ],
                        [
                            "act(layer(output, edge_index_all) + linear(output))",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "layer_norm(output)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(output, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.final_lin(output))",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "layer(output, edge_index_all)",
                            "Call"
                        ],
                        [
                            "act(layer(output, edge_index_all))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "variable": {
                    "value": "final_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_318": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(output, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(layer(output, edge_index_all))",
                            "Call"
                        ],
                        [
                            "self.final_lin(final_output)",
                            "Call"
                        ],
                        [
                            "self.final_lin(output)",
                            "Call"
                        ],
                        [
                            "layer(output, edge_index_all) + linear(output)",
                            "BinOp"
                        ],
                        [
                            "act(layer(output, edge_index_all) + linear(output))",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "layer_norm(output)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(output, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.final_lin(output))",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "layer(output, edge_index_all)",
                            "Call"
                        ],
                        [
                            "act(layer(output, edge_index_all))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "final_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "final_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.use_skip) * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_206": {
                "variable": {
                    "value": "layer_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "output.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "final_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "final_lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.use_skip) * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels * head_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "nn1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(in_channels, out_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels * head_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_283": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels * head_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "linear_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "num_feat",
                            "Name"
                        ],
                        [
                            "out_channels * head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "num_label",
                            "Name"
                        ],
                        [
                            "actions[i * state_num + 4]",
                            "Subscript"
                        ],
                        [
                            "hyperargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyg_file/gnn_layer.py": {
        "torch": {
            "Parameter_40": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, heads * out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, heads, 2 * out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.heads, self.out_channels)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(heads * out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.general_att_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.pool_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_69": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_134": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.apply_attention(edge_index, num_nodes, x_i, x_j)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], ptr=None, num_nodes=num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=True)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "(x_i * wl).sum(dim=-1) + (x_j * wr).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope) + F.leaky_relu(alpha_2, self.negative_slope)",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "x_i * wl * x_j * wr",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_att_layer(alpha)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_110": {
                "variable": {
                    "value": "x_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(x_j, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pool_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "self.pool_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_123": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.apply_attention(edge_index, num_nodes, x_i, x_j)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], ptr=None, num_nodes=num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=True)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "(x_i * wl).sum(dim=-1) + (x_j * wr).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope) + F.leaky_relu(alpha_2, self.negative_slope)",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "x_i * wl * x_j * wr",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_att_layer(alpha)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_149": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.apply_attention(edge_index, num_nodes, x_i, x_j)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], ptr=None, num_nodes=num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=True)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "(x_i * wl).sum(dim=-1) + (x_j * wr).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope) + F.leaky_relu(alpha_2, self.negative_slope)",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "x_i * wl * x_j * wr",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_att_layer(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_141": {
                "input": {
                    "value": "alpha_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_j * wl).sum(dim=-1) + (x_i * wr).sum(dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "[x_i, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_162": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.apply_attention(edge_index, num_nodes, x_i, x_j)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], ptr=None, num_nodes=num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=True)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "(x_i * wl).sum(dim=-1) + (x_j * wr).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope) + F.leaky_relu(alpha_2, self.negative_slope)",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "x_i * wl * x_j * wr",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_att_layer(alpha)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyg_file/message_passing.py": {
        "torch": {
            "is_floating_point_21": {
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_99": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kwargs.get(arg[:-2], None)",
                            "Call"
                        ],
                        [
                            "tmp[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.index_select(tmp, 0, edge_index[idx])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pyg_file/pyg_basic_operators.py": {
        "torch": {
            "Parameter_60": {
                "variable": {
                    "value": "self.att_self_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.num_heads, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.att_neighbor_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.num_heads, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_74": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "alpha + alpha_2",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "neighbor_vecs * self.att_neighbor_weight * self_vecs * self.att_self_weight",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_layer(alpha)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-2)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_84": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "alpha + alpha_2",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "neighbor_vecs * self.att_neighbor_weight * self_vecs * self.att_self_weight",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_layer(alpha)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-2)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_99": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "alpha + alpha_2",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "neighbor_vecs * self.att_neighbor_weight * self_vecs * self.att_self_weight",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_layer(alpha)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-2)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.att_self_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.num_heads, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.att_neighbor_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.num_heads, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.general_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "alpha + alpha_2",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "neighbor_vecs * self.att_neighbor_weight * self_vecs * self.att_self_weight",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_layer(alpha)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-2)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_145": {
                "variable": {
                    "value": "self.att_self_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_146": {
                "variable": {
                    "value": "self.att_neighbor_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.general_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_208": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_255": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_307": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_channels * self.num_head",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim * self.num_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim * self.num_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "alpha + alpha_2",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "neighbor_vecs * self.att_neighbor_weight * self_vecs * self.att_self_weight",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_layer(alpha)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-2)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_194": {
                "variable": {
                    "value": "neighbor_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_vecs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.dropout(neighbor_vecs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(neighbor_vecs)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_200": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "alpha + alpha_2",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "neighbor_vecs * self.att_neighbor_weight * self_vecs * self.att_self_weight",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_layer(alpha)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-2)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_210": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "alpha + alpha_2",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "neighbor_vecs * self.att_neighbor_weight * self_vecs * self.att_self_weight",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_layer(alpha)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-2)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_245": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "(self_vecs * self.att_self_weight).sum(dim=-1) + (neighbor_vecs * self.att_neighbor_weight).sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(alpha, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "alpha + alpha_2",
                            "BinOp"
                        ],
                        [
                            "al.sum(dim=-1) + ar.sum(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "neighbor_vecs * self.att_neighbor_weight * self_vecs * self.att_self_weight",
                            "BinOp"
                        ],
                        [
                            "alpha.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "al + ar",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(alpha)",
                            "Call"
                        ],
                        [
                            "self.general_layer(alpha)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=-2)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_257": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "rlctr/finetuning.py": {
        "torch": {
            "set_device_106": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_107": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_109": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlctr/gnn.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_213": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.prp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.red",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_216": {
                "variable": {
                    "value": "self.fnl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_217": {
                "variable": {
                    "value": "self.agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_374": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_379": {
                "variable": {
                    "value": "self.attn_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_380": {
                "variable": {
                    "value": "self.attn_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_414": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.data['a1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_420": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_472": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(a2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_487": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.data['a1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_488": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.data['a2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_497": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(a + b)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_512": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.data['a1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_518": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_531": {
                "variable": {
                    "value": "self.generalized_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_538": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.data['a1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_543": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "a + b",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 * a2",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.generalized_linear(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_545": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "a + b",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 * a2",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.generalized_linear(a)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_569": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_602": {
                "variable": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.attn_drop(ft)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "torch.sum(ft, dim=1)",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_612": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_613": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pooling_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_625": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pooling_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g.pop_n_repr('head%d' % hid) for hid in range(self.num_heads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_376": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_402": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_533": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_561": {
                "input": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_593": {
                "input": {
                    "value": "ft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.attn_drop(ft)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "torch.sum(ft, dim=1)",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_616": {
                "input": {
                    "value": "ft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.attn_drop(ft)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "torch.sum(ft, dim=1)",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_629": {
                "input": {
                    "value": "ft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.attn_drop(ft)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "torch.sum(ft, dim=1)",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_345": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "layer(output, g)",
                            "Call"
                        ],
                        [
                            "g.pop_n_repr('head0')",
                            "Call"
                        ],
                        [
                            "torch.cat([g.pop_n_repr('head%d' % hid) for hid in range(self.num_heads)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.add(output, g.pop_n_repr('head%d' % hid))",
                            "Call"
                        ],
                        [
                            "output / self.num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "g.pop_n_repr('head%d' % hid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_411": {
                "input": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_420": {
                "input": {
                    "value": "a",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "a + b",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 * a2",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.generalized_linear(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_472": {
                "input": {
                    "value": "a2",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.attn_r(ft)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['a2']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['a2']",
                            "Subscript"
                        ],
                        [
                            "a2.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['a2']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['a2']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['a2']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "leaky_relu_497": {
                "input": {
                    "value": "a + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_518": {
                "input": {
                    "value": "a",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "a + b",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 * a2",
                            "BinOp"
                        ],
                        [
                            "a.sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a1 + a2",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.generalized_linear(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_581": {
                "input": {
                    "value": "ft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.attn_drop(ft)",
                            "Call"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['ft']",
                            "Subscript"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ],
                        [
                            "torch.sum(ft, dim=1)",
                            "Call"
                        ],
                        [
                            "self.act(layer(ft))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_618": {
                "input": {
                    "value": "hidden[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_631": {
                "input": {
                    "value": "hidden[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_650": {
                "variable": {
                    "value": "self.residual_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "indim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hiddendim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_575": {
                "in_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ],
                        [
                            "pooling_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_573": {
                "in_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ],
                        [
                            "pooling_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "pooling_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "rlctr/gnn_model_manager.py": {
        "torch": {
            "max_25": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_26": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices[mask] == labels[mask]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "BCELoss_51": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_280": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g.in_degrees().float()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_166": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(features, g)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "model(features, g)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_176": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(features, g)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "model(features, g)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isinf_281": {
                "input": {
                    "value": "norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.pow(degs, -0.5)",
                            "Call"
                        ],
                        [
                            "norm.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlctr/graphnas_controller.py": {
        "torch": {
            "Embedding_48": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_total_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum(self.num_tokens)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "controller_hid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_51": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "controller_hid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "controller_hid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleDict_54": {
                "variable": {
                    "value": "self._decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.controller_hid]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(actions).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_155": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.controller_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "controller_hid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.search_space[key])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self._decoders[action_name](hx)",
                            "Call"
                        ],
                        [
                            "logits / self.softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "self.tanh_c * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_136": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self._decoders[action_name](hx)",
                            "Call"
                        ],
                        [
                            "logits / self.softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "self.tanh_c * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "[batch_size, self.controller_hid]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_104": {
                "input": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self._decoders[action_name](hx)",
                            "Call"
                        ],
                        [
                            "logits / self.softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "self.tanh_c * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "entropies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "rlctr/main.py": {
        "torch": {
            "set_device_108": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_109": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlctr/search_space.py": {
        "torch": {}
    },
    "rlctr/trainer.py": {
        "torch": {
            "save_538": {
                "obj": {
                    "value": "self.controller.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.controller_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_539": {
                "obj": {
                    "value": "self.controller_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.controller_optimizer_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlctr/utils/label_split.py": {
        "torch": {
            "ones_13": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_index.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_15": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_attr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(edge_index.size(1), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([num_nodes, num_nodes])",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_16": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(edge_index[0]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_17": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[eye, eye]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_18": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "eye",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(start=0, end=num_nodes)",
                            "Call"
                        ],
                        [
                            "torch.stack([eye, eye])",
                            "Call"
                        ],
                        [
                            "torch.sparse_coo_tensor(eye, torch.ones([num_nodes]), size)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "torch.ones([num_nodes])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([num_nodes, num_nodes])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([num_nodes, num_nodes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "train_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[:required_labels] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "rest_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[required_labels:] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "train_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[:required_labels] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "rest_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[required_labels:] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "train_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[:required_labels] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "rest_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[required_labels:] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_118": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "train_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[:required_train_labels] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "val_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[required_train_labels:required_train_labels + required_val_labels] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "rest_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[required_train_labels + required_val_labels:] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "[num_nodes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_53": {
                "n": {
                    "value": "rest_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_83": {
                "n": {
                    "value": "rest_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_107": {
                "n": {
                    "value": "rest_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_139": {
                "n": {
                    "value": "rest_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_154": {
                "n": {
                    "value": "rest_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_179": {
                "n": {
                    "value": "rest_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_47": {
                "n": {
                    "value": "index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_77": {
                "n": {
                    "value": "index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlctr/utils/tensor_utils.py": {
        "torch": {
            "Tensor_36": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}