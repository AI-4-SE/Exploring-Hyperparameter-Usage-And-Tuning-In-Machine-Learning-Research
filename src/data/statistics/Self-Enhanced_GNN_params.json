{
    "combined_models.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_models, num_nodes, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_models, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "confs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_models, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_models, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "models[i](data.x, edges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "models[i](data.x, edges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "pre_add_train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "selected",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "selected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pre_selected[0]",
                            "Subscript"
                        ],
                        [
                            "np.intersect1d(selected, pre_selected[j])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(selected)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_293": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_327": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "nll_loss_267": {
                "input": {
                    "value": "F.log_softmax(model(data.x, edge_index)[train_mask], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "backward_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_287": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(args.num_seeds)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_321": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(args.num_seeds)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_157": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('7_edges', args.dataset.lower(), 'dropper2', f'{args.model.lower()}_{args.split_id}_{0.01 * tu_thres[split_id, seed]:.2f}.edges')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_268": {
                "input": {
                    "value": "model(data.x, edge_index)[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dual_model_tu.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "y_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(data.x, edges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "y_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(data.x, edges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "args.pre_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "args.pre_seed + 1023",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "new_edges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_adj_m.nonzero().t().to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, f'{args.model.lower()}_{args.split_id}_{threshold:.2f}.edges')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "split.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mask(*generate_split(dataset, seed))",
                            "Call"
                        ],
                        [
                            "Mask(*generate_split(dataset, seed, num_train, num_train))",
                            "Call"
                        ],
                        [
                            "Mask(*generate_split(dataset, seed, num_train, num_train))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mask(*generate_split(dataset, seed))",
                            "Call"
                        ],
                        [
                            "Mask(*generate_split(dataset, seed, num_train, num_train))",
                            "Call"
                        ],
                        [
                            "Mask(*generate_split(dataset, seed, num_train, num_train))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f'{out_dir}/{dataset}_{seed}.mask'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_39": {
                "obj": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mask(*generate_split(dataset, seed))",
                            "Call"
                        ],
                        [
                            "Mask(*generate_split(dataset, seed, num_train, num_train))",
                            "Call"
                        ],
                        [
                            "Mask(*generate_split(dataset, seed, num_train, num_train))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f'{out_dir}/{dataset}_{seed}.mask'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "stats.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "new_report_val_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "report_val_accs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[1, 0, :, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_36": {
                "variable": {
                    "value": "new_report_val_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "test_accs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_accs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "converged_accs[2].reshape(converged_accs.shape[1], shape[1] * shape[2]).transpose()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test_accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "best_test_thre",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "best_test_thre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "best_acc_ind[2].flatten()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(best_test_thre)",
                            "Call"
                        ],
                        [
                            "test_accs[:, best_test_thre].diagonal()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "best_val_thre",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "best_val_thre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "best_acc_ind[1].flatten()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(best_val_thre)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "topology_update.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(data.x, edges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "args.pre_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_86": {
                "obj": {
                    "value": "new_edges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adj_m.nonzero().t().to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, f'{args.model.lower()}_{args.split_id}_{threshold:.2f}.edges')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "topology_update_train.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.edges_dir, args.dataset.lower(), args.mode, f'{args.model.lower()}_{split}_{threshold:.2f}.edges')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "training_node_augmentation.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_models, num_nodes, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_models, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "confs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_models, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_models, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "models[i](data.x, edges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_139": {
                "variable": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "models[i](data.x, edges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_256": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "pre_add_train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "selected",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "selected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pre_selected[0]",
                            "Subscript"
                        ],
                        [
                            "np.intersect1d(selected, pre_selected[j])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(selected)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_230": {
                "input": {
                    "value": "F.log_softmax(model(data.x, edge_index)[train_mask], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "backward_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_250": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "input": {
                    "value": "model(data.x, edge_index)[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_59": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join('.datasets', 'Plantoid')",
                            "Call"
                        ],
                        [
                            "os.path.join('.datasets', 'Coauthor', dataset.lower())",
                            "Call"
                        ],
                        [
                            "os.path.join('.datasets', 'Amazon', dataset.lower())",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_137": {
                "variable": {
                    "value": "dot_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_r.view(y_r.size(0), 1, y_r.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_c.view(y_c.size(0), y_c.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_342": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bool",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randperm_67": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "all_c_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randperm_91": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "all_c_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_116": {
                "input": {
                    "value": "F.log_softmax(model(data.x, edge_index)[train_mask], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "backward_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_165": {
                "variable": {
                    "value": "self.sim_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_195": {
                "variable": {
                    "value": "self.sim_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_200": {
                "variable": {
                    "value": "self.dot_sim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_r.view(y_r.size(0), 1, y_r.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_c.view(y_c.size(0), y_c.size(1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_316": {
                "variable": {
                    "value": "self.sim_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "(y.t() / norm).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "input": {
                    "value": "model(data.x, edge_index)[train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_310": {
                "input": {
                    "value": "adj_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_adj_m(self.edges, self.y.size(0), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "get_adj_m(self.edges, self.y.size(0), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "self.adj_bool_m.clone()",
                            "Call"
                        ],
                        [
                            "self.adj_bool_m.clone()",
                            "Call"
                        ],
                        [
                            "get_adj_m(self.edges, self.y.size(0), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "adj_m.to(self.device, torch.float16)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "adj_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_adj_m(self.edges, self.y.size(0), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "get_adj_m(self.edges, self.y.size(0), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "self.adj_bool_m.clone()",
                            "Call"
                        ],
                        [
                            "self.adj_bool_m.clone()",
                            "Call"
                        ],
                        [
                            "get_adj_m(self.edges, self.y.size(0), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "adj_m.to(self.device, torch.float16)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}