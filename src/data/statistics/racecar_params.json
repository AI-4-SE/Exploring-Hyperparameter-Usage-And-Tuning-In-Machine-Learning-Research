{
    "SVD-example/kernel_SVD.py": {
        "tensorflow": {
            "import_meta_graph_16": {
                "variable": {
                    "value": "model_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "'%s/test_%04d/model_%04d.ckpt.meta' % (name, testnum, modelnum)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_18": {
                "variable": {
                    "value": "globalvar",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SVD-example/mnist_training.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imagewidth * imageheight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "back_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fcout - b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(W_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax(fcout)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=prediction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_146": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(prediction, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_149": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_151": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "maxToKeep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.maxsave",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.glorot_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_103": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, cols]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weight, [-1, cols])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weight, [-1, cols])",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_113": {
                "variable": {
                    "value": "ident",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(Wshape[1])",
                            "Call"
                        ],
                        [
                            "int(Wshape[1] * Wshape[2] * Wshape[3])",
                            "Call"
                        ]
                    ]
                },
                "num_columns": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(Wshape[1])",
                            "Call"
                        ],
                        [
                            "int(Wshape[1] * Wshape[2] * Wshape[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_117": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal([height, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_normalize_118": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.transpose(w_tmp), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_normalize_119": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(w_tmp, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_120": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(tf.keras.backend.dot(tf.transpose(u), tf.matmul(w_tmp, v)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, imagewidth * imageheight])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_132": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, imagewidth * imageheight])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W_conv1', [imagewidth * imageheight, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_134": {
                "a": {
                    "value": "W_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W_conv1', [imagewidth * imageheight, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_136": {
                "logits": {
                    "value": "fcout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, W_conv1) + b_conv1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_138": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.softmax(fcout), [-1, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_146": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_147": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_118": {
                "a": {
                    "value": "tf.transpose(w_tmp)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.random_normal([height, 1]), dim=0, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w_tmp, v), dim=0, epsilon=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_119": {
                "a": {
                    "value": "w_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m - ident",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(tf.transpose(w_tmp), u), dim=0, epsilon=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "tf.keras.backend.dot(tf.transpose(u), tf.matmul(w_tmp, v))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_118": {
                "a": {
                    "value": "w_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m - ident",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_120": {
                "a": {
                    "value": "tf.transpose(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matmul(w_tmp, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "input_tensor": {
                    "value": "tf.nn.l2_loss(back_input - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_120": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.random_normal([height, 1]), dim=0, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w_tmp, v), dim=0, epsilon=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "a": {
                    "value": "w_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m - ident",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(tf.transpose(w_tmp), u), dim=0, epsilon=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_144": {
                "t": {
                    "value": "back_input - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SVD-example/peak_training.py": {
        "tensorflow": {
            "placeholder_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imagewidth * imageheight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "back_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fcout1_back - b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(W_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax(fcout2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=prediction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_176": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(prediction, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_177": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_179": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_181": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_182": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "maxToKeep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.maxsave",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.glorot_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_126": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, cols]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_134": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weight, [-1, cols])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_135": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weight, [-1, cols])",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_136": {
                "variable": {
                    "value": "ident",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(Wshape[1])",
                            "Call"
                        ],
                        [
                            "int(Wshape[1] * Wshape[2] * Wshape[3])",
                            "Call"
                        ]
                    ]
                },
                "num_columns": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(Wshape[1])",
                            "Call"
                        ],
                        [
                            "int(Wshape[1] * Wshape[2] * Wshape[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_140": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal([height, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_normalize_141": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.transpose(w_tmp), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_normalize_142": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(w_tmp, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_143": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(tf.keras.backend.dot(tf.transpose(u), tf.matmul(w_tmp, v)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "fcout1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.matmul(x, W_conv1) + b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "fcout2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.matmul(fcout1, W_conv2) + b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "fcout1_back",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm(tf.matmul(fcout2 - b_conv2, tf.transpose(W_conv2)), reuse=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "variable": {
                    "value": "offtensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "offvalue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_115": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, imagewidth * imageheight])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "1_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "1_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "1_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_164": {
                "a": {
                    "value": "W_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W_conv1', [imagewidth * imageheight, 128])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_166": {
                "logits": {
                    "value": "fcout2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm(tf.matmul(fcout1, W_conv2) + b_conv2))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_168": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.softmax(fcout2), [-1, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_176": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_177": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "tf.transpose(w_tmp)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.random_normal([height, 1]), dim=0, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w_tmp, v), dim=0, epsilon=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "a": {
                    "value": "w_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m - ident",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(tf.transpose(w_tmp), u), dim=0, epsilon=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_143": {
                "tensor": {
                    "value": "tf.keras.backend.dot(tf.transpose(u), tf.matmul(w_tmp, v))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_141": {
                "a": {
                    "value": "w_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m - ident",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_143": {
                "a": {
                    "value": "tf.transpose(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matmul(w_tmp, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "a": {
                    "value": "fcout2 - b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(W_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_174": {
                "input_tensor": {
                    "value": "tf.nn.l2_loss(back_input - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.random_normal([height, 1]), dim=0, epsilon=1e-12)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w_tmp, v), dim=0, epsilon=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_143": {
                "a": {
                    "value": "w_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m - ident",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(tf.transpose(w_tmp), u), dim=0, epsilon=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, imagewidth * imageheight])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W_conv1', [imagewidth * imageheight, 128])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_160": {
                "a": {
                    "value": "fcout1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm(tf.matmul(x, W_conv1) + b_conv1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W_conv2', [128, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_163": {
                "a": {
                    "value": "W_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W_conv2', [128, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_174": {
                "t": {
                    "value": "back_input - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}