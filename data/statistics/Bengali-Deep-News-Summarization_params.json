{
    "data_utils.py": {
        "tensorflow": {
            "Exists_84": {
                "filename": {
                    "value": "vocabulary_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_57": {
                "filename": {
                    "value": "vocabulary_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_110": {
                "filename": {
                    "value": "target_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_60": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_86": {
                "name": {
                    "value": "vocabulary_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_113": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_77": {
                "name": {
                    "value": "vocabulary_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_114": {
                "name": {
                    "value": "target_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "execute.py": {
        "tensorflow": {
            "get_checkpoint_state_97": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "gConfig['working_directory']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_113": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_68": {
                "name": {
                    "value": "source_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_98": {
                "filename": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_116": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_69": {
                "name": {
                    "value": "target_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "initialize_all_variables_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_str_274": {
                "bytes_or_text": {
                    "value": "rev_dec_vocab[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_str_224": {
                "bytes_or_text": {
                    "value": "rev_dec_vocab[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq_model.py": {
        "tensorflow": {
            "Variable_76": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_98": {
                "variable": {
                    "value": "output_keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRUCell_99": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_101": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRUCell(size)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(single_cell, output_keep_prob=output_keep_prob)",
                            "Call"
                        ],
                        [
                            "BasicLSTMCell(size)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(single_cell, output_keep_prob=output_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "output_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_157": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, self.target_vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('proj_w', [size, self.target_vocab_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.target_vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_103": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_104": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRUCell(size)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(single_cell, output_keep_prob=output_keep_prob)",
                            "Call"
                        ],
                        [
                            "BasicLSTMCell(size)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(single_cell, output_keep_prob=output_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "output_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_107": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[single_cell] * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_161": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_163": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.losses[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_164": {
                "variable": {
                    "value": "(clipped_gradients, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.losses[b], params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_gradient_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_variables_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_93": {
                "weights": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('proj_b', [self.target_vocab_size])",
                            "Call"
                        ],
                        [
                            "xrange(len(buckets))",
                            "Call"
                        ],
                        [
                            "xrange(len(buckets))",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.target_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'encoder{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'decoder{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'weight{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "output_projection[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}