{
    "utils/networks.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Normal_30": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "locs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(xs)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('scale', 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.view(x.shape[0], 1) if len(x.shape) == 1 else x for x in xs]",
                            "ListComp"
                        ],
                        [
                            "[x.view(x.shape[0], 1) if len(x.shape) == 1 else x for x in xs]",
                            "ListComp"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_49": {
                "variable": {
                    "value": "out_repeated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.view(xs.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "nn.functional.relu(layer(out))",
                            "Call"
                        ],
                        [
                            "self.layers[-1](out)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_repeated, noise], dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.leaky_relu(layer(out))",
                            "Call"
                        ],
                        [
                            "self.layers[-1](out)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.leaky_relu(layer(out))",
                            "Call"
                        ],
                        [
                            "self.layers[-1](out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * n_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_repeated, noise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.view(x.shape[0], 1) if len(x.shape) == 1 else x for x in xs]",
                            "ListComp"
                        ],
                        [
                            "[x.view(x.shape[0], 1) if len(x.shape) == 1 else x for x in xs]",
                            "ListComp"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bernoulli_82": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(xs, as_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_22": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_72": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.view(xs.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "nn.functional.relu(layer(out))",
                            "Call"
                        ],
                        [
                            "self.layers[-1](out)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_repeated, noise], dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.leaky_relu(layer(out))",
                            "Call"
                        ],
                        [
                            "self.layers[-1](out)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.leaky_relu(layer(out))",
                            "Call"
                        ],
                        [
                            "self.layers[-1](out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "n_hidden[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_hidden, n_hidden[1:])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_hidden, n_hidden[1:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}