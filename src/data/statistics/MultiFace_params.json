{
    "verifacation.py": {
        "sklearn": {
            "KFold_40": {
                "variable": {
                    "value": "k_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "nrof_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KFold_135": {
                "variable": {
                    "value": "k_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "nrof_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PCA_60": {
                "variable": {
                    "value": "pca_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_64": {
                "variable": {
                    "value": "embed1",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "embed1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pca_model.transform(embeddings1)",
                            "Call"
                        ],
                        [
                            "sklearn.preprocessing.normalize(embed1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_65": {
                "variable": {
                    "value": "embed2",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "embed2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pca_model.transform(embeddings2)",
                            "Call"
                        ],
                        [
                            "sklearn.preprocessing.normalize(embed2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Learner.py": {
        "torch": {
            "load_140": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "source_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_401": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(diff, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_402": {
                "variable": {
                    "value": "(minimum, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.pow(diff, 2), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_113": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path / 'model_{}_accuracy:{}_step:{}_{}.pth'.format(get_time(), accuracy, self.step, extra)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "self.head.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path / 'head_{}_accuracy:{}_step:{}_{}.pth'.format(get_time(), accuracy, self.step, extra)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "self.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path / 'optimizer_{}_accuracy:{}_step:{}_{}.pth'.format(get_time(), accuracy, self.step, extra)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_153": {
                "f": {
                    "value": "save_path / 'model_{}'.format(fixed_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "carray[idx:idx + conf.batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "carray[idx:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_264": {
                "f": {
                    "value": "conf.pretrained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_401": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_embs.unsqueeze(-1) - target_embs.transpose(1, 0).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_87": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': paras_wo_bn[:-1], 'weight_decay': 4e-05}, {'params': [paras_wo_bn[-1]] + self.head.kernel_list, 'weight_decay': 0.0004}, {'params': paras_only_bn}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "conf.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_93": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': paras_wo_bn[:-1], 'weight_decay': 4e-05}, {'params': [paras_wo_bn[-1]] + [self.head.kernel], 'weight_decay': 0.0004}, {'params': paras_only_bn}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "conf.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_100": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': paras_wo_bn + self.head.kernel_list, 'weight_decay': 0.0005}, {'params': paras_only_bn}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "conf.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_105": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': paras_wo_bn + [self.head.kernel], 'weight_decay': 0.0005}, {'params': paras_only_bn}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "conf.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_156": {
                "f": {
                    "value": "save_path / 'head_{}'.format(fixed_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_157": {
                "f": {
                    "value": "save_path / 'optimizer_{}'.format(fixed_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "config.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "conf.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "conf.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/data_pipe.py": {
        "torch": {
            "DataLoader_77": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(imgs_folder, train_transform)",
                            "Call"
                        ],
                        [
                            "vgg_ds",
                            "Name"
                        ],
                        [
                            "ms1m_ds",
                            "Name"
                        ],
                        [
                            "ConcatDataset([ms1m_ds, vgg_ds])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "conf.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "conf.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConcatDataset_72": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[ms1m_ds, vgg_ds]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "norm_15": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_16": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_23": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_29": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, (3, 3), 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(3, 64, (3, 3), 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.output_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "AvgPool2d(7, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_241": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_243": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_255": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_308": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_355": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_356": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_397": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, classnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_413": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embbedings",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_416": {
                "variable": {
                    "value": "cos_theta_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(embbedings, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mm(embbedings[:, i * self.each_embeding_size:(i + 1) * self.each_embeding_size], kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mm(embbedings, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mm(embbedings[:, i * self.each_embeding_size:(i + 1) * self.each_embeding_size], kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_418": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sin_theta_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - cos_theta_2",
                            "BinOp"
                        ],
                        [
                            "1 - cos_theta_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_428": {
                "variable": {
                    "value": "idx_",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(embbedings)",
                            "Call"
                        ],
                        [
                            "len(embbedings)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_495": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, classnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_502": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embbedings",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_541": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, classnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_550": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embbedings",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_44": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_84": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channel, depth, (1, 1), stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_445": {
                "variable": {
                    "value": "para",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.each_embeding_size, classnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_464": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embbedings[:, i * self.each_embeding_size:(i + 1) * self.each_embeding_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_466": {
                "variable": {
                    "value": "cos_theta_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(embbedings, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mm(embbedings[:, i * self.each_embeding_size:(i + 1) * self.each_embeding_size], kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mm(embbedings, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.mm(embbedings[:, i * self.each_embeding_size:(i + 1) * self.each_embeding_size], kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_468": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sin_theta_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - cos_theta_2",
                            "BinOp"
                        ],
                        [
                            "1 - cos_theta_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_476": {
                "variable": {
                    "value": "idx_",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(embbedings)",
                            "Call"
                        ],
                        [
                            "len(embbedings)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_518": {
                "variable": {
                    "value": "para",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.each_embeding_size, classnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_528": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embbedings[:, i * self.each_embeding_size:(i + 1) * self.each_embeding_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_572": {
                "variable": {
                    "value": "para",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.each_embeding_size, classnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_583": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embbedings[:, i * self.each_embeding_size:(i + 1) * self.each_embeding_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel, axis=0)",
                            "Call"
                        ],
                        [
                            "l2_norm(self.kernel_list[i], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_50": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_70": {
                "num_parameters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_174": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_175": {
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_177": {
                "p": {
                    "value": "drop_ratio",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_180": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_206": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "inplace": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_213": {
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_214": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_218": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "cat_63": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings)",
                            "Call"
                        ],
                        [
                            "torch.load(conf.facebank_path / 'facebank.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_70": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.facebank_path / 'facebank.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_122": {
                "variable": {
                    "value": "hfliped_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_60": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings)",
                            "Call"
                        ],
                        [
                            "torch.load(conf.facebank_path / 'facebank.pth')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "conf.facebank_path / 'facebank.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}