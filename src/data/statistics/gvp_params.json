{
    "src/datasets.py": {
        "tensorflow": {}
    },
    "src/gvp.py": {
        "tensorflow": {
            "maximum_7": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.reduce_sum(tf.math.square(x), axis, keepdims)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[..., :3 * nv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape[:-1] + [3, nv]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x[..., :3 * nv], x.shape[:-1] + [3, nv])",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, v.shape[:-2] + [3 * v.shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.concat([v1, v2], -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "v.shape[:-2] + [3 * v.shape[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v1, v2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s1, s2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_58": {
                "variable": {
                    "value": "vn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.reduce_mean(vn, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_73": {
                "values": {
                    "value": "[v, s]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_7": {
                "input_tensor": {
                    "value": "tf.math.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_8": {
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.math.reduce_sum(tf.math.square(x), axis, keepdims), eps)",
                            "Call"
                        ],
                        [
                            "self.ws(tf.concat([s, vn], -1))",
                            "Call"
                        ],
                        [
                            "self.ws(s)",
                            "Call"
                        ],
                        [
                            "(vo, out) if return_split else merge(vo, out)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "square_7": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "input_tensor": {
                    "value": "vn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_no_nan(vh, axis=-2)",
                            "Call"
                        ],
                        [
                            "norm_no_nan(v, axis=-2, keepdims=True, sqrt=False)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.math.reduce_mean(vn, axis=-1, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_28": {
                "values": {
                    "value": "[s, vn]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "tensorflow": {
            "reshape_262": {
                "variable": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(N_nodes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ii, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(tf.range(N_nodes), tf.float32), (1, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_264": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_272": {
                "variable": {
                    "value": "edge_features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "neighbor_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "neighbors_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neighbor_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[neighbor_idx.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_283": {
                "variable": {
                    "value": "neighbor_features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "neighbors_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neighbor_idx, [neighbor_idx.shape[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_284": {
                "variable": {
                    "value": "neighbor_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neighbor_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(nodes, neighbors_flat, axis=1, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neighbor_features, list(neighbor_idx.shape)[:3] + [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "list(neighbor_idx.shape)[:3] + [-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "variable": {
                    "value": "mask_attend",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gather_nodes(tf.expand_dims(mask, -1), E_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_168": {
                "variable": {
                    "value": "mask_attend",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "autoregressive_mask(E_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "mask_1D",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.expand_dims(mask, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_186": {
                "variable": {
                    "value": "mask_attend",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "autoregressive_mask(E_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "mask_1D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[mask.shape[0], mask.shape[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_241": {
                "variable": {
                    "value": "h_V_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_V, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, tf.shape(h_M)[-2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_246": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_EV(h_EV)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(mask_attend, -1), tf.float32) * h_message",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_268": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.linalg.norm(tensor, axis=axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "variable": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tf.range(N_nodes), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_303": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(E_idx, tf.float32) - ii",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_305": {
                "variable": {
                    "value": "frequency",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.range(0, self.num_embeddings, 2), tf.float32) * -(np.log(10000.0) / self.num_embeddings)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_310": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.math.cos(angles), tf.math.sin(angles))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_339": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_345": {
                "variable": {
                    "value": "D_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_2D * tf.math.sqrt(tf.math.reduce_sum(dX ** 2, 3) + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sign(tf.math.reduce_sum(u_2 * n_1, -1)) * tf.math.acos(cosD)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(D, [[0, 0], [1, 2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [tf.shape(D)[0], int(tf.shape(D)[1] / 3), 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "top_k_347": {
                "variable": {
                    "value": "(D_neighbors, E_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-D_adjust",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "min(self.top_k, tf.shape(X)[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_365": {
                "variable": {
                    "value": "D_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "D_min",
                    "type": "variable",
                    "possible_values": []
                },
                "stop": {
                    "value": "D_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_max(D, -1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "D_count",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_366": {
                "variable": {
                    "value": "D_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "D_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(D_min, D_max, D_count)",
                            "Call"
                        ],
                        [
                            "tf.reshape(D_mu, [1, 1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_368": {
                "variable": {
                    "value": "D_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_2D * tf.math.sqrt(tf.math.reduce_sum(dX ** 2, 3) + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sign(tf.math.reduce_sum(u_2 * n_1, -1)) * tf.math.acos(cosD)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(D, [[0, 0], [1, 2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [tf.shape(D)[0], int(tf.shape(D)[1] / 3), 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_369": {
                "variable": {
                    "value": "RBF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-((D_expand - D_mu) / D_sigma) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_377": {
                "variable": {
                    "value": "forward",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X[:, 1:] - X[:, :-1])",
                            "Call"
                        ],
                        [
                            "tf.pad(forward, [[0, 0], [0, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_378": {
                "variable": {
                    "value": "backward",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X[:, :-1] - X[:, 1:])",
                            "Call"
                        ],
                        [
                            "tf.pad(backward, [[0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_394": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X[:, :, :3, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(X)[0], 3 * tf.shape(X)[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_408": {
                "variable": {
                    "value": "cosD",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_2 * n_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_409": {
                "variable": {
                    "value": "cosD",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "cosD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(n_2 * n_1, -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(cosD, -1 + eps, 1 - eps)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1 + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_413": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_2D * tf.math.sqrt(tf.math.reduce_sum(dX ** 2, 3) + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sign(tf.math.reduce_sum(u_2 * n_1, -1)) * tf.math.acos(cosD)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(D, [[0, 0], [1, 2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [tf.shape(D)[0], int(tf.shape(D)[1] / 3), 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_414": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_2D * tf.math.sqrt(tf.math.reduce_sum(dX ** 2, 3) + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sign(tf.math.reduce_sum(u_2 * n_1, -1)) * tf.math.acos(cosD)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(D, [[0, 0], [1, 2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [tf.shape(D)[0], int(tf.shape(D)[1] / 3), 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(D)[0], int(tf.shape(D)[1] / 3), 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_417": {
                "variable": {
                    "value": "D_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.cos(D), tf.math.sin(D)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_437": {
                "variable": {
                    "value": "V_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(V_sidechains, -1), V_orientations]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_439": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[E_directions, RBF, E_positional]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "h_V_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h_V_out * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "variable": {
                    "value": "h_V_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h_V_out * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_62": {
                "variable": {
                    "value": "h_V_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_V_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_V_out(h_V)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_mean(h_V_out * mask, -2)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(h_V_out * mask, -2)",
                            "Call"
                        ],
                        [
                            "tf.math.divide_no_nan(h_V_out, tf.math.reduce_sum(mask, -2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.math.reduce_sum(mask, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_212": {
                "variable": {
                    "value": "h_V_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_V_stack[-1][t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "S_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random.categorical(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_254": {
                "variable": {
                    "value": "mask_V",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(mask_V, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_260": {
                "input": {
                    "value": "E_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_268": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_379": {
                "values": {
                    "value": "[tf.expand_dims(forward, -1), tf.expand_dims(backward, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "input": {
                    "value": "self.dense(out, training=train)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "h_S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_s(S)",
                            "Call"
                        ],
                        [
                            "self.W_s(S)",
                            "Call"
                        ],
                        [
                            "np.zeros((N_batch, N_nodes, self.ss), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_241": {
                "input": {
                    "value": "h_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_v(V)",
                            "Call"
                        ],
                        [
                            "self.encoder(h_V, h_E, E_idx, mask, train=train)",
                            "Call"
                        ],
                        [
                            "self.W_v(V)",
                            "Call"
                        ],
                        [
                            "self.encoder(h_V, h_E, E_idx, mask, train=train)",
                            "Call"
                        ],
                        [
                            "self.decoder(h_V, h_S, h_E, E_idx, mask, train=train)",
                            "Call"
                        ],
                        [
                            "self.W_v(V)",
                            "Call"
                        ],
                        [
                            "self.encoder(h_V, h_E, E_idx, mask, train=False)",
                            "Call"
                        ],
                        [
                            "layer(h_V, h_M, mask_V=mask, mask_attend=mask_attend, train=train)",
                            "Call"
                        ],
                        [
                            "layer(h_V, h_M, mask_V=mask, train=train)",
                            "Call"
                        ],
                        [
                            "self.norm[0](h_V + self.dropout(dh, training=train))",
                            "Call"
                        ],
                        [
                            "self.norm[1](h_V + self.dropout(dh, training=train))",
                            "Call"
                        ],
                        [
                            "mask_V * h_V",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_299": {
                "input": {
                    "value": "E_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_300": {
                "input": {
                    "value": "E_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_301": {
                "input": {
                    "value": "E_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_302": {
                "x": {
                    "value": "tf.range(N_nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "tensor": {
                    "value": "frequency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.exp(tf.cast(tf.range(0, self.num_embeddings, 2), tf.float32) * -(np.log(10000.0) / self.num_embeddings))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_340": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_341": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X[:, :, :3, :], [tf.shape(X)[0], 3 * tf.shape(X)[1], 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_342": {
                "x": {
                    "value": "tf.math.reduce_sum(dX ** 2, 3) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_350": {
                "input": {
                    "value": "mask_2D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask, 1) * tf.expand_dims(mask, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_358": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X[:, :, :3, :], [tf.shape(X)[0], 3 * tf.shape(X)[1], 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_387": {
                "a": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_404": {
                "a": {
                    "value": "u_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, :-2, :]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "u_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, 1:-1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_405": {
                "a": {
                    "value": "u_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, 1:-1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "u_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, 2:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sign_410": {
                "x": {
                    "value": "tf.math.reduce_sum(u_2 * n_1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_410": {
                "x": {
                    "value": "cosD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(n_2 * n_1, -1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(cosD, -1 + eps, 1 - eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_130": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E_idx - ii < 0",
                            "Compare"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_195": {
                "value": {
                    "value": "tf.zeros_like(h_V)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "N_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(E_idx)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(E_idx)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "categorical_215": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_out(h_V)",
                            "Call"
                        ],
                        [
                            "W_out(h_V_t) / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_245": {
                "x": {
                    "value": "tf.expand_dims(mask_attend, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_254": {
                "input": {
                    "value": "mask_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(mask_V, -1), tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_303": {
                "x": {
                    "value": "E_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_306": {
                "x": {
                    "value": "tf.range(0, self.num_embeddings, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_310": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d * tf.reshape(frequency, (1, 1, 1, -1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_310": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d * tf.reshape(frequency, (1, 1, 1, -1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_379": {
                "input": {
                    "value": "backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X[:, :-1] - X[:, 1:])",
                            "Call"
                        ],
                        [
                            "tf.pad(backward, [[0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_388": {
                "x": {
                    "value": "2 / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_410": {
                "input_tensor": {
                    "value": "u_2 * n_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_417": {
                "x": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_2D * tf.math.sqrt(tf.math.reduce_sum(dX ** 2, 3) + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sign(tf.math.reduce_sum(u_2 * n_1, -1)) * tf.math.acos(cosD)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(D, [[0, 0], [1, 2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [tf.shape(D)[0], int(tf.shape(D)[1] / 3), 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_417": {
                "x": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_2D * tf.math.sqrt(tf.math.reduce_sum(dX ** 2, 3) + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sign(tf.math.reduce_sum(u_2 * n_1, -1)) * tf.math.acos(cosD)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(D, [[0, 0], [1, 2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [tf.shape(D)[0], int(tf.shape(D)[1] / 3), 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_437": {
                "input": {
                    "value": "V_sidechains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sidechains(X)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_195": {
                "input": {
                    "value": "h_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_v(V)",
                            "Call"
                        ],
                        [
                            "self.encoder(h_V, h_E, E_idx, mask, train=train)",
                            "Call"
                        ],
                        [
                            "self.W_v(V)",
                            "Call"
                        ],
                        [
                            "self.encoder(h_V, h_E, E_idx, mask, train=train)",
                            "Call"
                        ],
                        [
                            "self.decoder(h_V, h_S, h_E, E_idx, mask, train=train)",
                            "Call"
                        ],
                        [
                            "self.W_v(V)",
                            "Call"
                        ],
                        [
                            "self.encoder(h_V, h_E, E_idx, mask, train=False)",
                            "Call"
                        ],
                        [
                            "layer(h_V, h_M, mask_V=mask, mask_attend=mask_attend, train=train)",
                            "Call"
                        ],
                        [
                            "layer(h_V, h_M, mask_V=mask, train=train)",
                            "Call"
                        ],
                        [
                            "self.norm[0](h_V + self.dropout(dh, training=train))",
                            "Call"
                        ],
                        [
                            "self.norm[1](h_V + self.dropout(dh, training=train))",
                            "Call"
                        ],
                        [
                            "mask_V * h_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_205": {
                "values": {
                    "value": "h_V_stack[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_241": {
                "input": {
                    "value": "h_M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat_neighbors_nodes(h_V, h_E, E_idx, self.nv, self.ev)",
                            "Call"
                        ],
                        [
                            "mask_bw * h_ESV + h_ESV_encoder_fw",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_245": {
                "input": {
                    "value": "mask_attend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(gather_nodes(tf.expand_dims(mask, -1), E_idx), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1) * mask_attend",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(autoregressive_mask(E_idx), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(autoregressive_mask(E_idx), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_306": {},
            "reduce_sum_342": {
                "input_tensor": {
                    "value": "dX ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_394": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X[:, :, :3, :], [tf.shape(X)[0], 3 * tf.shape(X)[1], 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_414": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_2D * tf.math.sqrt(tf.math.reduce_sum(dX ** 2, 3) + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sign(tf.math.reduce_sum(u_2 * n_1, -1)) * tf.math.acos(cosD)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(D, [[0, 0], [1, 2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [tf.shape(D)[0], int(tf.shape(D)[1] / 3), 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_348": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X[:, :, :3, :], [tf.shape(X)[0], 3 * tf.shape(X)[1], 3])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/train_cpd.py": {
        "tensorflow": {
            "list_physical_devices_3": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_logical_devices_9": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_8": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "variable"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/util.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_15": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_16": {
                "variable": {
                    "value": "acc_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_17": {
                "variable": {
                    "value": "loss_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Checkpoint_47": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Checkpoint_53": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_38": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*batch, train=False)",
                            "Call"
                        ],
                        [
                            "model(*batch, train=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "confusion_matrix_39": {
                "labels": {
                    "value": "tf.reshape(S, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.reshape(pred, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "tf.reshape(M, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "tensor": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}