{
    "datasets/rcc_dataset.py": {
        "torch": {}
    },
    "models/CaptionModel.py": {
        "torch": {
            "device_103": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu_ids[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_62": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logprobs_table[divm].data.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "bdash",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_size // group_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unbind_118": {
                "input": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_118": {
                "tensors": {
                    "value": "init_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "chunk_118": {
                "input": {
                    "value": "group_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.model.speaker.get('group_size', 1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/dynamic_speaker.py": {
        "torch": {
            "sort_14": {
                "variable": {
                    "value": "(sorted_lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_15": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sorted_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_22": {
                "variable": {
                    "value": "(tmp, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.embed_input_dim, self.embed_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_57": {
                "variable": {
                    "value": "self.module_att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embed_dim + cfg.model.speaker.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "cfg.model.speaker.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.weight_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(cfg.model.speaker.rnn_size, 3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_65": {
                "variable": {
                    "value": "self.lang_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "cfg.model.speaker.word_embed_size + cfg.model.speaker.input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "cfg.model.speaker.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "embed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc_feat_bef, feat_diff, loc_feat_aft]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "module_att_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed, prev_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc_feat_bef.unsqueeze(1), feat_diff.unsqueeze(1), loc_feat_aft.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "lang_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xt, att_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(self.vocab_size, self.word_embed_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_197": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_205": {
                "variable": {
                    "value": "module_weights_stacked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.module_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_17": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reduce(lambda x, y: x + y, self.logit) + [nn.Linear(self.rnn_size, self.vocab_size)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "PackedSequence_37": {
                "data": {
                    "value": "module(packed[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "packed[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "self.embed_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "cfg.model.speaker.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_62": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_95": {
                "tensors": {
                    "value": "[c_mod_att, c_lang]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_117": {
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.word_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_290": {
                "variable": {
                    "value": "(sample_logprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_297": {
                "variable": {
                    "value": "it",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(outputs[:, i - 1].detach())",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_167": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[:, i - 1].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_294": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_296": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_169": {
                "input": {
                    "value": "prob_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(outputs[:, i - 1].detach())",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_169": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_296": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.model.speaker.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.input_dim, self.dim, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "input_before",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_1, input_diff]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "input_after",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_2, input_diff]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "att_weight_before",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att(embed_before)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "att_weight_after",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att(embed_after)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "coord_map_in_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sequence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[coord_map] * batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_62": {
                "variable": {
                    "value": "img_feat_aug",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_feat, coord_map]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_19": {
                "num_groups": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/extract_features.py": {
        "torch": {
            "is_available_21": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "is_available_32": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_39": {
                "device": {
                    "value": "default_gpu_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gpu_ids[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_35": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "StepLR_103": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_optimizer(all_params, cfg)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "cfg.train.optim.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.train.optim.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_39": {
                "device": {
                    "value": "default_gpu_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gpu_ids[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "eye_163": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_15": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_19": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_84": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "cfg.train.optim.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.train.optim.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.train.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_87": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.train.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_200": {
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "to_contiguous(torch.cat([mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]], 1)).view(-1)",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "mask[:, :x.size(1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_214": {
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "to_contiguous(torch.cat([mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]], 1)).view(-1)",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "mask[:, :x.size(1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_89": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.train.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_91": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.train.optim.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.train.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "[mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_94": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.train.optim.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.train.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_97": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train.optim.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(cfg.train.optim.alpha, cfg.train.optim.beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.train.optim.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.train.optim.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}