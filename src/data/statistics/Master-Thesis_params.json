{
    "AbdomenDS.py": {
        "torch": {
            "is_available_20": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(np.expand_dims(dicoms, 0), 0) / 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "dicoms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.expand_dims(np.expand_dims(dicoms, 0), 0) / 1.0).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.expand_dims(gt_processed, 0) / 1.0).float()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.interp_fact",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(gt_processed, 0) / 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "gt_processed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.expand_dims(np.expand_dims(dicoms, 0), 0) / 1.0).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.expand_dims(gt_processed, 0) / 1.0).float()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.interp_fact",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "gt_processed / 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "dicoms / 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "weight / 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "AttenUnet.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.W_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(F_g, F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(F_l, F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(F_int, 1, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "in_channels": {
                    "value": "F_g",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_17": {
                "num_features": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_21": {
                "in_channels": {
                    "value": "F_l",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_22": {
                "num_features": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_26": {
                "in_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_27": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Ncuts.py": {
        "torch": {
            "stack_35": {
                "variable": {
                    "value": "cropped_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cropped_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cropped_seg, 6)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_27": {
                "start": {
                    "value": "(config.radius - 1) * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_53": {
                "input": {
                    "value": "-assoc",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "config.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_29": {
                "start": {
                    "value": "(config.radius - 1) * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_31": {
                "start": {
                    "value": "(config.radius - 1) * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "colrow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_33": {
                "tensors": {
                    "value": "column",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv3d_99": {
                "variable": {
                    "value": "self.predconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ConstantPad3d_103": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.radius - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "self.ReLU1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ReLU1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.uconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.uconv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_188": {
                "variable": {
                    "value": "self.reconsconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_193": {
                "variable": {
                    "value": "self.ReLU2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ReLU2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_197": {
                "variable": {
                    "value": "self.uconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.uconv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_268": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "upsample_img_size[-((i + 1) % config.MaxLv)]",
                            "Subscript"
                        ],
                        [
                            "upsample_img_size[0]",
                            "Subscript"
                        ],
                        [
                            "j + (feature2[-1].shape[dim],)",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "upsample_img_size[-((i + 1) % config.MaxLv)]",
                            "Subscript"
                        ],
                        [
                            "upsample_img_size[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature1[1], tempf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.interpolate(x, scale_factor=(1, 0.5, 0.5))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "(1, 0.5, 0.5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool3d_231": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "stride_size + (2 if feature2[-1].shape[dim] % 2 == 0 else 1,)",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ]
                    ]
                }
            },
            "interpolate_245": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "upsample_img_size[-((i + 1) % config.MaxLv)]",
                            "Subscript"
                        ],
                        [
                            "upsample_img_size[0]",
                            "Subscript"
                        ],
                        [
                            "j + (feature2[-1].shape[dim],)",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "upsample_img_size[-((i + 1) % config.MaxLv)]",
                            "Subscript"
                        ],
                        [
                            "upsample_img_size[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature1[2 * config.MaxLv - i - 1], tempf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_369": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "upsample_img_size[-((i + 1) % config.MaxLv)]",
                            "Subscript"
                        ],
                        [
                            "upsample_img_size[0]",
                            "Subscript"
                        ],
                        [
                            "j + (feature2[-1].shape[dim],)",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "upsample_img_size[-((i + 1) % config.MaxLv)]",
                            "Subscript"
                        ],
                        [
                            "upsample_img_size[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature2[1], tempf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_392": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1[0](feature1[-1])",
                            "Call"
                        ],
                        [
                            "self.ReLU1[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature1[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv1[i - config.MaxLv](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att[i - config.MaxLv](g=tempf, x=feature1[2 * config.MaxLv - i - 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature1[2 * config.MaxLv - i - 1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature1[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv1[config.MaxLv - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att[config.MaxLv - 2](g=tempf, x=feature1[1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature1[1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1[-2](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.predconv(tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.max_pool3d(feature1[-1], (2, 2, 2), stride=stride_size)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[0](feature2[-1])",
                            "Call"
                        ],
                        [
                            "self.ReLU2[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature2[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv2[i - config.MaxLv](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att1[i - config.MaxLv](g=tempf, x=feature2[2 * config.MaxLv - i - 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature2[2 * config.MaxLv - i - 1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature2[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv2[config.MaxLv - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att1[config.MaxLv - 2](g=tempf, x=feature2[1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature2[1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "functional.max_pool3d(feature2[-1], (2, 2, 2), stride=stride_size)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[-2](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.reconsconv(tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(tempf, scale_factor=(1, 2, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_41": {
                "in_channels": {
                    "value": "config.ChNum[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_42": {
                "in_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "PReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_44": {
                "num_features": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_80": {
                "in_channels": {
                    "value": "2 * config.ChNum[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "PReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_82": {
                "num_features": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_87": {
                "in_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "PReLU_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_89": {
                "num_features": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "PReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_105": {
                "num_features": {
                    "value": "config.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_126": {
                "in_channels": {
                    "value": "config.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_128": {
                "num_features": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_130": {
                "in_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_132": {
                "num_features": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_169": {
                "in_channels": {
                    "value": "2 * config.ChNum[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_171": {
                "num_features": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_176": {
                "in_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_178": {
                "num_features": {
                    "value": "config.ChNum[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "PReLU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_190": {
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_296": {
                "input": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1[0](feature1[-1])",
                            "Call"
                        ],
                        [
                            "self.ReLU1[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature1[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv1[i - config.MaxLv](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att[i - config.MaxLv](g=tempf, x=feature1[2 * config.MaxLv - i - 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature1[2 * config.MaxLv - i - 1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature1[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv1[config.MaxLv - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att[config.MaxLv - 2](g=tempf, x=feature1[1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature1[1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1[-2](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.predconv(tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.max_pool3d(feature1[-1], (2, 2, 2), stride=stride_size)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[0](feature2[-1])",
                            "Call"
                        ],
                        [
                            "self.ReLU2[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature2[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv2[i - config.MaxLv](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att1[i - config.MaxLv](g=tempf, x=feature2[2 * config.MaxLv - i - 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature2[2 * config.MaxLv - i - 1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature2[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv2[config.MaxLv - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att1[config.MaxLv - 2](g=tempf, x=feature2[1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature2[1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "functional.max_pool3d(feature2[-1], (2, 2, 2), stride=stride_size)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[-2](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.reconsconv(tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(tempf, scale_factor=(1, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_303": {
                "variable": {
                    "value": "feature2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feature2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool3d_333": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "stride_size + (2 if feature2[-1].shape[dim] % 2 == 0 else 1,)",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ]
                    ]
                }
            },
            "interpolate_350": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "upsample_img_size[-((i + 1) % config.MaxLv)]",
                            "Subscript"
                        ],
                        [
                            "upsample_img_size[0]",
                            "Subscript"
                        ],
                        [
                            "j + (feature2[-1].shape[dim],)",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "upsample_img_size[-((i + 1) % config.MaxLv)]",
                            "Subscript"
                        ],
                        [
                            "upsample_img_size[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature2[2 * config.MaxLv - i - 1], tempf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_397": {
                "variable": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tempf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1[0](feature1[-1])",
                            "Call"
                        ],
                        [
                            "self.ReLU1[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature1[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv1[i - config.MaxLv](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att[i - config.MaxLv](g=tempf, x=feature1[2 * config.MaxLv - i - 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature1[2 * config.MaxLv - i - 1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature1[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv1[config.MaxLv - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att[config.MaxLv - 2](g=tempf, x=feature1[1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature1[1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1[-2](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.predconv(tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[-1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.max_pool3d(feature1[-1], (2, 2, 2), stride=stride_size)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv1[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn1[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[0](feature2[-1])",
                            "Call"
                        ],
                        [
                            "self.ReLU2[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[0](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature2[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv2[i - config.MaxLv](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att1[i - config.MaxLv](g=tempf, x=feature2[2 * config.MaxLv - i - 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature2[2 * config.MaxLv - i - 1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(feature2[-1], size=j, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.uconv2[config.MaxLv - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.Att1[config.MaxLv - 2](g=tempf, x=feature2[1])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature2[1], tempf), dim=1)",
                            "Call"
                        ],
                        [
                            "functional.max_pool3d(feature2[-1], (2, 2, 2), stride=stride_size)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 2](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i - 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[4 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[2 * i + 1](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[-2](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[4 * config.MaxLv - 4](tempf)",
                            "Call"
                        ],
                        [
                            "self.conv2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[4 * config.MaxLv - 3](tempf)",
                            "Call"
                        ],
                        [
                            "self.reconsconv(tempf)",
                            "Call"
                        ],
                        [
                            "self.ReLU2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "self.bn2[-1](tempf)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(tempf)",
                            "Call"
                        ],
                        [
                            "functional.interpolate(tempf, scale_factor=(1, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_398": {
                "variable": {
                    "value": "segmentations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmentations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature2[0]",
                            "Subscript"
                        ],
                        [
                            "feature2[0]",
                            "Subscript"
                        ],
                        [
                            "functional.interpolate(segmentations, scale_factor=(1, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_50": {
                "in_channels": {
                    "value": "config.ChNum[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_51": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "PReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_53": {
                "num_features": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_55": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_56": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "PReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_58": {
                "num_features": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_64": {
                "in_channels": {
                    "value": "2 * config.ChNum[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_65": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "PReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_67": {
                "num_features": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_73": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "PReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_75": {
                "num_features": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_95": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_139": {
                "in_channels": {
                    "value": "config.ChNum[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_140": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_142": {
                "num_features": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_144": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_145": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_147": {
                "num_features": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_153": {
                "in_channels": {
                    "value": "2 * config.ChNum[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_154": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_156": {
                "num_features": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_161": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_162": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "config.ConvSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_164": {
                "num_features": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_185": {
                "in_channels": {
                    "value": "config.ChNum[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.ChNum[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "seglosses.py": {
        "torch": {
            "sum_20": {
                "variable": {
                    "value": "A_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iflat * iflat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "B_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tflat * tflat",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "is_available_28": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_40": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds_test",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.BatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "para",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=upinterp_fact, mode='nearest')",
                            "Call"
                        ],
                        [
                            "np.squeeze(x, 0)",
                            "Call"
                        ],
                        [
                            "x.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "upinterp_fact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(seg, 0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "upinterp_fact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(torch.unsqueeze(seg, 0).float(), scale_factor=upinterp_fact, mode='nearest')",
                            "Call"
                        ],
                        [
                            "np.squeeze(seg, 0)",
                            "Call"
                        ],
                        [
                            "np.squeeze(seg, 0)",
                            "Call"
                        ],
                        [
                            "seg.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(seg, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_43": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AbdomenDS('/raid/scratch/schatter/Dataset/dhanun/MRI/MRI_Train', 'train', config.datasetMode, config.interpFactor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.BatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "dataloader1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AbdomenDS('/raid/scratch/schatter/Dataset/dhanun/MRI/MRI_Val', 'train', config.datasetMode, config.interpFactor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.BatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_81": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=config.init_lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "config.lr_decay_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device1",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_63": {
                "variable": {
                    "value": "device2",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_65": {
                "variable": {
                    "value": "device1",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "device2",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_78": {
                "variable": {
                    "value": "reconstr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "checkpoint_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "open('out' + config.runName + '.txt', 'a')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'Segloss': Ave_Ncuts, 'reconloss': Ave_Rec}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "open('out' + config.runName + '.txt', 'a')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}