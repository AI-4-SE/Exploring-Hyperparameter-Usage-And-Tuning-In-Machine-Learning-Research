{
    "attacks/foolbox.py": {
        "torch": {}
    },
    "attacks/original_fab.py": {
        "torch": {
            "full_like_28": {
                "variable": {
                    "value": "best_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_100": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[y.shape[-1], *imgs.size()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_112": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_120": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([y.shape[-1], *imgs.size()]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.transpose(g2, 0, 1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_130": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_156": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_161": {
                "variable": {
                    "value": "indp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(t.shape).to(self.device) * c5 - t * (2 * c5 - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_169": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cumsum_173": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_185": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(w.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_210": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(b[c2] - sb[c2, lb]) / -s[c2, lb]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_210": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_229": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_229": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_231": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_232": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_233": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_234": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_237": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "rs2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rs[:, 1:], torch.zeros(rs.shape[0], 1).to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((-w5.squeeze() * rs[:, 0]).unsqueeze(1), torch.cumsum((-rs2 + rs) * ws, dim=1) - w5 * rs[:, 0].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_263": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(w.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_307": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_308": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_309": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_310": {
                "variable": {
                    "value": "(_, indr_rev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(r, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sort(r, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_312": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_312": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_313": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_316": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c.unsqueeze(-1), ds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_319": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c.unsqueeze(-1), ds), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_328": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(s.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_387": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_391": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_570": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_574": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_189": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(b[c_l] - sb[c_l, -1]) / -s[c_l, -1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_206": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_267": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_332": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumsum_174": {
                "input": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ws * d[u.unsqueeze(1), indp2]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_184": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_185": {
                "input": {
                    "value": "torch.tensor(w.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_246": {
                "input": {
                    "value": "w3s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w3[u, indr]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_262": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_263": {
                "input": {
                    "value": "torch.tensor(w.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_327": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_328": {
                "input": {
                    "value": "torch.tensor(s.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_390": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_573": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_723": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_724": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_125": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_160": {
                "*size": {
                    "value": "t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_213": {
                "input": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max((b[c_l] - sb[c_l, -1]) / -s[c_l, -1], torch.zeros(sb[c_l, -1].shape).to(self.device)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.max((b[c2] - sb[c2, lb]) / -s[c2, lb], torch.zeros(sb[c2, lb].shape).to(self.device)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_214": {
                "input": {
                    "value": "-lmbd_opt",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "rs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "data": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_287": {
                "input": {
                    "value": "ws[c2, lb] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_308": {
                "*size": {
                    "value": "r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "data": {
                    "value": "s.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_469": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_470": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_480": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_484": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_653": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_654": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_664": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_668": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "*size": {
                    "value": "sb[c2, lb].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_250": {
                "input": {
                    "value": "(-rs2 + rs) * ws",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_408": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_591": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_739": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_207": {
                "*size": {
                    "value": "sb[c_l, -1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_419": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_484": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_602": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_668": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_765": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_123": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_124": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_399": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_456": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_458": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_480": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_487": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_582": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_640": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_641": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_642": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_664": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_669": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_671": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_461": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_462": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_463": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_645": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_646": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_647": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_400": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_400": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_466": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_467": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_468": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_583": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_583": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_650": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_651": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_652": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_409": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_409": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_592": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_592": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_420": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_420": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_603": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_603": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_401": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_584": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_410": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_593": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_421": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_604": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "compile_results.py": {
        "torch": {
            "load_129": {
                "variable": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_dir, dataset, 'metrics_{}_{}.pt'.format(model, attack))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "median_143": {
                "input": {
                    "value": "adv_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics['distances'][distance]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "minimal_attack_cifar10.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_82": {
                "obj": {
                    "value": "attack_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_attack_metrics(model=model, attack_data=attack_data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'results/cifar10/metrics_{}_{}.pt'.format(model_name, name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "minimal_attack_imagenet.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "imagenet_1000_random.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "attack_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_attack_metrics(model=model, attack_data=attack_data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'results/imagenet/metrics_{}_{}.pt'.format(model_name, name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "minimal_attack_mnist.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST('data/torchvision', train=False, transform=transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_36": {
                "f": {
                    "value": "mnist_regular.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "mnist_robust_ddn.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_38": {
                "f": {
                    "value": "mnist_robust_trades.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_39": {
                "f": {
                    "value": "IBP_large_best.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_74": {
                "obj": {
                    "value": "attack_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_attack_metrics(model=model, attack_data=attack_data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'results/mnist/metrics_{}_{}.pt'.format(model_name, name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/imagenet.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_dict_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/mnist.py": {
        "torch": {
            "Sequential_60": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, 64, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "activ",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.feature_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(self.num_channels, 32, 3)), ('relu1', activ), ('conv2', nn.Conv2d(32, 32, 3)), ('relu2', activ), ('maxpool1', nn.MaxPool2d(2, 2)), ('conv3', nn.Conv2d(32, 64, 3)), ('relu3', activ), ('conv4', nn.Conv2d(64, 64, 3)), ('relu4', activ), ('maxpool2', nn.MaxPool2d(2, 2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc1', nn.Linear(64 * 4 * 4, 200)), ('relu1', activ), ('drop', nn.Dropout(drop)), ('fc2', nn.Linear(200, 200)), ('relu2', activ), ('fc3', nn.Linear(200, self.num_labels))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_71": {
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "in_dim // 2 * (in_dim // 2) * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "linear_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "64 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plot_results_cifar10.py": {
        "torch": {
            "load_79": {
                "variable": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_dir, 'metrics_{}_{}.pt'.format(model, attack))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_dir, 'metrics_{}_{}.pt'.format(model, attack))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "plot_results_imagenet.py": {
        "torch": {
            "load_79": {
                "variable": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_dir, 'metrics_{}_{}.pt'.format(model, attack))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_dir, 'metrics_{}_{}.pt'.format(model, attack))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "plot_results_mnist.py": {
        "torch": {
            "load_67": {
                "variable": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_dir, 'metrics_{}_{}.pt'.format(model, attack))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(result_dir, 'metrics_{}_{}.pt'.format(model, attack))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}