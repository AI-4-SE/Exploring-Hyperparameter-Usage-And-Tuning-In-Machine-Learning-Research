{
    "utils/diffusion_smoothing.py": {
        "sklearn": {
            "normalize_17": {
                "variable": {
                    "value": "lap",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "connectivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_vert_connectivity(Mesh(v=v, f=f))",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/canonical_pose_dataset.py": {
        "torch": {
            "from_numpy_64": {
                "variable": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "betas.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "self.gammas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gammas.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "self.unpose_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "unpose_v.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "self.apose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_Apose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/static_pose_shape_final.py": {
        "torch": {
            "zeros_like_23": {
                "variable": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(verts)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(unposed_gar_smooth.astype(np.float32)) - v_poseshaped",
                            "BinOp"
                        ],
                        [
                            "smooth_it(self.smoothing, self.smooth_level, self.smpl, thetas, betas, verts, self.garment_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "self.verts_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "verts_d.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "self.thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "thetas.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "beta[:10].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gamma.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_181": {
                "variable": {
                    "value": "self.ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "datasets": {
                    "value": "self.one_style_shape_datasets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_dir, 'shape/beta_{}.npy'.format(shape_idx))).astype(np.float32)[:10]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_317": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_dir, 'style/gamma_{}.npy'.format(shape_idx))).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "self.smooth_verts_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "smooth_verts_d.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_341": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['thetas'].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "verts_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(verts_d_path).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "unposed_gar_smooth.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_8": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_9": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_10": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/ops.py": {
        "torch": {
            "pow_10": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2 - v1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(v2 - v1, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, -1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(v2 - v1, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, -1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(v2 - v1, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, -1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(v2 - v1, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, -1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_48": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(v2 - v1, 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, -1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(y, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_48": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/tailornet_model.py": {
        "torch": {
            "DataLoader_117": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiStyleShape(garment_class=garment_class, gender=gender, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_125": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_84": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "thetas.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "betas.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "gammas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gammas.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "pred_disp_hf_pivot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rr.forward(thetas.cuda(), betas.cuda(), gammas.cuda()).view(bs, -1, 3) for rr in self.hf_runners]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "pred_disp_hf_pivot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/torch_smpl4garment.py": {
        "torch": {
            "norm_265": {
                "variable": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_266": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(theta + 1e-08, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_267": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, 3:].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_269": {
                "variable": {
                    "value": "v_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_270": {
                "variable": {
                    "value": "v_sin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_271": {
                "variable": {
                    "value": "quat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cos, v_sin * normalized]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_293": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_308": {
                "variable": {
                    "value": "Js",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Js",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(Js, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_324": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[A0]",
                            "List"
                        ],
                        [
                            "torch.stack(results, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "Js_w0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Js, torch.zeros(N, 24, 1, 1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_328": {
                "variable": {
                    "value": "init_bone",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[A0]",
                            "List"
                        ],
                        [
                            "torch.stack(results, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Js_w0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([Js, torch.zeros(N, 24, 1, 1).to(device)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_329": {
                "variable": {
                    "value": "init_bone",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_bone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(results, Js_w0)",
                            "Call"
                        ],
                        [
                            "F.pad(init_bone, [3, 0, 0, 0, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[3, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_339": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_356": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "Jx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "Jy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "Jz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "v_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "Jx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "Jy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "Jz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_147": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "variable": {
                    "value": "Jx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "variable": {
                    "value": "Jy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "Jz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_187": {
                "variable": {
                    "value": "Tinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "verts_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[verts, torch.ones(num_batch, verts.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "Jx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_213": {
                "variable": {
                    "value": "Jy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_214": {
                "variable": {
                    "value": "Jz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_shaped[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.J_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_215": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Jx, Jy, Jz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.view(1, self.num_verts, 24).repeat(num_batch, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(num_batch, 24, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "v_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_250": {
                "variable": {
                    "value": "Tinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_257": {
                "variable": {
                    "value": "verts_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[verts, torch.ones(verts.shape[0], verts.shape[1], 1, device=verts.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_304": {
                "variable": {
                    "value": "rot_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_rot_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1, 0, 0], [0, -1, 0], [0, 0, -1]], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "np.reshape(np.tile(np_rot_x, [N, 1]), [N, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_305": {
                "variable": {
                    "value": "root_rotation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Rs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "rot_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np_rot_x).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_311": {
                "variable": {
                    "value": "R_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 0, 0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "t_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t, torch.ones(N, 1, 1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "variable": {
                    "value": "res_here",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "results[parent[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "A_here",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_A(Rs[:, i], j_here)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_87": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "v_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_135": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_161": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_203": {
                "variable": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "index": {
                    "value": "device.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_242": {
                "variable": {
                    "value": "v_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, A.view(num_batch, 24, 16)).view(num_batch, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_313": {
                "tensors": {
                    "value": "[R_homo, t_homo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "class_info[k][vert_indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "class_info[k]['vert_indices'].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "class_info[k][f]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "class_info[k]['f'].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "ndarray": {
                    "value": "np_v_template",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(model['v_template'], dtype=np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "np_shapedirs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(model['shapedirs'], dtype=np.float)[:, :, :10]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(np_shapedirs, [-1, self.num_betas]).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "np_J_regressor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(model['J_regressor'].todense(), dtype=np.float).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "np_posedirs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(model['posedirs'], dtype=np.float)",
                            "Call"
                        ],
                        [
                            "np.reshape(np_posedirs, [-1, num_pose_basis]).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "np_joint_regressor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(model['J_regressor'].todense(), dtype=np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "ndarray": {
                    "value": "np_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(model['weights'], dtype=np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_65": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "vertex_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_weights.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_67": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "input": {
                    "value": "pose_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "input": {
                    "value": "pose_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "input": {
                    "value": "pose_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_219": {
                "input": {
                    "value": "pose_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ],
                        [
                            "Rs[:, 1:, :, :].sub(1.0, self.e3).view(-1, 207)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.posedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_235": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_327": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_118": {
                "*size": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_126": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_195": {
                "*size": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "verts.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_196": {
                "input": {
                    "value": "Tinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(T)",
                            "Call"
                        ],
                        [
                            "Tinv[:, indices]",
                            "Subscript"
                        ],
                        [
                            "torch.inverse(T)",
                            "Call"
                        ],
                        [
                            "Tinv[:, indices]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "verts_homo.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_234": {
                "*size": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_posed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_242": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_posed, torch.ones(num_batch, v_posed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_deformed, torch.ones(num_batch, v_deformed.shape[1], 1, device=self.cur_device)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_258": {
                "*size": {
                    "value": "verts.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "verts.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "verts.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_259": {
                "input": {
                    "value": "Tinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(T)",
                            "Call"
                        ],
                        [
                            "Tinv[:, indices]",
                            "Subscript"
                        ],
                        [
                            "torch.inverse(T)",
                            "Call"
                        ],
                        [
                            "Tinv[:, indices]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "verts_homo.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_312": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_125": {
                "*size": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_deformed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_241": {
                "*size": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "v_deformed.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cur_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "run_tailornet.py": {
        "torch": {
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "theta_normalized[None, :].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "ndarray": {
                    "value": "beta[None, :].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "gamma[None, :].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/base_trainer.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "self.garment_f_torch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.garment_f_np.astype(np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(jf)",
                            "Call"
                        ],
                        [
                            "args.__dict__",
                            "Attribute"
                        ],
                        [
                            "parse_argument()",
                            "Call"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(jf)",
                            "Call"
                        ],
                        [
                            "args.__dict__",
                            "Attribute"
                        ],
                        [
                            "parse_argument()",
                            "Call"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiStyleShape(self.garment_class, split=split, gender=self.gender, smooth_level=params['smooth_level'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if split == 'train' else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "load_75": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(ckpt_path, 'lin.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(ckpt_path, 'optimizer.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'lin.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "self.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'optimizer.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'lin.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "self.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'optimizer.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_248": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_250": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "(thetas, betas, gammas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "(thetas, betas, gammas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/eg_trainer.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "(thetas, betas, gammas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/hf_trainer.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneStyleShapeHF(self.garment_class, shape_idx=shape_idx, style_idx=style_idx, split=split, gender=self.gender, smooth_level=params['smooth_level'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if split == 'train' else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/lf_trainer.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/ss2g_trainer.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeStyleCanonPose(self.garment_class, split=split, gender=self.gender)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if split == 'train' else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "(betas, gammas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "(betas, gammas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/test_trainer.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneStyleShape(self.garment_class, shape_idx=shape_idx, style_idx=style_idx, split=split, gender=self.gender, smooth_level=params['smooth_level'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if split == 'train' else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "utils/geometry.py": {
        "torch": {
            "index_select_14": {
                "variable": {
                    "value": "fbv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_15": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fbv[:, :, 1] - fbv[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "fbv[:, :, 2] - fbv[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_25": {
                "variable": {
                    "value": "FID",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.size(0)",
                            "Call"
                        ],
                        [
                            "faces.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "FID",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_27": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FID",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(num_faces).unsqueeze(1).repeat(1, 3).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_29": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "torch.stack((VID, FID))",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(FID, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((data, data, data))",
                            "Call"
                        ],
                        [
                            "np.ones(len(IS))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_verts, num_faces)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_34": {
                "variable": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices=torch.stack((VID, FID)), values=data, size=(num_verts, num_faces))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "vertex_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.sparse.mm(mat, face_normals[:, :, 0].t()), torch.sparse.mm(mat, face_normals[:, :, 1].t()), torch.sparse.mm(mat, face_normals[:, :, 2].t()))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_16": {
                "input": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(fbv[:, :, 1] - fbv[:, :, 0], fbv[:, :, 2] - fbv[:, :, 0], dim=2)",
                            "Call"
                        ],
                        [
                            "normals / (torch.norm(normals, dim=-1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_30": {
                "tensors": {
                    "value": "(VID, FID)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_36": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices=torch.stack((VID, FID)), values=data, size=(num_verts, num_faces))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "face_normals[:, :, 0].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_37": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices=torch.stack((VID, FID)), values=data, size=(num_verts, num_faces))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "face_normals[:, :, 1].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_38": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices=torch.stack((VID, FID)), values=data, size=(num_verts, num_faces))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "face_normals[:, :, 2].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_41": {
                "input": {
                    "value": "vertex_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((torch.sparse.mm(mat, face_normals[:, :, 0].t()), torch.sparse.mm(mat, face_normals[:, :, 1].t()), torch.sparse.mm(mat, face_normals[:, :, 2].t())), dim=-1)",
                            "Call"
                        ],
                        [
                            "vertex_normals.transpose(1, 0) / degree.unsqueeze(0).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "vertex_normals / (torch.norm(vertex_normals, dim=-1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}