{
    "train.py": {
        "sklearn": {},
        "torch": {
            "is_available_107": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainDset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsetContainer.getDset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valDset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsetContainer_val.getDset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_148": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.GENERATOR(args).to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator, device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_154": {
                "variable": {
                    "value": "disc_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "disc_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.DISCPAIRED(args).to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(disc_pair, device_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_161": {
                "variable": {
                    "value": "disc_frame",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "disc_frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.DISCFRAME(args).to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(disc_frame, device_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_168": {
                "variable": {
                    "value": "disc_video",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "disc_video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.DISCVIDEO(args).to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(disc_video, device_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_175": {
                "variable": {
                    "value": "disc_emo",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "disc_emo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.DISCEMO(args).to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(disc_emo, device_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_180": {
                "f": {
                    "value": "os.path.join(args.model, 'generator.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_183": {
                "f": {
                    "value": "os.path.join(args.model_disc_emo, 'disc_emo.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_186": {
                "f": {
                    "value": "os.path.join(args.model_disc_frame, 'disc_frame.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convolutional_rnn/functional.py": {
        "torch": {
            "relu_18": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear_func(input, w_ih, b_ih) + linear_func(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_26": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear_func(input, w_ih, b_ih) + linear_func(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "ingate + linear_func(cx, w_pi)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "forgetgate + linear_func(cx, w_pf)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_46": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(cellgate, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "outgate + linear_func(cy, w_po)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "ingate + linear_func(cx, w_pi)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "forgetgate + linear_func(cx, w_pf)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_67": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(cellgate, 0.2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "outgate + linear_func(cy, w_po)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_94": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_271": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_output, ch_dim)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.pad(input, ps, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "ps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(i + 1 - h + s * (h - 1) + d * (k - 1)) // 2 for (h, k, s, d) in list(zip(insize, kernel_size, _stride, _dilation))[::-1] for i in range(2)]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_73": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_123": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "ch_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.dim() - weight[0][0].dim() + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_135": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_126": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_output, ch_dim)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.pad(input, ps, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "(h, ih[last_batch_size:batch_size])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convolutional_rnn/module.py": {
        "torch": {
            "Parameter_629": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_630": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PackedSequence_167": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PackedSequence(output, batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "batch_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_633": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_634": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_640": {
                "variable": {
                    "value": "self.weight_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_641": {
                "variable": {
                    "value": "self.weight_pf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_642": {
                "variable": {
                    "value": "self.weight_po",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "w_ih",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, layer_input_size // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "b_ih",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "b_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "w_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "w_pf",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "w_po",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datagen.py": {
        "torch": {
            "stack_144": {
                "variable": {
                    "value": "video_normed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "video_normed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(video_normed, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normTransform['image']",
                            "Subscript"
                        ],
                        [
                            "np.moveaxis(frame, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate.py": {
        "torch": {
            "is_available_119": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_120": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_124": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GENERATOR(args, debug=True).to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_179": {
                "variable": {
                    "value": "noise_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7423",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "speech_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "speech",
                    "type": "variable",
                    "possible_values": [
                        [
                            "speech / np.max(np.abs(speech))",
                            "BinOp"
                        ],
                        [
                            "dset['speech'][:]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(speech, (1, 1, speech.shape[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "image_c",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normed_c['image']",
                            "Subscript"
                        ],
                        [
                            "np.moveaxis(image_c, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_c)",
                            "Call"
                        ],
                        [
                            "np.reshape(image_c, (1, 3, 128, 128))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_125": {
                "f": {
                    "value": "os.path.join(args.model, 'generator.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "emo_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "to_categorical(emo_i, num_classes=6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_201": {
                "variable": {
                    "value": "emo_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generate_all_emotions.py": {
        "torch": {
            "is_available_72": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_83": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GENERATOR(args, debug=True).to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_129": {
                "variable": {
                    "value": "noise_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "999",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "os.path.join(args.model, 'generator.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "speech_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "speech",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset['speech'][:]",
                            "Subscript"
                        ],
                        [
                            "speech / np.max(np.abs(speech))",
                            "BinOp"
                        ],
                        [
                            "np.reshape(speech, (1, 1, speech.shape[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "emo_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "to_categorical(emotion, num_classes=6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "emo_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generate_mismatched_emotions.py": {
        "torch": {
            "is_available_77": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_84": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GENERATOR(args, train=False, debug=True).to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_126": {
                "variable": {
                    "value": "noise_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "os.path.join(model_path, 'generator.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "emo_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "to_categorical(rnd_emo, num_classes=6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_140": {
                "variable": {
                    "value": "emo_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "speech_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "speech",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset['speech'][:]",
                            "Subscript"
                        ],
                        [
                            "speech / np.max(np.abs(speech))",
                            "BinOp"
                        ],
                        [
                            "np.reshape(speech, (1, 1, speech.shape[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "interpolate_41": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape2Frame(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "reshape2Frame(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, scale_factor=1 / 2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.addContext(h)",
                            "Call"
                        ],
                        [
                            "SequenceWise(self.fc_1)(h)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "getattr(self, 'conv_' + str(i + 1))(h)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, x), 1)",
                            "Call"
                        ],
                        [
                            "self.conv_6(h)",
                            "Call"
                        ],
                        [
                            "SequenceWise(self.fc_1)(z)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), h.size(1), self.args.filters[-1], 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, img_f), 2)",
                            "Call"
                        ],
                        [
                            "SequenceWise2d(getattr(self, 'conv_' + str(i + 1)))(h)",
                            "Call"
                        ],
                        [
                            "SequenceWise2d(getattr(self, 'drp_' + str(i + 1)))(h)",
                            "Call"
                        ],
                        [
                            "upsampleVideo(h, z.size(0), z.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat((image, cond_img), 2)",
                            "Call"
                        ],
                        [
                            "h.contiguous().view(h.size(0) * h.size(1), h.size(2), h.size(3), h.size(4))",
                            "Call"
                        ],
                        [
                            "getattr(self, 'conv_' + str(i + 1))(h)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "x.view(n, t, -1)",
                            "Call"
                        ],
                        [
                            "self.projector(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_46": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape2Frame(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "reshape2Frame(h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, scale_factor=1 / 2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.addContext(h)",
                            "Call"
                        ],
                        [
                            "SequenceWise(self.fc_1)(h)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "getattr(self, 'conv_' + str(i + 1))(h)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, x), 1)",
                            "Call"
                        ],
                        [
                            "self.conv_6(h)",
                            "Call"
                        ],
                        [
                            "SequenceWise(self.fc_1)(z)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), h.size(1), self.args.filters[-1], 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, img_f), 2)",
                            "Call"
                        ],
                        [
                            "SequenceWise2d(getattr(self, 'conv_' + str(i + 1)))(h)",
                            "Call"
                        ],
                        [
                            "SequenceWise2d(getattr(self, 'drp_' + str(i + 1)))(h)",
                            "Call"
                        ],
                        [
                            "upsampleVideo(h, z.size(0), z.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat((image, cond_img), 2)",
                            "Call"
                        ],
                        [
                            "h.contiguous().view(h.size(0) * h.size(1), h.size(2), h.size(3), h.size(4))",
                            "Call"
                        ],
                        [
                            "getattr(self, 'conv_' + str(i + 1))(h)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "x.view(n, t, -1)",
                            "Call"
                        ],
                        [
                            "self.projector(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_20": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_21": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_22": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_23": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(560, self.args.speech_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.args.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_tensor.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_start, in_tensor, z_end)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.conv_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3 + self.args.filters[-1], self.args.img_dim, kernel_size=4, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_191": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_192": {
                "variable": {
                    "value": "self.noise_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(noise, 1).to(self.args.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(6, self.args.emo_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.args.speech_dim + self.args.img_dim + self.args.noise_dim + self.args.emo_dim, self.args.filters[-1] * 4 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.conv_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d((3 - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "variable": {
                    "value": "self.out_new",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(7 // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_314": {
                "variable": {
                    "value": "self.speech_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.speech_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_316": {
                "variable": {
                    "value": "self.emotion_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.speech_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "variable": {
                    "value": "self.emo_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.args.emo_dim, self.args.emo_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_spch, z_noise, z_img, z_emo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_376": {
                "variable": {
                    "value": "self.video_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 3 * 3, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_381": {
                "variable": {
                    "value": "self.rnn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.img_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_382": {
                "variable": {
                    "value": "self.rnn_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.speech_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_383": {
                "variable": {
                    "value": "self.rnn_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.img_dim + self.args.speech_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_385": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_394": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_pair",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_395": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.steplr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "z_video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_video, condition.unsqueeze(1).expand(-1, video.size(1), -1, -1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_spch, z_video)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_446": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8192, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_453": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_frame",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_455": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.steplr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image, cond_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_473": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "video_gt.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_488": {
                "variable": {
                    "value": "gradients_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(grad_dout ** 2, dim=1) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_521": {
                "variable": {
                    "value": "self.video_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 4 * 4, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_526": {
                "variable": {
                    "value": "self.rnn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.img_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_528": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_534": {
                "variable": {
                    "value": "self.emo_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_541": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_video",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_542": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.steplr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_544": {
                "variable": {
                    "value": "self.emo_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_570": {
                "variable": {
                    "value": "emotion",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emotion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(emotion, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_606": {
                "variable": {
                    "value": "self.projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8192, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_612": {
                "variable": {
                    "value": "self.rnn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_614": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 6 + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_619": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_emo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_621": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.steplr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_648": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(classes, torch.zeros(classes.size(0), 1).to(self.args.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_658": {
                "variable": {
                    "value": "gradients_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(grad_dout ** 2, dim=1) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result, expanded[:, i:i + in_tensor.size(1), :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.pe[:x.size(0), :]",
                            "BinOp"
                        ],
                        [
                            "x.contiguous().view(t * n, -1)",
                            "Call"
                        ],
                        [
                            "self.module(x)",
                            "Call"
                        ],
                        [
                            "x.view(t, n, -1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(t * n, c, w, h)",
                            "Call"
                        ],
                        [
                            "self.module(x)",
                            "Call"
                        ],
                        [
                            "x.view(n, t, c, w, h)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, scale_factor=1 / 2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "video",
                            "Name"
                        ],
                        [
                            "x.contiguous().view(t * n, c, w, h)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'conv_' + str(i + 1))(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, img_f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_327": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_329": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.steplr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_120": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "filt[0]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "3 + self.args.filters[i]",
                            "BinOp"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.args.filters[i]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.filters[i]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_121": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "560",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.speech_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_128": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "3 + self.args.filters[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.args.img_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_172": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.emo_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_214": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "self.args.emo_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.emo_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_216": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "self.args.speech_dim + self.args.img_dim + self.args.noise_dim + self.args.emo_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.filters[-1] * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_232": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_233": {
                "p": {
                    "value": "self.drp_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_262": {
                "padding": {
                    "value": "(3 - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "in_channels": {
                    "value": "3 + 2 * self.args.filters[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_265": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_268": {
                "p": {
                    "value": "self.drp_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_271": {
                "padding": {
                    "value": "7 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_318": {
                "in_features": {
                    "value": "self.args.emo_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.emo_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_319": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_320": {
                "in_features": {
                    "value": "self.args.emo_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_377": {
                "in_features": {
                    "value": "512 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_378": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_386": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_387": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_388": {
                "p": {
                    "value": "self.drp_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_389": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_447": {
                "in_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_448": {
                "negative_slope": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_449": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_480": {
                "outputs": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(image_c, interpolated)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * video_gt.data + (1 - alpha) * video_pd.data",
                            "BinOp"
                        ],
                        [
                            "Variable(interpolated, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "video_gt.data",
                            "Attribute"
                        ],
                        [
                            "Variable(interpolated, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(d_out.size()).to(self.args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "in_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_523": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_529": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_530": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_531": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_535": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_536": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_537": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_575": {
                "input": {
                    "value": "D_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "Variable(torch.Tensor(D_fake.shape).uniform_(0, 0.3)).to(self.args.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_578": {
                "input": {
                    "value": "D_real",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "Variable(torch.Tensor(D_real.shape).uniform_(0.7, 1.0)).to(self.args.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_607": {
                "in_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_608": {
                "negative_slope": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_609": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_615": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_650": {
                "outputs": {
                    "value": "d_out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(image_c, interpolated)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * video_gt.data + (1 - alpha) * video_pd.data",
                            "BinOp"
                        ],
                        [
                            "Variable(interpolated, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "video_gt.data",
                            "Attribute"
                        ],
                        [
                            "Variable(interpolated, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "classes.to(self.args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad1d_109": {
                "padding": {
                    "value": "(filt[1] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_110": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "filt[0]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "3 + self.args.filters[i]",
                            "BinOp"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.args.filters[i]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.filters[i]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filt[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "filt[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_115": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "p": {
                    "value": "drp_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_160": {
                "*args": {
                    "value": "nn.ReflectionPad2d((3 - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_259": {
                "p": {
                    "value": "self.drp_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "*args": {
                    "value": "nn.Conv2d(prev_filters, self.args.filters[i], 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_439": {
                "*args": {
                    "value": "nn.Conv2d(prev_filters, num_filters, kernel_size=filter_size, stride=stride, padding=filter_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_488": {
                "input": {
                    "value": "grad_dout ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_599": {
                "*args": {
                    "value": "nn.Conv2d(prev_filters, num_filters, kernel_size=filter_size, stride=stride, padding=filter_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_648": {
                "*size": {
                    "value": "classes.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_658": {
                "input": {
                    "value": "grad_dout ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_161": {
                "padding": {
                    "value": "(3 - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "filt[0]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "3 + self.args.filters[i]",
                            "BinOp"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.args.filters[i]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.filters[i]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.args.filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_164": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_165": {
                "p": {
                    "value": "self.drp_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "nn.ReflectionPad2d((3 - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_369": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "filt[0]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "3 + self.args.filters[i]",
                            "BinOp"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.args.filters[i]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.filters[i]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.args.filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_370": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_371": {
                "p": {
                    "value": "self.drp_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_440": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "filt[0]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "3 + self.args.filters[i]",
                            "BinOp"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.args.filters[i]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.filters[i]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "filter_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_441": {
                "negative_slope": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_483": {
                "*size": {
                    "value": "d_out.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_504": {
                "*args": {
                    "value": "nn.ReflectionPad2d((3 - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_513": {
                "*args": {
                    "value": "nn.ReflectionPad2d((3 - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_600": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "filt[0]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "3 + self.args.filters[i]",
                            "BinOp"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.args.filters[i]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.filters[i]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "filter_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_601": {
                "negative_slope": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_252": {
                "padding": {
                    "value": "(3 - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "3 + 2 * self.args.filters[-i - 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.args.filters[-i - 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_255": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_256": {
                "p": {
                    "value": "self.drp_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_505": {
                "padding": {
                    "value": "(3 - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_506": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "filt[0]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "3 + self.args.filters[i]",
                            "BinOp"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.args.filters[i]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.filters[i]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_507": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_514": {
                "padding": {
                    "value": "(3 - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_515": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "filt[0]",
                            "Subscript"
                        ],
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "3 + self.args.filters[i]",
                            "BinOp"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "self.args.filters[i]",
                            "Subscript"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.filters[i]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_516": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "MSELoss_17": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_61": {
                "variable": {
                    "value": "self.plotter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.out_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_63": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_64": {
                "variable": {
                    "value": "self.emo_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_66": {
                "variable": {
                    "value": "self.emo_loss_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.out_path, fold, 'generator.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "self.disc_pair.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.out_path, fold, 'disc_pair.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "self.disc_frame.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.out_path, fold, 'disc_frame.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_116": {
                "obj": {
                    "value": "self.disc_video.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.out_path, fold, 'disc_video.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "self.disc_emo.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.out_path, fold, 'disc_emo.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_216": {
                "input": {
                    "value": "emotion",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "input": {
                    "value": "emotion",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_270": {
                "input": {
                    "value": "emotion",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "(pd_video_v[:, :, :, :], video_v_p[:, :, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_263": {
                "input": {
                    "value": "emotion",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_215": {
                "input": {
                    "value": "torch.argmax(emotion, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_215": {
                "input": {
                    "value": "emotion",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}