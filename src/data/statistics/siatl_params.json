{
    "utils/data_parsing.py": {
        "sklearn": {
            "train_test_split_99": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obs[0] for obs in train]",
                            "ListComp"
                        ],
                        [
                            "[[int(l) for l in d[2:]] for d in data]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/datasets.py": {
        "sklearn": {
            "LabelEncoder_342": {
                "variable": {
                    "value": "label_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "pad_sequence_78": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.LongTensor(x[0]) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_80": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.LongTensor(x[1]) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_109": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.LongTensor(x[0]) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_211": {
                "n": {
                    "value": "len(self.batches)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/training.py": {
        "sklearn": {
            "accuracy_score_79": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "f1_score_83": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_47": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(f, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_71": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/sent_clf.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClfDataset(X_train, y_train, vocab=vocab, preprocess=preprocessor, vocab_size=config['vocab']['size'], seq_len=config['data']['seq_len'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BucketBatchSampler(src_lengths, config['batch_size'], True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ClfCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClfDataset(X_val, y_val, seq_len=train_set.seq_len, preprocess=preprocessor, vocab=train_set.vocab)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SortedSampler(val_lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ClfCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "val_loader_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClfDataset(X_train, y_train, vocab=vocab, preprocess=preprocessor, vocab_size=config['vocab']['size'], seq_len=config['data']['seq_len'])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "val_sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SortedSampler(src_lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ClfCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_85": {
                "variable": {
                    "value": "clf_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_86": {
                "variable": {
                    "value": "lm_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ASGD_103": {
                "variable": {
                    "value": "embed_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embed_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.embed.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ASGD_104": {
                "variable": {
                    "value": "rnn_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "bottom_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, chain(model.bottom_rnn.parameters(), model.vocab.parameters()))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "top_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, chain(model.top_rnn.parameters(), model.attention.parameters(), model.classes.parameters()))",
                            "Call"
                        ],
                        [
                            "filter(lambda p: p.requires_grad, chain(model.top_rnn.parameters(), model.classes.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['top_lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/sent_clf_no_aux.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClfDataset(X_train, y_train, vocab=vocab, preprocess=preprocessor, vocab_size=config['vocab']['size'], seq_len=config['data']['seq_len'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BucketBatchSampler(src_lengths, config['batch_size'], True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ClfCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClfDataset(X_val, y_val, seq_len=train_set.seq_len, preprocess=preprocessor, vocab=train_set.vocab)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SortedSampler(val_lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ClfCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "val_loader_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClfDataset(X_train, y_train, vocab=vocab, preprocess=preprocessor, vocab_size=config['vocab']['size'], seq_len=config['data']['seq_len'])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "val_sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SortedSampler(src_lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ClfCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "embed_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embed_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.embed.parameters())",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "rnn_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "bottom_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, chain(model.bottom_rnn.parameters()))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "top_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, chain(model.attention.parameters(), model.classes.parameters()))",
                            "Call"
                        ],
                        [
                            "filter(lambda p: p.requires_grad, model.classes.parameters())",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['top_lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/sent_clf_no_aux_trainer.py": {
        "torch": {
            "cat_181": {
                "variable": {
                    "value": "posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(posteriors, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__88": {
                "parameters": {
                    "value": "(p for group in self.optimizers[2].param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__119": {
                "parameters": {
                    "value": "(p for group in optimizer.param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__93": {
                "parameters": {
                    "value": "(p for group in self.optimizers[2].param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__97": {
                "parameters": {
                    "value": "(p for group in self.optimizers[1].param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__103": {
                "parameters": {
                    "value": "(p for group in optimizer.param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/sent_clf_trainer.py": {
        "torch": {
            "cat_168": {
                "variable": {
                    "value": "posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(posteriors, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__89": {
                "parameters": {
                    "value": "(p for group in self.optimizers[2].param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__92": {
                "parameters": {
                    "value": "(p for group in self.optimizers[2].param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__94": {
                "parameters": {
                    "value": "(p for group in self.optimizers[1].param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__98": {
                "parameters": {
                    "value": "(p for group in optimizer.param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/sent_lm.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LMDataset(config['data']['train_path'], preprocess=preprocessor, vocab=vocab, vocab_size=config['vocab']['size'], seq_len=config['data']['seq_len'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BucketBatchSampler(src_lengths, config['batch_size'], True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "LMCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LMDataset(config['data']['val_path'], preprocess=preprocessor, seq_len=train_set.seq_len, vocab=train_set.vocab)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SortedSampler(val_lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "LMCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "modules/embed_regularize.py": {
        "torch": {
            "embedding_20": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "masked_embed_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * embed.weight",
                            "BinOp"
                        ],
                        [
                            "embed.weight",
                            "Attribute"
                        ],
                        [
                            "scale.expand_as(masked_embed_weight) * masked_embed_weight",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed.padding_idx",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "embed.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "embed.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "embed.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "embed.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/helpers.py": {
        "torch": {
            "softmax_18": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_11": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_11": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_11": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "modules/layers.py": {
        "torch": {
            "Embedding_53": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Softmax_123": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_108": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_114": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "modules/locked_dropout.py": {
        "torch": {}
    },
    "modules/modules.py": {
        "torch": {
            "pad_packed_sequence_38": {
                "variable": {
                    "value": "(out_unpacked, _lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_43": {
                "variable": {
                    "value": "out_unpacked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_unpacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(out_unpacked, (0, 0, 0, pad_length))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, pad_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_83": {
                "variable": {
                    "value": "reverse_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_158": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_313": {
                "variable": {
                    "value": "self.idrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropouti",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_314": {
                "variable": {
                    "value": "self.hdrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropouth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_315": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_352": {
                "variable": {
                    "value": "self.vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bottom_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_353": {
                "variable": {
                    "value": "self.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.top_rnn.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_436": {
                "variable": {
                    "value": "self.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bottom_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_202": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[sorted_i]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lenghts_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_207": {
                "variable": {
                    "value": "(out_unpacked, _lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "(last_forward, last_backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_358": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bottom_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/trainer.py": {
        "torch": {
            "cat_68": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.narrow(dim, shift, length), torch.zeros_like(x[:, :1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "input": {
                    "value": "x[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__153": {
                "parameters": {
                    "value": "(p for group in optimizer.param_groups for p in group['params'])",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sys_config.py": {
        "torch": {}
    },
    "utils/opts.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}